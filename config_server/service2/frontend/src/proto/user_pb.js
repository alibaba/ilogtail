// source: user.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var agent_pb = require('./agent_pb.js');
goog.object.extend(proto, agent_pb);
goog.exportSymbol('proto.Agent', null, global);
goog.exportSymbol('proto.ApplyConfigToAgentGroupRequest', null, global);
goog.exportSymbol('proto.ApplyConfigToAgentGroupResponse', null, global);
goog.exportSymbol('proto.CreateAgentGroupRequest', null, global);
goog.exportSymbol('proto.CreateAgentGroupResponse', null, global);
goog.exportSymbol('proto.CreateConfigRequest', null, global);
goog.exportSymbol('proto.CreateConfigResponse', null, global);
goog.exportSymbol('proto.DeleteAgentGroupRequest', null, global);
goog.exportSymbol('proto.DeleteAgentGroupResponse', null, global);
goog.exportSymbol('proto.DeleteConfigRequest', null, global);
goog.exportSymbol('proto.DeleteConfigResponse', null, global);
goog.exportSymbol('proto.GetAgentGroupRequest', null, global);
goog.exportSymbol('proto.GetAgentGroupResponse', null, global);
goog.exportSymbol('proto.GetAppliedAgentGroupsRequest', null, global);
goog.exportSymbol('proto.GetAppliedAgentGroupsResponse', null, global);
goog.exportSymbol('proto.GetAppliedConfigsForAgentGroupRequest', null, global);
goog.exportSymbol('proto.GetAppliedConfigsForAgentGroupResponse', null, global);
goog.exportSymbol('proto.GetConfigRequest', null, global);
goog.exportSymbol('proto.GetConfigResponse', null, global);
goog.exportSymbol('proto.ListAgentGroupsRequest', null, global);
goog.exportSymbol('proto.ListAgentGroupsResponse', null, global);
goog.exportSymbol('proto.ListAgentsRequest', null, global);
goog.exportSymbol('proto.ListAgentsResponse', null, global);
goog.exportSymbol('proto.ListConfigsRequest', null, global);
goog.exportSymbol('proto.ListConfigsResponse', null, global);
goog.exportSymbol('proto.RemoveConfigFromAgentGroupRequest', null, global);
goog.exportSymbol('proto.RemoveConfigFromAgentGroupResponse', null, global);
goog.exportSymbol('proto.UpdateAgentGroupRequest', null, global);
goog.exportSymbol('proto.UpdateAgentGroupResponse', null, global);
goog.exportSymbol('proto.UpdateConfigRequest', null, global);
goog.exportSymbol('proto.UpdateConfigResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Agent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Agent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Agent.displayName = 'proto.Agent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateAgentGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateAgentGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CreateAgentGroupRequest.displayName = 'proto.CreateAgentGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateAgentGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateAgentGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CreateAgentGroupResponse.displayName = 'proto.CreateAgentGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateAgentGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateAgentGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UpdateAgentGroupRequest.displayName = 'proto.UpdateAgentGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateAgentGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateAgentGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UpdateAgentGroupResponse.displayName = 'proto.UpdateAgentGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteAgentGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteAgentGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeleteAgentGroupRequest.displayName = 'proto.DeleteAgentGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteAgentGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteAgentGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeleteAgentGroupResponse.displayName = 'proto.DeleteAgentGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAgentGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetAgentGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetAgentGroupRequest.displayName = 'proto.GetAgentGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAgentGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetAgentGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetAgentGroupResponse.displayName = 'proto.GetAgentGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListAgentGroupsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ListAgentGroupsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListAgentGroupsRequest.displayName = 'proto.ListAgentGroupsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListAgentGroupsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ListAgentGroupsResponse.repeatedFields_, null);
};
goog.inherits(proto.ListAgentGroupsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListAgentGroupsResponse.displayName = 'proto.ListAgentGroupsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CreateConfigRequest.displayName = 'proto.CreateConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CreateConfigResponse.displayName = 'proto.CreateConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UpdateConfigRequest.displayName = 'proto.UpdateConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UpdateConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UpdateConfigResponse.displayName = 'proto.UpdateConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeleteConfigRequest.displayName = 'proto.DeleteConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeleteConfigResponse.displayName = 'proto.DeleteConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetConfigRequest.displayName = 'proto.GetConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetConfigResponse.displayName = 'proto.GetConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListConfigsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ListConfigsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListConfigsRequest.displayName = 'proto.ListConfigsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListConfigsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ListConfigsResponse.repeatedFields_, null);
};
goog.inherits(proto.ListConfigsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListConfigsResponse.displayName = 'proto.ListConfigsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApplyConfigToAgentGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApplyConfigToAgentGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ApplyConfigToAgentGroupRequest.displayName = 'proto.ApplyConfigToAgentGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApplyConfigToAgentGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApplyConfigToAgentGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ApplyConfigToAgentGroupResponse.displayName = 'proto.ApplyConfigToAgentGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveConfigFromAgentGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveConfigFromAgentGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RemoveConfigFromAgentGroupRequest.displayName = 'proto.RemoveConfigFromAgentGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveConfigFromAgentGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveConfigFromAgentGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RemoveConfigFromAgentGroupResponse.displayName = 'proto.RemoveConfigFromAgentGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAppliedConfigsForAgentGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetAppliedConfigsForAgentGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetAppliedConfigsForAgentGroupRequest.displayName = 'proto.GetAppliedConfigsForAgentGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAppliedConfigsForAgentGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetAppliedConfigsForAgentGroupResponse.repeatedFields_, null);
};
goog.inherits(proto.GetAppliedConfigsForAgentGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetAppliedConfigsForAgentGroupResponse.displayName = 'proto.GetAppliedConfigsForAgentGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAppliedAgentGroupsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetAppliedAgentGroupsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetAppliedAgentGroupsRequest.displayName = 'proto.GetAppliedAgentGroupsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetAppliedAgentGroupsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetAppliedAgentGroupsResponse.repeatedFields_, null);
};
goog.inherits(proto.GetAppliedAgentGroupsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetAppliedAgentGroupsResponse.displayName = 'proto.GetAppliedAgentGroupsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListAgentsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ListAgentsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListAgentsRequest.displayName = 'proto.ListAgentsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListAgentsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ListAgentsResponse.repeatedFields_, null);
};
goog.inherits(proto.ListAgentsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListAgentsResponse.displayName = 'proto.ListAgentsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Agent.prototype.toObject = function(opt_includeInstance) {
  return proto.Agent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Agent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Agent.toObject = function(includeInstance, msg) {
  var f, obj = {
    capabilities: jspb.Message.getFieldWithDefault(msg, 1, 0),
    instanceId: msg.getInstanceId_asB64(),
    agentType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    attributes: (f = msg.getAttributes()) && agent_pb.AgentAttributes.toObject(includeInstance, f),
    runningStatus: jspb.Message.getFieldWithDefault(msg, 5, ""),
    startupTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 7, 0),
    opaque: msg.getOpaque_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Agent}
 */
proto.Agent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Agent;
  return proto.Agent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Agent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Agent}
 */
proto.Agent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCapabilities(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInstanceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentType(value);
      break;
    case 4:
      var value = new agent_pb.AgentAttributes;
      reader.readMessage(value,agent_pb.AgentAttributes.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRunningStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartupTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFlags(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Agent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Agent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Agent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Agent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCapabilities();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getInstanceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAgentType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      agent_pb.AgentAttributes.serializeBinaryToWriter
    );
  }
  f = message.getRunningStatus();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStartupTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getOpaque_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional uint64 capabilities = 1;
 * @return {number}
 */
proto.Agent.prototype.getCapabilities = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Agent} returns this
 */
proto.Agent.prototype.setCapabilities = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes instance_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Agent.prototype.getInstanceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes instance_id = 2;
 * This is a type-conversion wrapper around `getInstanceId()`
 * @return {string}
 */
proto.Agent.prototype.getInstanceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInstanceId()));
};


/**
 * optional bytes instance_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstanceId()`
 * @return {!Uint8Array}
 */
proto.Agent.prototype.getInstanceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInstanceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Agent} returns this
 */
proto.Agent.prototype.setInstanceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string agent_type = 3;
 * @return {string}
 */
proto.Agent.prototype.getAgentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Agent} returns this
 */
proto.Agent.prototype.setAgentType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional AgentAttributes attributes = 4;
 * @return {?proto.AgentAttributes}
 */
proto.Agent.prototype.getAttributes = function() {
  return /** @type{?proto.AgentAttributes} */ (
    jspb.Message.getWrapperField(this, agent_pb.AgentAttributes, 4));
};


/**
 * @param {?proto.AgentAttributes|undefined} value
 * @return {!proto.Agent} returns this
*/
proto.Agent.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Agent} returns this
 */
proto.Agent.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Agent.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string running_status = 5;
 * @return {string}
 */
proto.Agent.prototype.getRunningStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Agent} returns this
 */
proto.Agent.prototype.setRunningStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 startup_time = 6;
 * @return {number}
 */
proto.Agent.prototype.getStartupTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Agent} returns this
 */
proto.Agent.prototype.setStartupTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 flags = 7;
 * @return {number}
 */
proto.Agent.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Agent} returns this
 */
proto.Agent.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes opaque = 8;
 * @return {!(string|Uint8Array)}
 */
proto.Agent.prototype.getOpaque = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes opaque = 8;
 * This is a type-conversion wrapper around `getOpaque()`
 * @return {string}
 */
proto.Agent.prototype.getOpaque_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaque()));
};


/**
 * optional bytes opaque = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaque()`
 * @return {!Uint8Array}
 */
proto.Agent.prototype.getOpaque_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaque()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Agent} returns this
 */
proto.Agent.prototype.setOpaque = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateAgentGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateAgentGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateAgentGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateAgentGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    agentGroup: (f = msg.getAgentGroup()) && agent_pb.AgentGroupTag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateAgentGroupRequest}
 */
proto.CreateAgentGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateAgentGroupRequest;
  return proto.CreateAgentGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateAgentGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateAgentGroupRequest}
 */
proto.CreateAgentGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.AgentGroupTag;
      reader.readMessage(value,agent_pb.AgentGroupTag.deserializeBinaryFromReader);
      msg.setAgentGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateAgentGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateAgentGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateAgentGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateAgentGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAgentGroup();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.AgentGroupTag.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.CreateAgentGroupRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.CreateAgentGroupRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.CreateAgentGroupRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CreateAgentGroupRequest} returns this
 */
proto.CreateAgentGroupRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional AgentGroupTag agent_group = 2;
 * @return {?proto.AgentGroupTag}
 */
proto.CreateAgentGroupRequest.prototype.getAgentGroup = function() {
  return /** @type{?proto.AgentGroupTag} */ (
    jspb.Message.getWrapperField(this, agent_pb.AgentGroupTag, 2));
};


/**
 * @param {?proto.AgentGroupTag|undefined} value
 * @return {!proto.CreateAgentGroupRequest} returns this
*/
proto.CreateAgentGroupRequest.prototype.setAgentGroup = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CreateAgentGroupRequest} returns this
 */
proto.CreateAgentGroupRequest.prototype.clearAgentGroup = function() {
  return this.setAgentGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CreateAgentGroupRequest.prototype.hasAgentGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateAgentGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateAgentGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateAgentGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateAgentGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateAgentGroupResponse}
 */
proto.CreateAgentGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateAgentGroupResponse;
  return proto.CreateAgentGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateAgentGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateAgentGroupResponse}
 */
proto.CreateAgentGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateAgentGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateAgentGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateAgentGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateAgentGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.CreateAgentGroupResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.CreateAgentGroupResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.CreateAgentGroupResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CreateAgentGroupResponse} returns this
 */
proto.CreateAgentGroupResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.CreateAgentGroupResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.CreateAgentGroupResponse} returns this
*/
proto.CreateAgentGroupResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CreateAgentGroupResponse} returns this
 */
proto.CreateAgentGroupResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CreateAgentGroupResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateAgentGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateAgentGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateAgentGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateAgentGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    agentGroup: (f = msg.getAgentGroup()) && agent_pb.AgentGroupTag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateAgentGroupRequest}
 */
proto.UpdateAgentGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateAgentGroupRequest;
  return proto.UpdateAgentGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateAgentGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateAgentGroupRequest}
 */
proto.UpdateAgentGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.AgentGroupTag;
      reader.readMessage(value,agent_pb.AgentGroupTag.deserializeBinaryFromReader);
      msg.setAgentGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateAgentGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateAgentGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateAgentGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateAgentGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAgentGroup();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.AgentGroupTag.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.UpdateAgentGroupRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.UpdateAgentGroupRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.UpdateAgentGroupRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UpdateAgentGroupRequest} returns this
 */
proto.UpdateAgentGroupRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional AgentGroupTag agent_group = 2;
 * @return {?proto.AgentGroupTag}
 */
proto.UpdateAgentGroupRequest.prototype.getAgentGroup = function() {
  return /** @type{?proto.AgentGroupTag} */ (
    jspb.Message.getWrapperField(this, agent_pb.AgentGroupTag, 2));
};


/**
 * @param {?proto.AgentGroupTag|undefined} value
 * @return {!proto.UpdateAgentGroupRequest} returns this
*/
proto.UpdateAgentGroupRequest.prototype.setAgentGroup = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UpdateAgentGroupRequest} returns this
 */
proto.UpdateAgentGroupRequest.prototype.clearAgentGroup = function() {
  return this.setAgentGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UpdateAgentGroupRequest.prototype.hasAgentGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateAgentGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateAgentGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateAgentGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateAgentGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateAgentGroupResponse}
 */
proto.UpdateAgentGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateAgentGroupResponse;
  return proto.UpdateAgentGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateAgentGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateAgentGroupResponse}
 */
proto.UpdateAgentGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateAgentGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateAgentGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateAgentGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateAgentGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.UpdateAgentGroupResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.UpdateAgentGroupResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.UpdateAgentGroupResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UpdateAgentGroupResponse} returns this
 */
proto.UpdateAgentGroupResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.UpdateAgentGroupResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.UpdateAgentGroupResponse} returns this
*/
proto.UpdateAgentGroupResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UpdateAgentGroupResponse} returns this
 */
proto.UpdateAgentGroupResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UpdateAgentGroupResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteAgentGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteAgentGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteAgentGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteAgentGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    groupName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteAgentGroupRequest}
 */
proto.DeleteAgentGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteAgentGroupRequest;
  return proto.DeleteAgentGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteAgentGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteAgentGroupRequest}
 */
proto.DeleteAgentGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteAgentGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteAgentGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteAgentGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteAgentGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.DeleteAgentGroupRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.DeleteAgentGroupRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.DeleteAgentGroupRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.DeleteAgentGroupRequest} returns this
 */
proto.DeleteAgentGroupRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string group_name = 2;
 * @return {string}
 */
proto.DeleteAgentGroupRequest.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeleteAgentGroupRequest} returns this
 */
proto.DeleteAgentGroupRequest.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteAgentGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteAgentGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteAgentGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteAgentGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteAgentGroupResponse}
 */
proto.DeleteAgentGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteAgentGroupResponse;
  return proto.DeleteAgentGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteAgentGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteAgentGroupResponse}
 */
proto.DeleteAgentGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteAgentGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteAgentGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteAgentGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteAgentGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.DeleteAgentGroupResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.DeleteAgentGroupResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.DeleteAgentGroupResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.DeleteAgentGroupResponse} returns this
 */
proto.DeleteAgentGroupResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.DeleteAgentGroupResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.DeleteAgentGroupResponse} returns this
*/
proto.DeleteAgentGroupResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DeleteAgentGroupResponse} returns this
 */
proto.DeleteAgentGroupResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeleteAgentGroupResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAgentGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAgentGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAgentGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAgentGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    groupName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAgentGroupRequest}
 */
proto.GetAgentGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAgentGroupRequest;
  return proto.GetAgentGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAgentGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAgentGroupRequest}
 */
proto.GetAgentGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAgentGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAgentGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAgentGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAgentGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GetAgentGroupRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.GetAgentGroupRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.GetAgentGroupRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.GetAgentGroupRequest} returns this
 */
proto.GetAgentGroupRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string group_name = 2;
 * @return {string}
 */
proto.GetAgentGroupRequest.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetAgentGroupRequest} returns this
 */
proto.GetAgentGroupRequest.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAgentGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAgentGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAgentGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAgentGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f),
    agentGroup: (f = msg.getAgentGroup()) && agent_pb.AgentGroupTag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAgentGroupResponse}
 */
proto.GetAgentGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAgentGroupResponse;
  return proto.GetAgentGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAgentGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAgentGroupResponse}
 */
proto.GetAgentGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    case 3:
      var value = new agent_pb.AgentGroupTag;
      reader.readMessage(value,agent_pb.AgentGroupTag.deserializeBinaryFromReader);
      msg.setAgentGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAgentGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAgentGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAgentGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAgentGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
  f = message.getAgentGroup();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      agent_pb.AgentGroupTag.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GetAgentGroupResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.GetAgentGroupResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.GetAgentGroupResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.GetAgentGroupResponse} returns this
 */
proto.GetAgentGroupResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.GetAgentGroupResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.GetAgentGroupResponse} returns this
*/
proto.GetAgentGroupResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetAgentGroupResponse} returns this
 */
proto.GetAgentGroupResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetAgentGroupResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AgentGroupTag agent_group = 3;
 * @return {?proto.AgentGroupTag}
 */
proto.GetAgentGroupResponse.prototype.getAgentGroup = function() {
  return /** @type{?proto.AgentGroupTag} */ (
    jspb.Message.getWrapperField(this, agent_pb.AgentGroupTag, 3));
};


/**
 * @param {?proto.AgentGroupTag|undefined} value
 * @return {!proto.GetAgentGroupResponse} returns this
*/
proto.GetAgentGroupResponse.prototype.setAgentGroup = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetAgentGroupResponse} returns this
 */
proto.GetAgentGroupResponse.prototype.clearAgentGroup = function() {
  return this.setAgentGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetAgentGroupResponse.prototype.hasAgentGroup = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListAgentGroupsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ListAgentGroupsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListAgentGroupsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListAgentGroupsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListAgentGroupsRequest}
 */
proto.ListAgentGroupsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListAgentGroupsRequest;
  return proto.ListAgentGroupsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListAgentGroupsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListAgentGroupsRequest}
 */
proto.ListAgentGroupsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListAgentGroupsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListAgentGroupsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListAgentGroupsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListAgentGroupsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ListAgentGroupsRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.ListAgentGroupsRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.ListAgentGroupsRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ListAgentGroupsRequest} returns this
 */
proto.ListAgentGroupsRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ListAgentGroupsResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListAgentGroupsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ListAgentGroupsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListAgentGroupsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListAgentGroupsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f),
    agentGroupsList: jspb.Message.toObjectList(msg.getAgentGroupsList(),
    agent_pb.AgentGroupTag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListAgentGroupsResponse}
 */
proto.ListAgentGroupsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListAgentGroupsResponse;
  return proto.ListAgentGroupsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListAgentGroupsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListAgentGroupsResponse}
 */
proto.ListAgentGroupsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    case 4:
      var value = new agent_pb.AgentGroupTag;
      reader.readMessage(value,agent_pb.AgentGroupTag.deserializeBinaryFromReader);
      msg.addAgentGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListAgentGroupsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListAgentGroupsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListAgentGroupsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListAgentGroupsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
  f = message.getAgentGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      agent_pb.AgentGroupTag.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ListAgentGroupsResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.ListAgentGroupsResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.ListAgentGroupsResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ListAgentGroupsResponse} returns this
 */
proto.ListAgentGroupsResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.ListAgentGroupsResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.ListAgentGroupsResponse} returns this
*/
proto.ListAgentGroupsResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ListAgentGroupsResponse} returns this
 */
proto.ListAgentGroupsResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ListAgentGroupsResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated AgentGroupTag agent_groups = 4;
 * @return {!Array<!proto.AgentGroupTag>}
 */
proto.ListAgentGroupsResponse.prototype.getAgentGroupsList = function() {
  return /** @type{!Array<!proto.AgentGroupTag>} */ (
    jspb.Message.getRepeatedWrapperField(this, agent_pb.AgentGroupTag, 4));
};


/**
 * @param {!Array<!proto.AgentGroupTag>} value
 * @return {!proto.ListAgentGroupsResponse} returns this
*/
proto.ListAgentGroupsResponse.prototype.setAgentGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.AgentGroupTag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AgentGroupTag}
 */
proto.ListAgentGroupsResponse.prototype.addAgentGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.AgentGroupTag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ListAgentGroupsResponse} returns this
 */
proto.ListAgentGroupsResponse.prototype.clearAgentGroupsList = function() {
  return this.setAgentGroupsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    configDetail: (f = msg.getConfigDetail()) && agent_pb.ConfigDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateConfigRequest}
 */
proto.CreateConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateConfigRequest;
  return proto.CreateConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateConfigRequest}
 */
proto.CreateConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.ConfigDetail;
      reader.readMessage(value,agent_pb.ConfigDetail.deserializeBinaryFromReader);
      msg.setConfigDetail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfigDetail();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.ConfigDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.CreateConfigRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.CreateConfigRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.CreateConfigRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CreateConfigRequest} returns this
 */
proto.CreateConfigRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ConfigDetail config_detail = 2;
 * @return {?proto.ConfigDetail}
 */
proto.CreateConfigRequest.prototype.getConfigDetail = function() {
  return /** @type{?proto.ConfigDetail} */ (
    jspb.Message.getWrapperField(this, agent_pb.ConfigDetail, 2));
};


/**
 * @param {?proto.ConfigDetail|undefined} value
 * @return {!proto.CreateConfigRequest} returns this
*/
proto.CreateConfigRequest.prototype.setConfigDetail = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CreateConfigRequest} returns this
 */
proto.CreateConfigRequest.prototype.clearConfigDetail = function() {
  return this.setConfigDetail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CreateConfigRequest.prototype.hasConfigDetail = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateConfigResponse}
 */
proto.CreateConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateConfigResponse;
  return proto.CreateConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateConfigResponse}
 */
proto.CreateConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.CreateConfigResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.CreateConfigResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.CreateConfigResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CreateConfigResponse} returns this
 */
proto.CreateConfigResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.CreateConfigResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.CreateConfigResponse} returns this
*/
proto.CreateConfigResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CreateConfigResponse} returns this
 */
proto.CreateConfigResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CreateConfigResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    configDetail: (f = msg.getConfigDetail()) && agent_pb.ConfigDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateConfigRequest}
 */
proto.UpdateConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateConfigRequest;
  return proto.UpdateConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateConfigRequest}
 */
proto.UpdateConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.ConfigDetail;
      reader.readMessage(value,agent_pb.ConfigDetail.deserializeBinaryFromReader);
      msg.setConfigDetail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfigDetail();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.ConfigDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.UpdateConfigRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.UpdateConfigRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.UpdateConfigRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UpdateConfigRequest} returns this
 */
proto.UpdateConfigRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ConfigDetail config_detail = 2;
 * @return {?proto.ConfigDetail}
 */
proto.UpdateConfigRequest.prototype.getConfigDetail = function() {
  return /** @type{?proto.ConfigDetail} */ (
    jspb.Message.getWrapperField(this, agent_pb.ConfigDetail, 2));
};


/**
 * @param {?proto.ConfigDetail|undefined} value
 * @return {!proto.UpdateConfigRequest} returns this
*/
proto.UpdateConfigRequest.prototype.setConfigDetail = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UpdateConfigRequest} returns this
 */
proto.UpdateConfigRequest.prototype.clearConfigDetail = function() {
  return this.setConfigDetail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UpdateConfigRequest.prototype.hasConfigDetail = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateConfigResponse}
 */
proto.UpdateConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateConfigResponse;
  return proto.UpdateConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateConfigResponse}
 */
proto.UpdateConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UpdateConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.UpdateConfigResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.UpdateConfigResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.UpdateConfigResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UpdateConfigResponse} returns this
 */
proto.UpdateConfigResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.UpdateConfigResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.UpdateConfigResponse} returns this
*/
proto.UpdateConfigResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UpdateConfigResponse} returns this
 */
proto.UpdateConfigResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UpdateConfigResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    configName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteConfigRequest}
 */
proto.DeleteConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteConfigRequest;
  return proto.DeleteConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteConfigRequest}
 */
proto.DeleteConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfigName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.DeleteConfigRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.DeleteConfigRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.DeleteConfigRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.DeleteConfigRequest} returns this
 */
proto.DeleteConfigRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string config_name = 2;
 * @return {string}
 */
proto.DeleteConfigRequest.prototype.getConfigName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeleteConfigRequest} returns this
 */
proto.DeleteConfigRequest.prototype.setConfigName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteConfigResponse}
 */
proto.DeleteConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteConfigResponse;
  return proto.DeleteConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteConfigResponse}
 */
proto.DeleteConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.DeleteConfigResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.DeleteConfigResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.DeleteConfigResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.DeleteConfigResponse} returns this
 */
proto.DeleteConfigResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.DeleteConfigResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.DeleteConfigResponse} returns this
*/
proto.DeleteConfigResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DeleteConfigResponse} returns this
 */
proto.DeleteConfigResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeleteConfigResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    configName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetConfigRequest}
 */
proto.GetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetConfigRequest;
  return proto.GetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetConfigRequest}
 */
proto.GetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfigName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GetConfigRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.GetConfigRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.GetConfigRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.GetConfigRequest} returns this
 */
proto.GetConfigRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string config_name = 2;
 * @return {string}
 */
proto.GetConfigRequest.prototype.getConfigName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetConfigRequest} returns this
 */
proto.GetConfigRequest.prototype.setConfigName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f),
    configDetail: (f = msg.getConfigDetail()) && agent_pb.ConfigDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetConfigResponse}
 */
proto.GetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetConfigResponse;
  return proto.GetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetConfigResponse}
 */
proto.GetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    case 3:
      var value = new agent_pb.ConfigDetail;
      reader.readMessage(value,agent_pb.ConfigDetail.deserializeBinaryFromReader);
      msg.setConfigDetail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
  f = message.getConfigDetail();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      agent_pb.ConfigDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GetConfigResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.GetConfigResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.GetConfigResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.GetConfigResponse} returns this
 */
proto.GetConfigResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.GetConfigResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.GetConfigResponse} returns this
*/
proto.GetConfigResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetConfigResponse} returns this
 */
proto.GetConfigResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetConfigResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConfigDetail config_detail = 3;
 * @return {?proto.ConfigDetail}
 */
proto.GetConfigResponse.prototype.getConfigDetail = function() {
  return /** @type{?proto.ConfigDetail} */ (
    jspb.Message.getWrapperField(this, agent_pb.ConfigDetail, 3));
};


/**
 * @param {?proto.ConfigDetail|undefined} value
 * @return {!proto.GetConfigResponse} returns this
*/
proto.GetConfigResponse.prototype.setConfigDetail = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetConfigResponse} returns this
 */
proto.GetConfigResponse.prototype.clearConfigDetail = function() {
  return this.setConfigDetail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetConfigResponse.prototype.hasConfigDetail = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListConfigsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ListConfigsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListConfigsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListConfigsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListConfigsRequest}
 */
proto.ListConfigsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListConfigsRequest;
  return proto.ListConfigsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListConfigsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListConfigsRequest}
 */
proto.ListConfigsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListConfigsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListConfigsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListConfigsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListConfigsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ListConfigsRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.ListConfigsRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.ListConfigsRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ListConfigsRequest} returns this
 */
proto.ListConfigsRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ListConfigsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListConfigsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ListConfigsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListConfigsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListConfigsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f),
    configDetailsList: jspb.Message.toObjectList(msg.getConfigDetailsList(),
    agent_pb.ConfigDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListConfigsResponse}
 */
proto.ListConfigsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListConfigsResponse;
  return proto.ListConfigsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListConfigsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListConfigsResponse}
 */
proto.ListConfigsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    case 3:
      var value = new agent_pb.ConfigDetail;
      reader.readMessage(value,agent_pb.ConfigDetail.deserializeBinaryFromReader);
      msg.addConfigDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListConfigsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListConfigsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListConfigsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListConfigsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
  f = message.getConfigDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      agent_pb.ConfigDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ListConfigsResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.ListConfigsResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.ListConfigsResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ListConfigsResponse} returns this
 */
proto.ListConfigsResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.ListConfigsResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.ListConfigsResponse} returns this
*/
proto.ListConfigsResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ListConfigsResponse} returns this
 */
proto.ListConfigsResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ListConfigsResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ConfigDetail config_details = 3;
 * @return {!Array<!proto.ConfigDetail>}
 */
proto.ListConfigsResponse.prototype.getConfigDetailsList = function() {
  return /** @type{!Array<!proto.ConfigDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, agent_pb.ConfigDetail, 3));
};


/**
 * @param {!Array<!proto.ConfigDetail>} value
 * @return {!proto.ListConfigsResponse} returns this
*/
proto.ListConfigsResponse.prototype.setConfigDetailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ConfigDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConfigDetail}
 */
proto.ListConfigsResponse.prototype.addConfigDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ConfigDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ListConfigsResponse} returns this
 */
proto.ListConfigsResponse.prototype.clearConfigDetailsList = function() {
  return this.setConfigDetailsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApplyConfigToAgentGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ApplyConfigToAgentGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApplyConfigToAgentGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplyConfigToAgentGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    configName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApplyConfigToAgentGroupRequest}
 */
proto.ApplyConfigToAgentGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApplyConfigToAgentGroupRequest;
  return proto.ApplyConfigToAgentGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApplyConfigToAgentGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApplyConfigToAgentGroupRequest}
 */
proto.ApplyConfigToAgentGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApplyConfigToAgentGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApplyConfigToAgentGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApplyConfigToAgentGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplyConfigToAgentGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfigName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ApplyConfigToAgentGroupRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.ApplyConfigToAgentGroupRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.ApplyConfigToAgentGroupRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ApplyConfigToAgentGroupRequest} returns this
 */
proto.ApplyConfigToAgentGroupRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string config_name = 2;
 * @return {string}
 */
proto.ApplyConfigToAgentGroupRequest.prototype.getConfigName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ApplyConfigToAgentGroupRequest} returns this
 */
proto.ApplyConfigToAgentGroupRequest.prototype.setConfigName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string group_name = 3;
 * @return {string}
 */
proto.ApplyConfigToAgentGroupRequest.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ApplyConfigToAgentGroupRequest} returns this
 */
proto.ApplyConfigToAgentGroupRequest.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApplyConfigToAgentGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ApplyConfigToAgentGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApplyConfigToAgentGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplyConfigToAgentGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApplyConfigToAgentGroupResponse}
 */
proto.ApplyConfigToAgentGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApplyConfigToAgentGroupResponse;
  return proto.ApplyConfigToAgentGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApplyConfigToAgentGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApplyConfigToAgentGroupResponse}
 */
proto.ApplyConfigToAgentGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApplyConfigToAgentGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApplyConfigToAgentGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApplyConfigToAgentGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplyConfigToAgentGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ApplyConfigToAgentGroupResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.ApplyConfigToAgentGroupResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.ApplyConfigToAgentGroupResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ApplyConfigToAgentGroupResponse} returns this
 */
proto.ApplyConfigToAgentGroupResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.ApplyConfigToAgentGroupResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.ApplyConfigToAgentGroupResponse} returns this
*/
proto.ApplyConfigToAgentGroupResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ApplyConfigToAgentGroupResponse} returns this
 */
proto.ApplyConfigToAgentGroupResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ApplyConfigToAgentGroupResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveConfigFromAgentGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveConfigFromAgentGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveConfigFromAgentGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveConfigFromAgentGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    configName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveConfigFromAgentGroupRequest}
 */
proto.RemoveConfigFromAgentGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveConfigFromAgentGroupRequest;
  return proto.RemoveConfigFromAgentGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveConfigFromAgentGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveConfigFromAgentGroupRequest}
 */
proto.RemoveConfigFromAgentGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveConfigFromAgentGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemoveConfigFromAgentGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemoveConfigFromAgentGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveConfigFromAgentGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfigName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.RemoveConfigFromAgentGroupRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.RemoveConfigFromAgentGroupRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.RemoveConfigFromAgentGroupRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.RemoveConfigFromAgentGroupRequest} returns this
 */
proto.RemoveConfigFromAgentGroupRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string config_name = 2;
 * @return {string}
 */
proto.RemoveConfigFromAgentGroupRequest.prototype.getConfigName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RemoveConfigFromAgentGroupRequest} returns this
 */
proto.RemoveConfigFromAgentGroupRequest.prototype.setConfigName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string group_name = 3;
 * @return {string}
 */
proto.RemoveConfigFromAgentGroupRequest.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.RemoveConfigFromAgentGroupRequest} returns this
 */
proto.RemoveConfigFromAgentGroupRequest.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveConfigFromAgentGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveConfigFromAgentGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveConfigFromAgentGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveConfigFromAgentGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveConfigFromAgentGroupResponse}
 */
proto.RemoveConfigFromAgentGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveConfigFromAgentGroupResponse;
  return proto.RemoveConfigFromAgentGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveConfigFromAgentGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveConfigFromAgentGroupResponse}
 */
proto.RemoveConfigFromAgentGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveConfigFromAgentGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemoveConfigFromAgentGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemoveConfigFromAgentGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RemoveConfigFromAgentGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.RemoveConfigFromAgentGroupResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.RemoveConfigFromAgentGroupResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.RemoveConfigFromAgentGroupResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.RemoveConfigFromAgentGroupResponse} returns this
 */
proto.RemoveConfigFromAgentGroupResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.RemoveConfigFromAgentGroupResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.RemoveConfigFromAgentGroupResponse} returns this
*/
proto.RemoveConfigFromAgentGroupResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RemoveConfigFromAgentGroupResponse} returns this
 */
proto.RemoveConfigFromAgentGroupResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RemoveConfigFromAgentGroupResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAppliedConfigsForAgentGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAppliedConfigsForAgentGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAppliedConfigsForAgentGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAppliedConfigsForAgentGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    groupName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAppliedConfigsForAgentGroupRequest}
 */
proto.GetAppliedConfigsForAgentGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAppliedConfigsForAgentGroupRequest;
  return proto.GetAppliedConfigsForAgentGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAppliedConfigsForAgentGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAppliedConfigsForAgentGroupRequest}
 */
proto.GetAppliedConfigsForAgentGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAppliedConfigsForAgentGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAppliedConfigsForAgentGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAppliedConfigsForAgentGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAppliedConfigsForAgentGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GetAppliedConfigsForAgentGroupRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.GetAppliedConfigsForAgentGroupRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.GetAppliedConfigsForAgentGroupRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.GetAppliedConfigsForAgentGroupRequest} returns this
 */
proto.GetAppliedConfigsForAgentGroupRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string group_name = 2;
 * @return {string}
 */
proto.GetAppliedConfigsForAgentGroupRequest.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetAppliedConfigsForAgentGroupRequest} returns this
 */
proto.GetAppliedConfigsForAgentGroupRequest.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetAppliedConfigsForAgentGroupResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAppliedConfigsForAgentGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAppliedConfigsForAgentGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAppliedConfigsForAgentGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f),
    configNamesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAppliedConfigsForAgentGroupResponse}
 */
proto.GetAppliedConfigsForAgentGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAppliedConfigsForAgentGroupResponse;
  return proto.GetAppliedConfigsForAgentGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAppliedConfigsForAgentGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAppliedConfigsForAgentGroupResponse}
 */
proto.GetAppliedConfigsForAgentGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addConfigNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAppliedConfigsForAgentGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAppliedConfigsForAgentGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAppliedConfigsForAgentGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
  f = message.getConfigNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.GetAppliedConfigsForAgentGroupResponse} returns this
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.GetAppliedConfigsForAgentGroupResponse} returns this
*/
proto.GetAppliedConfigsForAgentGroupResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetAppliedConfigsForAgentGroupResponse} returns this
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string config_names = 4;
 * @return {!Array<string>}
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.getConfigNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.GetAppliedConfigsForAgentGroupResponse} returns this
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.setConfigNamesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.GetAppliedConfigsForAgentGroupResponse} returns this
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.addConfigNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GetAppliedConfigsForAgentGroupResponse} returns this
 */
proto.GetAppliedConfigsForAgentGroupResponse.prototype.clearConfigNamesList = function() {
  return this.setConfigNamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAppliedAgentGroupsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAppliedAgentGroupsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAppliedAgentGroupsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAppliedAgentGroupsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    configName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAppliedAgentGroupsRequest}
 */
proto.GetAppliedAgentGroupsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAppliedAgentGroupsRequest;
  return proto.GetAppliedAgentGroupsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAppliedAgentGroupsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAppliedAgentGroupsRequest}
 */
proto.GetAppliedAgentGroupsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAppliedAgentGroupsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAppliedAgentGroupsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAppliedAgentGroupsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAppliedAgentGroupsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfigName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GetAppliedAgentGroupsRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.GetAppliedAgentGroupsRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.GetAppliedAgentGroupsRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.GetAppliedAgentGroupsRequest} returns this
 */
proto.GetAppliedAgentGroupsRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string config_name = 2;
 * @return {string}
 */
proto.GetAppliedAgentGroupsRequest.prototype.getConfigName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetAppliedAgentGroupsRequest} returns this
 */
proto.GetAppliedAgentGroupsRequest.prototype.setConfigName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetAppliedAgentGroupsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetAppliedAgentGroupsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetAppliedAgentGroupsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetAppliedAgentGroupsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAppliedAgentGroupsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f),
    agentGroupNamesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetAppliedAgentGroupsResponse}
 */
proto.GetAppliedAgentGroupsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetAppliedAgentGroupsResponse;
  return proto.GetAppliedAgentGroupsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetAppliedAgentGroupsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetAppliedAgentGroupsResponse}
 */
proto.GetAppliedAgentGroupsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAgentGroupNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetAppliedAgentGroupsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetAppliedAgentGroupsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetAppliedAgentGroupsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetAppliedAgentGroupsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
  f = message.getAgentGroupNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GetAppliedAgentGroupsResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.GetAppliedAgentGroupsResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.GetAppliedAgentGroupsResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.GetAppliedAgentGroupsResponse} returns this
 */
proto.GetAppliedAgentGroupsResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.GetAppliedAgentGroupsResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.GetAppliedAgentGroupsResponse} returns this
*/
proto.GetAppliedAgentGroupsResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetAppliedAgentGroupsResponse} returns this
 */
proto.GetAppliedAgentGroupsResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetAppliedAgentGroupsResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string agent_group_names = 3;
 * @return {!Array<string>}
 */
proto.GetAppliedAgentGroupsResponse.prototype.getAgentGroupNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.GetAppliedAgentGroupsResponse} returns this
 */
proto.GetAppliedAgentGroupsResponse.prototype.setAgentGroupNamesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.GetAppliedAgentGroupsResponse} returns this
 */
proto.GetAppliedAgentGroupsResponse.prototype.addAgentGroupNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GetAppliedAgentGroupsResponse} returns this
 */
proto.GetAppliedAgentGroupsResponse.prototype.clearAgentGroupNamesList = function() {
  return this.setAgentGroupNamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListAgentsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ListAgentsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListAgentsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListAgentsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    groupName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListAgentsRequest}
 */
proto.ListAgentsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListAgentsRequest;
  return proto.ListAgentsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListAgentsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListAgentsRequest}
 */
proto.ListAgentsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListAgentsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListAgentsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListAgentsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListAgentsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ListAgentsRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.ListAgentsRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.ListAgentsRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ListAgentsRequest} returns this
 */
proto.ListAgentsRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string group_name = 2;
 * @return {string}
 */
proto.ListAgentsRequest.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListAgentsRequest} returns this
 */
proto.ListAgentsRequest.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ListAgentsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListAgentsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ListAgentsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListAgentsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListAgentsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && agent_pb.CommonResponse.toObject(includeInstance, f),
    agentsList: jspb.Message.toObjectList(msg.getAgentsList(),
    proto.Agent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListAgentsResponse}
 */
proto.ListAgentsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListAgentsResponse;
  return proto.ListAgentsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListAgentsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListAgentsResponse}
 */
proto.ListAgentsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new agent_pb.CommonResponse;
      reader.readMessage(value,agent_pb.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    case 3:
      var value = new proto.Agent;
      reader.readMessage(value,proto.Agent.deserializeBinaryFromReader);
      msg.addAgents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListAgentsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListAgentsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListAgentsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListAgentsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      agent_pb.CommonResponse.serializeBinaryToWriter
    );
  }
  f = message.getAgentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Agent.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ListAgentsResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.ListAgentsResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.ListAgentsResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ListAgentsResponse} returns this
 */
proto.ListAgentsResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.ListAgentsResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, agent_pb.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.ListAgentsResponse} returns this
*/
proto.ListAgentsResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ListAgentsResponse} returns this
 */
proto.ListAgentsResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ListAgentsResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Agent agents = 3;
 * @return {!Array<!proto.Agent>}
 */
proto.ListAgentsResponse.prototype.getAgentsList = function() {
  return /** @type{!Array<!proto.Agent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Agent, 3));
};


/**
 * @param {!Array<!proto.Agent>} value
 * @return {!proto.ListAgentsResponse} returns this
*/
proto.ListAgentsResponse.prototype.setAgentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Agent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Agent}
 */
proto.ListAgentsResponse.prototype.addAgents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Agent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ListAgentsResponse} returns this
 */
proto.ListAgentsResponse.prototype.clearAgentsList = function() {
  return this.setAgentsList([]);
};


goog.object.extend(exports, proto);
