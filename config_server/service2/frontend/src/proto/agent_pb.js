// source: agent.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.AgentAttributes', null, global);
goog.exportSymbol('proto.AgentCapabilities', null, global);
goog.exportSymbol('proto.AgentGroupTag', null, global);
goog.exportSymbol('proto.CommandDetail', null, global);
goog.exportSymbol('proto.CommandInfo', null, global);
goog.exportSymbol('proto.CommonResponse', null, global);
goog.exportSymbol('proto.ConfigDetail', null, global);
goog.exportSymbol('proto.ConfigInfo', null, global);
goog.exportSymbol('proto.ConfigStatus', null, global);
goog.exportSymbol('proto.FetchConfigRequest', null, global);
goog.exportSymbol('proto.FetchConfigResponse', null, global);
goog.exportSymbol('proto.HeartbeatRequest', null, global);
goog.exportSymbol('proto.HeartbeatResponse', null, global);
goog.exportSymbol('proto.RequestFlags', null, global);
goog.exportSymbol('proto.ResponseFlags', null, global);
goog.exportSymbol('proto.ServerCapabilities', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AgentGroupTag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AgentGroupTag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AgentGroupTag.displayName = 'proto.AgentGroupTag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigInfo.displayName = 'proto.ConfigInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CommandInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CommandInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CommandInfo.displayName = 'proto.CommandInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AgentAttributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AgentAttributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AgentAttributes.displayName = 'proto.AgentAttributes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HeartbeatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.HeartbeatRequest.repeatedFields_, null);
};
goog.inherits(proto.HeartbeatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HeartbeatRequest.displayName = 'proto.HeartbeatRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigDetail.displayName = 'proto.ConfigDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CommandDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CommandDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CommandDetail.displayName = 'proto.CommandDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HeartbeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.HeartbeatResponse.repeatedFields_, null);
};
goog.inherits(proto.HeartbeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HeartbeatResponse.displayName = 'proto.HeartbeatResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FetchConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FetchConfigRequest.repeatedFields_, null);
};
goog.inherits(proto.FetchConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FetchConfigRequest.displayName = 'proto.FetchConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FetchConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FetchConfigResponse.repeatedFields_, null);
};
goog.inherits(proto.FetchConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FetchConfigResponse.displayName = 'proto.FetchConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CommonResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CommonResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CommonResponse.displayName = 'proto.CommonResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AgentGroupTag.prototype.toObject = function(opt_includeInstance) {
  return proto.AgentGroupTag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AgentGroupTag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AgentGroupTag.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AgentGroupTag}
 */
proto.AgentGroupTag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AgentGroupTag;
  return proto.AgentGroupTag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AgentGroupTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AgentGroupTag}
 */
proto.AgentGroupTag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AgentGroupTag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AgentGroupTag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AgentGroupTag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AgentGroupTag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.AgentGroupTag.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AgentGroupTag} returns this
 */
proto.AgentGroupTag.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.AgentGroupTag.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AgentGroupTag} returns this
 */
proto.AgentGroupTag.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigInfo}
 */
proto.ConfigInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigInfo;
  return proto.ConfigInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigInfo}
 */
proto.ConfigInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.ConfigStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ConfigInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigInfo} returns this
 */
proto.ConfigInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 version = 2;
 * @return {number}
 */
proto.ConfigInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ConfigInfo} returns this
 */
proto.ConfigInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ConfigStatus status = 3;
 * @return {!proto.ConfigStatus}
 */
proto.ConfigInfo.prototype.getStatus = function() {
  return /** @type {!proto.ConfigStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ConfigStatus} value
 * @return {!proto.ConfigInfo} returns this
 */
proto.ConfigInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.ConfigInfo.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigInfo} returns this
 */
proto.ConfigInfo.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CommandInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.CommandInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CommandInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommandInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CommandInfo}
 */
proto.CommandInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CommandInfo;
  return proto.CommandInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CommandInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CommandInfo}
 */
proto.CommandInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.ConfigStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CommandInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CommandInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CommandInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommandInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.CommandInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CommandInfo} returns this
 */
proto.CommandInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.CommandInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CommandInfo} returns this
 */
proto.CommandInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ConfigStatus status = 3;
 * @return {!proto.ConfigStatus}
 */
proto.CommandInfo.prototype.getStatus = function() {
  return /** @type {!proto.ConfigStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ConfigStatus} value
 * @return {!proto.CommandInfo} returns this
 */
proto.CommandInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.CommandInfo.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.CommandInfo} returns this
 */
proto.CommandInfo.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AgentAttributes.prototype.toObject = function(opt_includeInstance) {
  return proto.AgentAttributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AgentAttributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AgentAttributes.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: msg.getVersion_asB64(),
    ip: msg.getIp_asB64(),
    hostname: msg.getHostname_asB64(),
    extrasMap: (f = msg.getExtrasMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AgentAttributes}
 */
proto.AgentAttributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AgentAttributes;
  return proto.AgentAttributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AgentAttributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AgentAttributes}
 */
proto.AgentAttributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHostname(value);
      break;
    case 100:
      var value = msg.getExtrasMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AgentAttributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AgentAttributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AgentAttributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AgentAttributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getHostname_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getExtrasMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(100, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
};


/**
 * optional bytes version = 1;
 * @return {!(string|Uint8Array)}
 */
proto.AgentAttributes.prototype.getVersion = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes version = 1;
 * This is a type-conversion wrapper around `getVersion()`
 * @return {string}
 */
proto.AgentAttributes.prototype.getVersion_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVersion()));
};


/**
 * optional bytes version = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVersion()`
 * @return {!Uint8Array}
 */
proto.AgentAttributes.prototype.getVersion_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVersion()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AgentAttributes} returns this
 */
proto.AgentAttributes.prototype.setVersion = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes ip = 2;
 * @return {!(string|Uint8Array)}
 */
proto.AgentAttributes.prototype.getIp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ip = 2;
 * This is a type-conversion wrapper around `getIp()`
 * @return {string}
 */
proto.AgentAttributes.prototype.getIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIp()));
};


/**
 * optional bytes ip = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIp()`
 * @return {!Uint8Array}
 */
proto.AgentAttributes.prototype.getIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AgentAttributes} returns this
 */
proto.AgentAttributes.prototype.setIp = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes hostname = 3;
 * @return {!(string|Uint8Array)}
 */
proto.AgentAttributes.prototype.getHostname = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes hostname = 3;
 * This is a type-conversion wrapper around `getHostname()`
 * @return {string}
 */
proto.AgentAttributes.prototype.getHostname_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHostname()));
};


/**
 * optional bytes hostname = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHostname()`
 * @return {!Uint8Array}
 */
proto.AgentAttributes.prototype.getHostname_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHostname()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AgentAttributes} returns this
 */
proto.AgentAttributes.prototype.setHostname = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * map<string, bytes> extras = 100;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.AgentAttributes.prototype.getExtrasMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 100, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.AgentAttributes} returns this
 */
proto.AgentAttributes.prototype.clearExtrasMap = function() {
  this.getExtrasMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.HeartbeatRequest.repeatedFields_ = [7,10,11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HeartbeatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.HeartbeatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HeartbeatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartbeatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    sequenceNum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    capabilities: jspb.Message.getFieldWithDefault(msg, 3, 0),
    instanceId: msg.getInstanceId_asB64(),
    agentType: jspb.Message.getFieldWithDefault(msg, 5, ""),
    attributes: (f = msg.getAttributes()) && proto.AgentAttributes.toObject(includeInstance, f),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.AgentGroupTag.toObject, includeInstance),
    runningStatus: jspb.Message.getFieldWithDefault(msg, 8, ""),
    startupTime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    pipelineConfigsList: jspb.Message.toObjectList(msg.getPipelineConfigsList(),
    proto.ConfigInfo.toObject, includeInstance),
    instanceConfigsList: jspb.Message.toObjectList(msg.getInstanceConfigsList(),
    proto.ConfigInfo.toObject, includeInstance),
    customCommandsList: jspb.Message.toObjectList(msg.getCustomCommandsList(),
    proto.CommandInfo.toObject, includeInstance),
    flags: jspb.Message.getFieldWithDefault(msg, 13, 0),
    opaque: msg.getOpaque_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HeartbeatRequest}
 */
proto.HeartbeatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HeartbeatRequest;
  return proto.HeartbeatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HeartbeatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HeartbeatRequest}
 */
proto.HeartbeatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequenceNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCapabilities(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInstanceId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentType(value);
      break;
    case 6:
      var value = new proto.AgentAttributes;
      reader.readMessage(value,proto.AgentAttributes.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    case 7:
      var value = new proto.AgentGroupTag;
      reader.readMessage(value,proto.AgentGroupTag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRunningStatus(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartupTime(value);
      break;
    case 10:
      var value = new proto.ConfigInfo;
      reader.readMessage(value,proto.ConfigInfo.deserializeBinaryFromReader);
      msg.addPipelineConfigs(value);
      break;
    case 11:
      var value = new proto.ConfigInfo;
      reader.readMessage(value,proto.ConfigInfo.deserializeBinaryFromReader);
      msg.addInstanceConfigs(value);
      break;
    case 12:
      var value = new proto.CommandInfo;
      reader.readMessage(value,proto.CommandInfo.deserializeBinaryFromReader);
      msg.addCustomCommands(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFlags(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HeartbeatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HeartbeatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HeartbeatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartbeatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSequenceNum();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCapabilities();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getInstanceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAgentType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.AgentAttributes.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.AgentGroupTag.serializeBinaryToWriter
    );
  }
  f = message.getRunningStatus();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStartupTime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getPipelineConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ConfigInfo.serializeBinaryToWriter
    );
  }
  f = message.getInstanceConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.ConfigInfo.serializeBinaryToWriter
    );
  }
  f = message.getCustomCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.CommandInfo.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getOpaque_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.HeartbeatRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.HeartbeatRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.HeartbeatRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 sequence_num = 2;
 * @return {number}
 */
proto.HeartbeatRequest.prototype.getSequenceNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.setSequenceNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 capabilities = 3;
 * @return {number}
 */
proto.HeartbeatRequest.prototype.getCapabilities = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.setCapabilities = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes instance_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.HeartbeatRequest.prototype.getInstanceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes instance_id = 4;
 * This is a type-conversion wrapper around `getInstanceId()`
 * @return {string}
 */
proto.HeartbeatRequest.prototype.getInstanceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInstanceId()));
};


/**
 * optional bytes instance_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstanceId()`
 * @return {!Uint8Array}
 */
proto.HeartbeatRequest.prototype.getInstanceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInstanceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.setInstanceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string agent_type = 5;
 * @return {string}
 */
proto.HeartbeatRequest.prototype.getAgentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.setAgentType = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional AgentAttributes attributes = 6;
 * @return {?proto.AgentAttributes}
 */
proto.HeartbeatRequest.prototype.getAttributes = function() {
  return /** @type{?proto.AgentAttributes} */ (
    jspb.Message.getWrapperField(this, proto.AgentAttributes, 6));
};


/**
 * @param {?proto.AgentAttributes|undefined} value
 * @return {!proto.HeartbeatRequest} returns this
*/
proto.HeartbeatRequest.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HeartbeatRequest.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated AgentGroupTag tags = 7;
 * @return {!Array<!proto.AgentGroupTag>}
 */
proto.HeartbeatRequest.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.AgentGroupTag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AgentGroupTag, 7));
};


/**
 * @param {!Array<!proto.AgentGroupTag>} value
 * @return {!proto.HeartbeatRequest} returns this
*/
proto.HeartbeatRequest.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.AgentGroupTag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AgentGroupTag}
 */
proto.HeartbeatRequest.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.AgentGroupTag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional string running_status = 8;
 * @return {string}
 */
proto.HeartbeatRequest.prototype.getRunningStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.setRunningStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 startup_time = 9;
 * @return {number}
 */
proto.HeartbeatRequest.prototype.getStartupTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.setStartupTime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated ConfigInfo pipeline_configs = 10;
 * @return {!Array<!proto.ConfigInfo>}
 */
proto.HeartbeatRequest.prototype.getPipelineConfigsList = function() {
  return /** @type{!Array<!proto.ConfigInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConfigInfo, 10));
};


/**
 * @param {!Array<!proto.ConfigInfo>} value
 * @return {!proto.HeartbeatRequest} returns this
*/
proto.HeartbeatRequest.prototype.setPipelineConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ConfigInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConfigInfo}
 */
proto.HeartbeatRequest.prototype.addPipelineConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ConfigInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.clearPipelineConfigsList = function() {
  return this.setPipelineConfigsList([]);
};


/**
 * repeated ConfigInfo instance_configs = 11;
 * @return {!Array<!proto.ConfigInfo>}
 */
proto.HeartbeatRequest.prototype.getInstanceConfigsList = function() {
  return /** @type{!Array<!proto.ConfigInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConfigInfo, 11));
};


/**
 * @param {!Array<!proto.ConfigInfo>} value
 * @return {!proto.HeartbeatRequest} returns this
*/
proto.HeartbeatRequest.prototype.setInstanceConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.ConfigInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConfigInfo}
 */
proto.HeartbeatRequest.prototype.addInstanceConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.ConfigInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.clearInstanceConfigsList = function() {
  return this.setInstanceConfigsList([]);
};


/**
 * repeated CommandInfo custom_commands = 12;
 * @return {!Array<!proto.CommandInfo>}
 */
proto.HeartbeatRequest.prototype.getCustomCommandsList = function() {
  return /** @type{!Array<!proto.CommandInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CommandInfo, 12));
};


/**
 * @param {!Array<!proto.CommandInfo>} value
 * @return {!proto.HeartbeatRequest} returns this
*/
proto.HeartbeatRequest.prototype.setCustomCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.CommandInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CommandInfo}
 */
proto.HeartbeatRequest.prototype.addCustomCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.CommandInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.clearCustomCommandsList = function() {
  return this.setCustomCommandsList([]);
};


/**
 * optional uint64 flags = 13;
 * @return {number}
 */
proto.HeartbeatRequest.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional bytes opaque = 14;
 * @return {!(string|Uint8Array)}
 */
proto.HeartbeatRequest.prototype.getOpaque = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes opaque = 14;
 * This is a type-conversion wrapper around `getOpaque()`
 * @return {string}
 */
proto.HeartbeatRequest.prototype.getOpaque_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaque()));
};


/**
 * optional bytes opaque = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaque()`
 * @return {!Uint8Array}
 */
proto.HeartbeatRequest.prototype.getOpaque_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaque()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HeartbeatRequest} returns this
 */
proto.HeartbeatRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    detail: msg.getDetail_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigDetail}
 */
proto.ConfigDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigDetail;
  return proto.ConfigDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigDetail}
 */
proto.ConfigDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDetail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDetail_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ConfigDetail.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConfigDetail} returns this
 */
proto.ConfigDetail.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 version = 2;
 * @return {number}
 */
proto.ConfigDetail.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ConfigDetail} returns this
 */
proto.ConfigDetail.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes detail = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ConfigDetail.prototype.getDetail = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes detail = 3;
 * This is a type-conversion wrapper around `getDetail()`
 * @return {string}
 */
proto.ConfigDetail.prototype.getDetail_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDetail()));
};


/**
 * optional bytes detail = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDetail()`
 * @return {!Uint8Array}
 */
proto.ConfigDetail.prototype.getDetail_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDetail()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ConfigDetail} returns this
 */
proto.ConfigDetail.prototype.setDetail = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CommandDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.CommandDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CommandDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommandDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    detail: msg.getDetail_asB64(),
    expireTime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CommandDetail}
 */
proto.CommandDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CommandDetail;
  return proto.CommandDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CommandDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CommandDetail}
 */
proto.CommandDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDetail(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpireTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CommandDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CommandDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CommandDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommandDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetail_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getExpireTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.CommandDetail.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CommandDetail} returns this
 */
proto.CommandDetail.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.CommandDetail.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CommandDetail} returns this
 */
proto.CommandDetail.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes detail = 3;
 * @return {!(string|Uint8Array)}
 */
proto.CommandDetail.prototype.getDetail = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes detail = 3;
 * This is a type-conversion wrapper around `getDetail()`
 * @return {string}
 */
proto.CommandDetail.prototype.getDetail_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDetail()));
};


/**
 * optional bytes detail = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDetail()`
 * @return {!Uint8Array}
 */
proto.CommandDetail.prototype.getDetail_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDetail()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CommandDetail} returns this
 */
proto.CommandDetail.prototype.setDetail = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int64 expire_time = 4;
 * @return {number}
 */
proto.CommandDetail.prototype.getExpireTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.CommandDetail} returns this
 */
proto.CommandDetail.prototype.setExpireTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.HeartbeatResponse.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HeartbeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.HeartbeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HeartbeatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartbeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && proto.CommonResponse.toObject(includeInstance, f),
    capabilities: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pipelineConfigUpdatesList: jspb.Message.toObjectList(msg.getPipelineConfigUpdatesList(),
    proto.ConfigDetail.toObject, includeInstance),
    instanceConfigUpdatesList: jspb.Message.toObjectList(msg.getInstanceConfigUpdatesList(),
    proto.ConfigDetail.toObject, includeInstance),
    customCommandUpdatesList: jspb.Message.toObjectList(msg.getCustomCommandUpdatesList(),
    proto.CommandDetail.toObject, includeInstance),
    flags: jspb.Message.getFieldWithDefault(msg, 7, 0),
    opaque: msg.getOpaque_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HeartbeatResponse}
 */
proto.HeartbeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HeartbeatResponse;
  return proto.HeartbeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HeartbeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HeartbeatResponse}
 */
proto.HeartbeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.CommonResponse;
      reader.readMessage(value,proto.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCapabilities(value);
      break;
    case 4:
      var value = new proto.ConfigDetail;
      reader.readMessage(value,proto.ConfigDetail.deserializeBinaryFromReader);
      msg.addPipelineConfigUpdates(value);
      break;
    case 5:
      var value = new proto.ConfigDetail;
      reader.readMessage(value,proto.ConfigDetail.deserializeBinaryFromReader);
      msg.addInstanceConfigUpdates(value);
      break;
    case 6:
      var value = new proto.CommandDetail;
      reader.readMessage(value,proto.CommandDetail.deserializeBinaryFromReader);
      msg.addCustomCommandUpdates(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFlags(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOpaque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HeartbeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HeartbeatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HeartbeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartbeatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CommonResponse.serializeBinaryToWriter
    );
  }
  f = message.getCapabilities();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPipelineConfigUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ConfigDetail.serializeBinaryToWriter
    );
  }
  f = message.getInstanceConfigUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ConfigDetail.serializeBinaryToWriter
    );
  }
  f = message.getCustomCommandUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.CommandDetail.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getOpaque_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.HeartbeatResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.HeartbeatResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.HeartbeatResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HeartbeatResponse} returns this
 */
proto.HeartbeatResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.HeartbeatResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, proto.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.HeartbeatResponse} returns this
*/
proto.HeartbeatResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.HeartbeatResponse} returns this
 */
proto.HeartbeatResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HeartbeatResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 capabilities = 3;
 * @return {number}
 */
proto.HeartbeatResponse.prototype.getCapabilities = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartbeatResponse} returns this
 */
proto.HeartbeatResponse.prototype.setCapabilities = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated ConfigDetail pipeline_config_updates = 4;
 * @return {!Array<!proto.ConfigDetail>}
 */
proto.HeartbeatResponse.prototype.getPipelineConfigUpdatesList = function() {
  return /** @type{!Array<!proto.ConfigDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConfigDetail, 4));
};


/**
 * @param {!Array<!proto.ConfigDetail>} value
 * @return {!proto.HeartbeatResponse} returns this
*/
proto.HeartbeatResponse.prototype.setPipelineConfigUpdatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ConfigDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConfigDetail}
 */
proto.HeartbeatResponse.prototype.addPipelineConfigUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ConfigDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HeartbeatResponse} returns this
 */
proto.HeartbeatResponse.prototype.clearPipelineConfigUpdatesList = function() {
  return this.setPipelineConfigUpdatesList([]);
};


/**
 * repeated ConfigDetail instance_config_updates = 5;
 * @return {!Array<!proto.ConfigDetail>}
 */
proto.HeartbeatResponse.prototype.getInstanceConfigUpdatesList = function() {
  return /** @type{!Array<!proto.ConfigDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConfigDetail, 5));
};


/**
 * @param {!Array<!proto.ConfigDetail>} value
 * @return {!proto.HeartbeatResponse} returns this
*/
proto.HeartbeatResponse.prototype.setInstanceConfigUpdatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ConfigDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConfigDetail}
 */
proto.HeartbeatResponse.prototype.addInstanceConfigUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ConfigDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HeartbeatResponse} returns this
 */
proto.HeartbeatResponse.prototype.clearInstanceConfigUpdatesList = function() {
  return this.setInstanceConfigUpdatesList([]);
};


/**
 * repeated CommandDetail custom_command_updates = 6;
 * @return {!Array<!proto.CommandDetail>}
 */
proto.HeartbeatResponse.prototype.getCustomCommandUpdatesList = function() {
  return /** @type{!Array<!proto.CommandDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CommandDetail, 6));
};


/**
 * @param {!Array<!proto.CommandDetail>} value
 * @return {!proto.HeartbeatResponse} returns this
*/
proto.HeartbeatResponse.prototype.setCustomCommandUpdatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.CommandDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CommandDetail}
 */
proto.HeartbeatResponse.prototype.addCustomCommandUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.CommandDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HeartbeatResponse} returns this
 */
proto.HeartbeatResponse.prototype.clearCustomCommandUpdatesList = function() {
  return this.setCustomCommandUpdatesList([]);
};


/**
 * optional uint64 flags = 7;
 * @return {number}
 */
proto.HeartbeatResponse.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartbeatResponse} returns this
 */
proto.HeartbeatResponse.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes opaque = 8;
 * @return {!(string|Uint8Array)}
 */
proto.HeartbeatResponse.prototype.getOpaque = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes opaque = 8;
 * This is a type-conversion wrapper around `getOpaque()`
 * @return {string}
 */
proto.HeartbeatResponse.prototype.getOpaque_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOpaque()));
};


/**
 * optional bytes opaque = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOpaque()`
 * @return {!Uint8Array}
 */
proto.HeartbeatResponse.prototype.getOpaque_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOpaque()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.HeartbeatResponse} returns this
 */
proto.HeartbeatResponse.prototype.setOpaque = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FetchConfigRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FetchConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FetchConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FetchConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FetchConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    instanceId: msg.getInstanceId_asB64(),
    reqConfigsList: jspb.Message.toObjectList(msg.getReqConfigsList(),
    proto.ConfigInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FetchConfigRequest}
 */
proto.FetchConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FetchConfigRequest;
  return proto.FetchConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FetchConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FetchConfigRequest}
 */
proto.FetchConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInstanceId(value);
      break;
    case 3:
      var value = new proto.ConfigInfo;
      reader.readMessage(value,proto.ConfigInfo.deserializeBinaryFromReader);
      msg.addReqConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FetchConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FetchConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FetchConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FetchConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getInstanceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getReqConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ConfigInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.FetchConfigRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.FetchConfigRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.FetchConfigRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.FetchConfigRequest} returns this
 */
proto.FetchConfigRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes instance_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.FetchConfigRequest.prototype.getInstanceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes instance_id = 2;
 * This is a type-conversion wrapper around `getInstanceId()`
 * @return {string}
 */
proto.FetchConfigRequest.prototype.getInstanceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInstanceId()));
};


/**
 * optional bytes instance_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstanceId()`
 * @return {!Uint8Array}
 */
proto.FetchConfigRequest.prototype.getInstanceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInstanceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.FetchConfigRequest} returns this
 */
proto.FetchConfigRequest.prototype.setInstanceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated ConfigInfo req_configs = 3;
 * @return {!Array<!proto.ConfigInfo>}
 */
proto.FetchConfigRequest.prototype.getReqConfigsList = function() {
  return /** @type{!Array<!proto.ConfigInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConfigInfo, 3));
};


/**
 * @param {!Array<!proto.ConfigInfo>} value
 * @return {!proto.FetchConfigRequest} returns this
*/
proto.FetchConfigRequest.prototype.setReqConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ConfigInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConfigInfo}
 */
proto.FetchConfigRequest.prototype.addReqConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ConfigInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FetchConfigRequest} returns this
 */
proto.FetchConfigRequest.prototype.clearReqConfigsList = function() {
  return this.setReqConfigsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FetchConfigResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FetchConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FetchConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FetchConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FetchConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    commonresponse: (f = msg.getCommonresponse()) && proto.CommonResponse.toObject(includeInstance, f),
    configDetailsList: jspb.Message.toObjectList(msg.getConfigDetailsList(),
    proto.ConfigDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FetchConfigResponse}
 */
proto.FetchConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FetchConfigResponse;
  return proto.FetchConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FetchConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FetchConfigResponse}
 */
proto.FetchConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.CommonResponse;
      reader.readMessage(value,proto.CommonResponse.deserializeBinaryFromReader);
      msg.setCommonresponse(value);
      break;
    case 3:
      var value = new proto.ConfigDetail;
      reader.readMessage(value,proto.ConfigDetail.deserializeBinaryFromReader);
      msg.addConfigDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FetchConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FetchConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FetchConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FetchConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CommonResponse.serializeBinaryToWriter
    );
  }
  f = message.getConfigDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ConfigDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.FetchConfigResponse.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.FetchConfigResponse.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.FetchConfigResponse.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.FetchConfigResponse} returns this
 */
proto.FetchConfigResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CommonResponse commonResponse = 2;
 * @return {?proto.CommonResponse}
 */
proto.FetchConfigResponse.prototype.getCommonresponse = function() {
  return /** @type{?proto.CommonResponse} */ (
    jspb.Message.getWrapperField(this, proto.CommonResponse, 2));
};


/**
 * @param {?proto.CommonResponse|undefined} value
 * @return {!proto.FetchConfigResponse} returns this
*/
proto.FetchConfigResponse.prototype.setCommonresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FetchConfigResponse} returns this
 */
proto.FetchConfigResponse.prototype.clearCommonresponse = function() {
  return this.setCommonresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FetchConfigResponse.prototype.hasCommonresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ConfigDetail config_details = 3;
 * @return {!Array<!proto.ConfigDetail>}
 */
proto.FetchConfigResponse.prototype.getConfigDetailsList = function() {
  return /** @type{!Array<!proto.ConfigDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConfigDetail, 3));
};


/**
 * @param {!Array<!proto.ConfigDetail>} value
 * @return {!proto.FetchConfigResponse} returns this
*/
proto.FetchConfigResponse.prototype.setConfigDetailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ConfigDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConfigDetail}
 */
proto.FetchConfigResponse.prototype.addConfigDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ConfigDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FetchConfigResponse} returns this
 */
proto.FetchConfigResponse.prototype.clearConfigDetailsList = function() {
  return this.setConfigDetailsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CommonResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CommonResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CommonResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommonResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errormessage: msg.getErrormessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CommonResponse}
 */
proto.CommonResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CommonResponse;
  return proto.CommonResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CommonResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CommonResponse}
 */
proto.CommonResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CommonResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CommonResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CommonResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommonResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrormessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.CommonResponse.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CommonResponse} returns this
 */
proto.CommonResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes errorMessage = 2;
 * @return {!(string|Uint8Array)}
 */
proto.CommonResponse.prototype.getErrormessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes errorMessage = 2;
 * This is a type-conversion wrapper around `getErrormessage()`
 * @return {string}
 */
proto.CommonResponse.prototype.getErrormessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErrormessage()));
};


/**
 * optional bytes errorMessage = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErrormessage()`
 * @return {!Uint8Array}
 */
proto.CommonResponse.prototype.getErrormessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErrormessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CommonResponse} returns this
 */
proto.CommonResponse.prototype.setErrormessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.ConfigStatus = {
  UNSET: 0,
  APPLYING: 1,
  APPLIED: 2,
  FAILED: 3
};

/**
 * @enum {number}
 */
proto.AgentCapabilities = {
  UNSPECIFIEDAGENTCAPABILITY: 0,
  ACCEPTSPIPELINECONFIG: 1,
  ACCEPTSINSTANCECONFIG: 2,
  ACCEPTSCUSTOMCOMMAND: 4
};

/**
 * @enum {number}
 */
proto.RequestFlags = {
  REQUESTFLAGSUNSPECIFIED: 0,
  FULLSTATE: 1
};

/**
 * @enum {number}
 */
proto.ServerCapabilities = {
  UNSPECIFIEDSERVERCAPABILITY: 0,
  REMBERSATTRIBUTE: 1,
  REMBERSPIPELINECONFIGSTATUS: 2,
  REMBERSINSTANCECONFIGSTATUS: 4,
  REMBERSCUSTOMCOMMANDSTATUS: 8
};

/**
 * @enum {number}
 */
proto.ResponseFlags = {
  RESPONSEFLAGSUNSPECIFIED: 0,
  REPORTFULLSTATE: 1,
  FETCHPIPELINECONFIGDETAIL: 2,
  FETCHINSTANCECONFIGDETAIL: 4
};

goog.object.extend(exports, proto);
