package sls_inner

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// OpenAcceleration invokes the sls_inner.OpenAcceleration API synchronously
// api document: https://help.aliyun.com/api/sls-inner/openacceleration.html
func (client *Client) OpenAcceleration(request *OpenAccelerationRequest) (response *OpenAccelerationResponse, err error) {
	response = CreateOpenAccelerationResponse()
	err = client.DoAction(request, response)
	return
}

// OpenAccelerationWithChan invokes the sls_inner.OpenAcceleration API asynchronously
// api document: https://help.aliyun.com/api/sls-inner/openacceleration.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) OpenAccelerationWithChan(request *OpenAccelerationRequest) (<-chan *OpenAccelerationResponse, <-chan error) {
	responseChan := make(chan *OpenAccelerationResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.OpenAcceleration(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// OpenAccelerationWithCallback invokes the sls_inner.OpenAcceleration API asynchronously
// api document: https://help.aliyun.com/api/sls-inner/openacceleration.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) OpenAccelerationWithCallback(request *OpenAccelerationRequest, callback func(response *OpenAccelerationResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *OpenAccelerationResponse
		var err error
		defer close(result)
		response, err = client.OpenAcceleration(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// OpenAccelerationRequest is the request struct for api OpenAcceleration
type OpenAccelerationRequest struct {
	*requests.RpcRequest
	Cname                string `position:"Query" name:"Cname"`
	Project              string `position:"Query" name:"Project"`
	AccelerationEndpoint string `position:"Query" name:"AccelerationEndpoint"`
}

// OpenAccelerationResponse is the response struct for api OpenAcceleration
type OpenAccelerationResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Code      string `json:"Code" xml:"Code"`
	Success   string `json:"Success" xml:"Success"`
	Message   string `json:"Message" xml:"Message"`
}

// CreateOpenAccelerationRequest creates a request to invoke OpenAcceleration API
func CreateOpenAccelerationRequest() (request *OpenAccelerationRequest) {
	request = &OpenAccelerationRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Sls-inner", "2018-05-09", "OpenAcceleration", "", "")
	return
}

// CreateOpenAccelerationResponse creates a response to parse from OpenAcceleration response
func CreateOpenAccelerationResponse() (response *OpenAccelerationResponse) {
	response = &OpenAccelerationResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
