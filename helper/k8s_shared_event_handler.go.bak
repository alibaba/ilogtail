// +build k8s

package helper

import (
	"github.com/alibaba/ilogtail/logger"
	"sync"

	api_v1 "k8s.io/client-go/pkg/api/v1"
)

type K8SSharedEvent struct {
	Type     string
	OldEvent *api_v1.Event
	NewEvent *api_v1.Event
}

type K8SSharedEventHandler struct {
	lock       sync.Mutex
	eventQueue chan *K8SSharedEvent
}

func (handler *K8SSharedEventHandler) RegisterListener(eventQueue chan *K8SSharedEvent) {
	handler.lock.Lock()
	defer handler.lock.Unlock()
	handler.eventQueue = eventQueue
}

func (handler *K8SSharedEventHandler) UnRegisterListener(queue chan *K8SSharedEvent) {
	handler.lock.Lock()
	defer handler.lock.Unlock()
	handler.eventQueue = nil
}

func (handler *K8SSharedEventHandler) OnAdd(e *api_v1.Event) {
	logger.Debug("add event", *e)
	handler.lock.Lock()
	if handler.eventQueue != nil {
		handler.eventQueue <- &K8SSharedEvent{
			Type:     "add",
			OldEvent: nil,
			NewEvent: e,
		}
	}
	handler.lock.Unlock()
}

func (handler *K8SSharedEventHandler) OnUpdate(oldEvent *api_v1.Event, newEvent *api_v1.Event) {
	logger.Debug("update event", oldEvent, "new", *newEvent)
	handler.lock.Lock()
	if handler.eventQueue != nil {
		handler.eventQueue <- &K8SSharedEvent{
			Type:     "update",
			OldEvent: oldEvent,
			NewEvent: newEvent,
		}
	}
	handler.lock.Unlock()
}

func (handler *K8SSharedEventHandler) OnDelete(e *api_v1.Event) {
	logger.Debug("delete event", *e)
	handler.lock.Lock()
	if handler.eventQueue != nil {
		handler.eventQueue <- &K8SSharedEvent{
			Type:     "delete",
			OldEvent: nil,
			NewEvent: e,
		}
	}
	handler.lock.Unlock()
}
func (handler *K8SSharedEventHandler) OnList(eventList *api_v1.EventList) {
	logger.Debug("list event", *eventList)
	return
}
