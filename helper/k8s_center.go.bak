// +build k8s

package helper

import (
	"fmt"
	"sync"
	"time"

	"github.com/alibaba/ilogtail/logger"

	"github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers"
	"github.com/GoogleCloudPlatform/k8s-stackdriver/event-exporter/watchers/events"
	"k8s.io/client-go/kubernetes"
	api_v1 "k8s.io/client-go/pkg/api/v1"
	"k8s.io/client-go/rest"
)

var onceK8S sync.Once

// K8SEventHandler ...
type K8SEventHandler interface {
	events.EventHandler
	OnList(*api_v1.EventList)
}

// K8SCenter a wrapper to ops k8s
type K8SCenter struct {
	Client kubernetes.Interface

	onceWatcher        sync.Once
	SharedEventHandler *K8SSharedEventHandler
	watcher            watchers.Watcher
	watcherStopCh      <-chan struct{}
}

var k8SCenterInstance *K8SCenter

func newKubernetesClient() (kubernetes.Interface, error) {
	var cfg *rest.Config
	var err error
	cfg, err = rest.InClusterConfig()
	if err != nil {
		return nil, fmt.Errorf("failed to create in-cluster config: %v", err)
	}
	return kubernetes.NewForConfig(cfg)
}

func (k8sc *K8SCenter) CreateWatcher() {
	k8sc.onceWatcher.Do(func() {
		if k8sc.watcher != nil || k8sc.Client == nil {
			return
		}
		k8sc.SharedEventHandler = &K8SSharedEventHandler{}
		k8sc.watcher = events.NewEventWatcher(k8sc.Client, &events.EventWatcherConfig{
			OnList:       k8sc.SharedEventHandler.OnList,
			ResyncPeriod: time.Duration(0),
			Handler:      k8sc.SharedEventHandler,
		})
		k8sc.watcherStopCh = make(chan struct{})
		// never stop
		go k8sc.watcher.Run(k8sc.watcherStopCh)
	})

}

// GetK8SCenterInstance get a K8SCenter instance
func GetK8SCenterInstance() *K8SCenter {
	onceK8S.Do(func() {
		k8SCenterInstance = &K8SCenter{}
		var err error
		k8SCenterInstance.Client, err = newKubernetesClient()
		if err != nil {
			logger.Error("INIT_K8S_CENTER_ALARM", "init k8s client error", err)
		} else {
			logger.Info("init k8s client", "success")
		}
	})
	return k8SCenterInstance
}
