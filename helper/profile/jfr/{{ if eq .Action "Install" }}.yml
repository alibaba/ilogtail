{{ if eq .Action "Install" }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alibaba-log-configuration
  namespace: {{.Namespace}}
data:
    {{ if .SlsProjectName }}
    {{ if (and (ne .SlsProjectName "") (ne .SlsProjectName "None"))}}
    log-project: "{{.SlsProjectName}}"
    {{ else }}
    log-project: "k8s-log-{{.ClusterID}}"
    {{ end }}
    {{ else }}
    log-project: "k8s-log-{{.ClusterID}}"
    {{ end }}
    {{ if .IsFinance }}
    {{ if (and (eq .IsFinance "true") (eq .Region "cn-hangzhou")) }}
    log-endpoint: "{{.Region}}-finance-intranet.log.aliyuncs.com"
    {{ end }}
    {{ if (and (eq .IsFinance "true") (eq .Region "cn-shenzhen-finance-1")) }}
    log-endpoint: "cn-shenzhen-finance-intranet.log.aliyuncs.com"
    {{ end }}
    {{ if (and (eq .IsFinance "true") (eq .Region "cn-shanghai-finance-1")) }}
    log-endpoint: "{{.Region}}-intranet.log.aliyuncs.com"
    {{ end }}
    {{ if (and (eq .IsFinance "true") (eq .Region "cn-beijing-finance-1")) }}
    log-endpoint: "{{.Region}}-intranet.log.aliyuncs.com"
    {{ end }}
    {{ else }}
    log-endpoint: "{{.Region}}-intranet.log.aliyuncs.com"
    {{ end }}
    log-machine-group: "k8s-group-{{.ClusterID}}"
    {{ if .IsFinance }}
    {{ if (and (eq .IsFinance "true") (eq .Region "cn-hangzhou")) }}
    log-config-path: "/etc/ilogtail/conf/{{.Region}}-finance/ilogtail_config.json"
    {{ end }}
    {{ if (and (eq .IsFinance "true") (eq .Region "cn-shenzhen-finance-1")) }}
    log-config-path: "/etc/ilogtail/conf/cn-shenzhen-finance/ilogtail_config.json"
    {{ end }}
    {{ if (and (eq .IsFinance "true") (eq .Region "cn-shanghai-finance-1")) }}
    log-config-path: "/etc/ilogtail/conf/{{.Region}}/ilogtail_config.json"
    {{ end }}
    {{ if (and (eq .IsFinance "true") (eq .Region "cn-beijing-finance-1")) }}
    log-config-path: "/etc/ilogtail/conf/{{.Region}}/ilogtail_config.json"
    {{ end }}
    {{ else }}
    log-config-path: "/etc/ilogtail/conf/{{.Region}}/ilogtail_config.json"
    {{ end }}
    log-ali-uid: "{{.AliUid}}"
    cpu-core-limit: "2"
    mem-limit: "2048"
    max-bytes-per-sec: "209715200"
    send-requests-concurrency: "40"
{{ end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alibaba-log-controller
  namespace: {{.Namespace}}
  labels:
    k8s-app: alibaba-log-controller
  annotations:
    component.version: "{{.ControllerVersion}}"
    component.revision: "{{.ControllerRevision}}"
spec:
  selector:
    matchLabels:
      k8s-app: alibaba-log-controller
  replicas: {{.ControllerReplicas}}
  template:
    metadata:
      labels:
        k8s-app: alibaba-log-controller
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: alibaba-log-controller
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      containers:
      - name: alibaba-log-controller
        image: registry-vpc.{{.Region}}.aliyuncs.com/acs/log-controller:{{.ControllerImageVersion}}
        resources:
          limits:
            cpu: 200m
            memory: 400Mi
          requests:
            cpu: 50m
            memory: 100Mi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - ps -ef | grep -v grep | grep run-controller.sh
          initialDelaySeconds: 5
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - ps -ef | grep -v grep | grep run-controller.sh
          initialDelaySeconds: 5
          periodSeconds: 30
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 54321
        env:
          - name: "ALICLOUD_LOG_PROJECT"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: log-project
          - name: "ALICLOUD_LOG_ENDPOINT"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: log-endpoint
          - name: "ALICLOUD_LOG_MACHINE_GROUP"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: log-machine-group
          - name: "ALICLOUD_ACS_K8S_FLAG"
            value: "true"
          - name: "ALICLOUD_LOG_TAG_KEY"
            value: "ack.aliyun.com"
          - name: "ALICLOUD_LOG_TAG_VALUE"
            value: "{{.ClusterID}}"
          - name: "ALICLOUD_LOG_PRODUCT_ENDPOINT"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: log-endpoint
        volumeMounts:
        - name: addon-token
          mountPath: "/var/addon"
          readOnly: true
      volumes:
      - name: addon-token
        secret:
          secretName: addon.log.token
          optional: true
          items:
          - key: addon.token.config
            path: token-config

      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: logtail-ds
  namespace: kube-system
subjects:
- kind: ServiceAccount
  name: logtail-ds
  namespace: kube-system
roleRef:
  kind: Role
  name: logtail-ds
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: logtail-ds
  namespace: kube-system
  labels:
    k8s-app: logtail-ds
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - configmaps
  verbs:
  - update
  - get
  resourceNames:         # 限制名称
  - "alibaba-log-configuration"
- apiGroups:
    - ""
  resources:
    - "configmaps"
  verbs:
    - "create"  
- apiGroups: [""] # "" indicates the core API group
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: logtail-ds
  namespace: kube-system
  labels:
    k8s-app: logtail-ds

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: aliyunlogconfigs.log.alibabacloud.com
spec:
  conversion:
    strategy: None
  group: log.alibabacloud.com
  names:
    kind: AliyunLogConfig
    listKind: AliyunLogConfigList
    plural: aliyunlogconfigs
    singular: aliyunlogconfig
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              x-kubernetes-preserve-unknown-fields: true
            status:
              x-kubernetes-preserve-unknown-fields: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alibaba-log-controller
subjects:
- kind: ServiceAccount
  name: alibaba-log-controller
  namespace: {{.Namespace}}
roleRef:
  kind: ClusterRole
  name: alibaba-log-controller
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alibaba-log-controller
  labels:
    k8s-app: alibaba-log-controller
rules:
- apiGroups: ["log.alibabacloud.com"]
  resources:
  - aliyunlogconfigs
  verbs:
  - update
  - get
  - watch
  - list
- apiGroups: [""]
  resources:
  - configmaps
  verbs:
  - create
  - update
  - get
- apiGroups: [""]
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alibaba-log-controller
  namespace: {{.Namespace}}
  labels:
    k8s-app: alibaba-log-controller
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: logtail-ds
  namespace: {{.Namespace}}
  labels:
    k8s-app: logtail-ds
  annotations:
    component.version: "{{.LogtailVersion}}"
    component.revision: "{{.LogtailRevision}}"
spec:
  selector:
    matchLabels:
      k8s-app: logtail-ds
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 10%
  template:
    metadata:
      labels:
        k8s-app: logtail-ds
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      priorityClassName: system-cluster-critical
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: type
                operator: NotIn
                values:
                - virtual-kubelet
      serviceAccountName: logtail-ds
      tolerations:
        - operator: Exists
      containers:
      - name: logtail
        image: registry-vpc.{{.Region}}.aliyuncs.com/acs/logtail:{{.LogtailImageVersion}}
        resources:
          limits:
            cpu: 2000m
            memory: 2048Mi
          requests:
            cpu: 100m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /liveness
            port: 7953
            scheme: HTTP
          initialDelaySeconds: 35
          periodSeconds: 60
        readinessProbe:
          httpGet:
            path: /liveness
            port: 7953
            scheme: HTTP
          initialDelaySeconds: 35
          periodSeconds: 60
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          procMount: Default
        env:
          - name: "ALIYUN_LOGTAIL_CONFIG"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: log-config-path
          - name: "ALIYUN_LOGTAIL_USER_ID"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: log-ali-uid
          - name: "ALIYUN_LOGTAIL_USER_DEFINED_ID"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: log-machine-group
          - name: "ALICLOUD_LOG_DOCKER_ENV_CONFIG"
            value: "true"
          - name: "ALICLOUD_LOG_ECS_FLAG"
            value: "true"
          - name: "ALICLOUD_LOG_K8S_FLAG"
            value: "true"
          - name: "ALICLOUD_LOG_DEFAULT_PROJECT"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: log-project
          - name: "ALICLOUD_LOG_ENDPOINT"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: log-endpoint
          - name: "ALICLOUD_LOG_DEFAULT_MACHINE_GROUP"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: log-machine-group
          - name: "ALIYUN_LOG_ENV_TAGS"
            value: "_node_name_|_node_ip_|_cluster_id_"
          - name: "_node_name_"
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: "_node_ip_"
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          # resource limit for logtail self process
          - name: "_cluster_id_"
            value: "{{.ClusterID}}"
          - name: "cpu_usage_limit"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: cpu-core-limit
          - name: "mem_usage_limit"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: mem-limit
          - name: "max_bytes_per_sec"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: max-bytes-per-sec
          - name: "send_request_concurrency"
            valueFrom:
              configMapKeyRef:
                name: alibaba-log-configuration
                key: send-requests-concurrency
          - name: "HTTP_PROBE_PORT"
            value: "7953"
          - name: user_config_file_path
            value: '/etc/ilogtail/checkpoint/user_log_config.json'
          - name: docker_file_cache_path
            value: '/etc/ilogtail/checkpoint/docker_path_config.json'
          - name: check_point_filename
            value: '/etc/ilogtail/checkpoint/logtail_check_point'
          - name: check_point_dump_interval
            value: '60'
          - name: buffer_file_path
            value: '/etc/ilogtail/checkpoint'
        volumeMounts:
        - name: run
          mountPath: /var/run
        - name: root
          mountPath: /logtail_host
          readOnly: true
          mountPropagation: HostToContainer
        - name: addon-token
          mountPath: "/var/addon"
          readOnly: true
        - mountPath: /etc/ilogtail/checkpoint
          name: checkpoint

      terminationGracePeriodSeconds: 30
      nodeSelector:
        beta.kubernetes.io/os: linux
      volumes:
      - name: run
        hostPath:
          path: /var/run
          type: Directory
      - name: root
        hostPath:
          path: /
          type: Directory
      - name: addon-token
        secret:
          secretName: addon.log.token
          optional: true
          items:
          - key: addon.token.config
            path: token-config
      - hostPath:
          path: /var/lib/kube-system-logtail-ds/checkpoint
          type: DirectoryOrCreate
        name: checkpoint

---
{{ if eq .Action "Install" }}
{{ if .IngressDashboardEnabled }}
{{ if eq .IngressDashboardEnabled "true" }}
apiVersion: log.alibabacloud.com/v1alpha1
kind: AliyunLogConfig
metadata:
  name: k8s-nginx-ingress
  namespace: {{.Namespace}}
spec:
  logstore: nginx-ingress
  productCode: k8s-nginx-ingress
  logtailConfig:
    inputType: plugin
    configName: k8s-nginx-ingress
    inputDetail:
      plugin:
        inputs:
        - type: service_docker_stdout
          detail:
            IncludeLabel:
              io.kubernetes.container.name: nginx-ingress-controller
            Stderr: false
            Stdout: true
        processors:
        - type: processor_regex
          detail:
            KeepSource: false
            Keys:
            - client_ip
            - x_forward_for
            - remote_user
            - time
            - method
            - url
            - version
            - status
            - body_bytes_sent
            - http_referer
            - http_user_agent
            - request_length
            - request_time
            - proxy_upstream_name
            - upstream_addr
            - upstream_response_length
            - upstream_response_time
            - upstream_status
            - req_id
            - host
            NoKeyError: true
            NoMatchError: true
            Regex: ^(\S+)\s-\s\[([^]]+)]\s-\s(\S+)\s\[(\S+)\s\S+\s"(\w+)\s(\S+)\s([^"]+)"\s(\d+)\s(\d+)\s"([^"]*)"\s"([^"]*)"\s(\S+)\s(\S+)+\s\[([^]]*)]\s(\S+)\s(\S+)\s(\S+)\s(\S+)\s(\S+)\s*(\S*).*
            SourceKey: content
{{ end }}
{{ end }}
{{ end }}
---
{{ if eq .Action "Install" }}
{{ if .CoreDNSDashboardEnabled }}
{{ if eq .CoreDNSDashboardEnabled "true" }}
apiVersion: log.alibabacloud.com/v1alpha1
kind: AliyunLogConfig
metadata:
  #     Your config name, must be unique in you k8s cluster.
  name: k8s-coredns-log
  namespace: kube-system
spec:
  # logstore name to upload log
  logstore: coredns-log
  # logtail config detail
  productCode: k8s-coredns
  logtailConfig:
    inputType: plugin
    # logtail config name, should be same with [metadata.name]
    configName: k8s-coredns-log
    inputDetail:
      plugin:
        inputs:
        - type: service_docker_stdout
          detail:
            IncludeLabel:
              io.kubernetes.container.name: coredns
            Stderr: true
            Stdout: true
        processors:
        - type: processor_regex
          detail:
            KeepSource: false
            KeepSourceIfParseError: true
            Keys:
            - level
            - remote
            - port
            - id
            - type
            - class
            - name
            - proto
            - size
            - do
            - bufsize
            - rcode
            - rflags
            - rsize
            - duration
            NoKeyError: true
            NoMatchError: false
            FullMatch: false
            Regex: \[([^]]+)]\s([^:]+):(\S+)\s+-\s+(\S+)\s+"(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+([^"]+)"\s+(\S+)\s+(\S+)\s+(\S+)\s+([\d\.]+).*
            SourceKey: content
        - type: processor_regex
          detail:
            KeepSource: false
            KeepSourceIfParseError: true
            Keys:
            - error
            - rcode
            - name
            - type
            - errorMsg
            NoKeyError: false
            NoMatchError: false
            FullMatch: false
            Regex: \[ERROR]\s+(plugin/errors):\s+(\S)+\s+(\S+)\s+([^:]*):\s+(.*)
            SourceKey: content
{{ end }}
{{ end }}
{{ end }}