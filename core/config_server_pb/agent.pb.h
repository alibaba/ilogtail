// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent.proto

#ifndef PROTOBUF_INCLUDED_agent_2eproto
#define PROTOBUF_INCLUDED_agent_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_agent_2eproto 

namespace protobuf_agent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_agent_2eproto
namespace configserver {
namespace proto {
class AgentAttributes;
class AgentAttributesDefaultTypeInternal;
extern AgentAttributesDefaultTypeInternal _AgentAttributes_default_instance_;
class AgentAttributes_ExtrasEntry_DoNotUse;
class AgentAttributes_ExtrasEntry_DoNotUseDefaultTypeInternal;
extern AgentAttributes_ExtrasEntry_DoNotUseDefaultTypeInternal _AgentAttributes_ExtrasEntry_DoNotUse_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_ArgsEntry_DoNotUse;
class Command_ArgsEntry_DoNotUseDefaultTypeInternal;
extern Command_ArgsEntry_DoNotUseDefaultTypeInternal _Command_ArgsEntry_DoNotUse_default_instance_;
class ConfigCheckResult;
class ConfigCheckResultDefaultTypeInternal;
extern ConfigCheckResultDefaultTypeInternal _ConfigCheckResult_default_instance_;
class ConfigDetail;
class ConfigDetailDefaultTypeInternal;
extern ConfigDetailDefaultTypeInternal _ConfigDetail_default_instance_;
class ConfigInfo;
class ConfigInfoDefaultTypeInternal;
extern ConfigInfoDefaultTypeInternal _ConfigInfo_default_instance_;
class FetchAgentConfigRequest;
class FetchAgentConfigRequestDefaultTypeInternal;
extern FetchAgentConfigRequestDefaultTypeInternal _FetchAgentConfigRequest_default_instance_;
class FetchAgentConfigResponse;
class FetchAgentConfigResponseDefaultTypeInternal;
extern FetchAgentConfigResponseDefaultTypeInternal _FetchAgentConfigResponse_default_instance_;
class FetchPipelineConfigRequest;
class FetchPipelineConfigRequestDefaultTypeInternal;
extern FetchPipelineConfigRequestDefaultTypeInternal _FetchPipelineConfigRequest_default_instance_;
class FetchPipelineConfigResponse;
class FetchPipelineConfigResponseDefaultTypeInternal;
extern FetchPipelineConfigResponseDefaultTypeInternal _FetchPipelineConfigResponse_default_instance_;
class HeartBeatRequest;
class HeartBeatRequestDefaultTypeInternal;
extern HeartBeatRequestDefaultTypeInternal _HeartBeatRequest_default_instance_;
class HeartBeatResponse;
class HeartBeatResponseDefaultTypeInternal;
extern HeartBeatResponseDefaultTypeInternal _HeartBeatResponse_default_instance_;
}  // namespace proto
}  // namespace configserver
namespace google {
namespace protobuf {
template<> ::configserver::proto::AgentAttributes* Arena::CreateMaybeMessage<::configserver::proto::AgentAttributes>(Arena*);
template<> ::configserver::proto::AgentAttributes_ExtrasEntry_DoNotUse* Arena::CreateMaybeMessage<::configserver::proto::AgentAttributes_ExtrasEntry_DoNotUse>(Arena*);
template<> ::configserver::proto::Command* Arena::CreateMaybeMessage<::configserver::proto::Command>(Arena*);
template<> ::configserver::proto::Command_ArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::configserver::proto::Command_ArgsEntry_DoNotUse>(Arena*);
template<> ::configserver::proto::ConfigCheckResult* Arena::CreateMaybeMessage<::configserver::proto::ConfigCheckResult>(Arena*);
template<> ::configserver::proto::ConfigDetail* Arena::CreateMaybeMessage<::configserver::proto::ConfigDetail>(Arena*);
template<> ::configserver::proto::ConfigInfo* Arena::CreateMaybeMessage<::configserver::proto::ConfigInfo>(Arena*);
template<> ::configserver::proto::FetchAgentConfigRequest* Arena::CreateMaybeMessage<::configserver::proto::FetchAgentConfigRequest>(Arena*);
template<> ::configserver::proto::FetchAgentConfigResponse* Arena::CreateMaybeMessage<::configserver::proto::FetchAgentConfigResponse>(Arena*);
template<> ::configserver::proto::FetchPipelineConfigRequest* Arena::CreateMaybeMessage<::configserver::proto::FetchPipelineConfigRequest>(Arena*);
template<> ::configserver::proto::FetchPipelineConfigResponse* Arena::CreateMaybeMessage<::configserver::proto::FetchPipelineConfigResponse>(Arena*);
template<> ::configserver::proto::HeartBeatRequest* Arena::CreateMaybeMessage<::configserver::proto::HeartBeatRequest>(Arena*);
template<> ::configserver::proto::HeartBeatResponse* Arena::CreateMaybeMessage<::configserver::proto::HeartBeatResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace configserver {
namespace proto {

enum ConfigType {
  PIPELINE_CONFIG = 0,
  AGENT_CONFIG = 1,
  ConfigType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConfigType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConfigType_IsValid(int value);
const ConfigType ConfigType_MIN = PIPELINE_CONFIG;
const ConfigType ConfigType_MAX = AGENT_CONFIG;
const int ConfigType_ARRAYSIZE = ConfigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConfigType_descriptor();
inline const ::std::string& ConfigType_Name(ConfigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConfigType_descriptor(), value);
}
inline bool ConfigType_Parse(
    const ::std::string& name, ConfigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfigType>(
    ConfigType_descriptor(), name, value);
}
enum CheckStatus {
  NEW = 0,
  DELETED = 1,
  MODIFIED = 2,
  CheckStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CheckStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CheckStatus_IsValid(int value);
const CheckStatus CheckStatus_MIN = NEW;
const CheckStatus CheckStatus_MAX = MODIFIED;
const int CheckStatus_ARRAYSIZE = CheckStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CheckStatus_descriptor();
inline const ::std::string& CheckStatus_Name(CheckStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CheckStatus_descriptor(), value);
}
inline bool CheckStatus_Parse(
    const ::std::string& name, CheckStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CheckStatus>(
    CheckStatus_descriptor(), name, value);
}
enum RespCode {
  ACCEPT = 0,
  INVALID_PARAMETER = 1,
  INTERNAL_SERVER_ERROR = 2,
  RespCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RespCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RespCode_IsValid(int value);
const RespCode RespCode_MIN = ACCEPT;
const RespCode RespCode_MAX = INTERNAL_SERVER_ERROR;
const int RespCode_ARRAYSIZE = RespCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RespCode_descriptor();
inline const ::std::string& RespCode_Name(RespCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RespCode_descriptor(), value);
}
inline bool RespCode_Parse(
    const ::std::string& name, RespCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RespCode>(
    RespCode_descriptor(), name, value);
}
// ===================================================================

class ConfigInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.ConfigInfo) */ {
 public:
  ConfigInfo();
  virtual ~ConfigInfo();

  ConfigInfo(const ConfigInfo& from);

  inline ConfigInfo& operator=(const ConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigInfo(ConfigInfo&& from) noexcept
    : ConfigInfo() {
    *this = ::std::move(from);
  }

  inline ConfigInfo& operator=(ConfigInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigInfo* internal_default_instance() {
    return reinterpret_cast<const ConfigInfo*>(
               &_ConfigInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConfigInfo* other);
  friend void swap(ConfigInfo& a, ConfigInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigInfo* New() const final {
    return CreateMaybeMessage<ConfigInfo>(NULL);
  }

  ConfigInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigInfo& from);
  void MergeFrom(const ConfigInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string context = 4;
  void clear_context();
  static const int kContextFieldNumber = 4;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  #if LANG_CXX11
  void set_context(::std::string&& value);
  #endif
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // int64 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // .configserver.proto.ConfigType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::configserver::proto::ConfigType type() const;
  void set_type(::configserver::proto::ConfigType value);

  // @@protoc_insertion_point(class_scope:configserver.proto.ConfigInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::int64 version_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigCheckResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.ConfigCheckResult) */ {
 public:
  ConfigCheckResult();
  virtual ~ConfigCheckResult();

  ConfigCheckResult(const ConfigCheckResult& from);

  inline ConfigCheckResult& operator=(const ConfigCheckResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigCheckResult(ConfigCheckResult&& from) noexcept
    : ConfigCheckResult() {
    *this = ::std::move(from);
  }

  inline ConfigCheckResult& operator=(ConfigCheckResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigCheckResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigCheckResult* internal_default_instance() {
    return reinterpret_cast<const ConfigCheckResult*>(
               &_ConfigCheckResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConfigCheckResult* other);
  friend void swap(ConfigCheckResult& a, ConfigCheckResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigCheckResult* New() const final {
    return CreateMaybeMessage<ConfigCheckResult>(NULL);
  }

  ConfigCheckResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigCheckResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigCheckResult& from);
  void MergeFrom(const ConfigCheckResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigCheckResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string context = 5;
  void clear_context();
  static const int kContextFieldNumber = 5;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  #if LANG_CXX11
  void set_context(::std::string&& value);
  #endif
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // int64 old_version = 3;
  void clear_old_version();
  static const int kOldVersionFieldNumber = 3;
  ::google::protobuf::int64 old_version() const;
  void set_old_version(::google::protobuf::int64 value);

  // .configserver.proto.ConfigType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::configserver::proto::ConfigType type() const;
  void set_type(::configserver::proto::ConfigType value);

  // .configserver.proto.CheckStatus check_status = 6;
  void clear_check_status();
  static const int kCheckStatusFieldNumber = 6;
  ::configserver::proto::CheckStatus check_status() const;
  void set_check_status(::configserver::proto::CheckStatus value);

  // int64 new_version = 4;
  void clear_new_version();
  static const int kNewVersionFieldNumber = 4;
  ::google::protobuf::int64 new_version() const;
  void set_new_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:configserver.proto.ConfigCheckResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::int64 old_version_;
  int type_;
  int check_status_;
  ::google::protobuf::int64 new_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.ConfigDetail) */ {
 public:
  ConfigDetail();
  virtual ~ConfigDetail();

  ConfigDetail(const ConfigDetail& from);

  inline ConfigDetail& operator=(const ConfigDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigDetail(ConfigDetail&& from) noexcept
    : ConfigDetail() {
    *this = ::std::move(from);
  }

  inline ConfigDetail& operator=(ConfigDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDetail* internal_default_instance() {
    return reinterpret_cast<const ConfigDetail*>(
               &_ConfigDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConfigDetail* other);
  friend void swap(ConfigDetail& a, ConfigDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigDetail* New() const final {
    return CreateMaybeMessage<ConfigDetail>(NULL);
  }

  ConfigDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigDetail& from);
  void MergeFrom(const ConfigDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string context = 4;
  void clear_context();
  static const int kContextFieldNumber = 4;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  #if LANG_CXX11
  void set_context(::std::string&& value);
  #endif
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // string detail = 5;
  void clear_detail();
  static const int kDetailFieldNumber = 5;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  #if LANG_CXX11
  void set_detail(::std::string&& value);
  #endif
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  // int64 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // .configserver.proto.ConfigType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::configserver::proto::ConfigType type() const;
  void set_type(::configserver::proto::ConfigType value);

  // @@protoc_insertion_point(class_scope:configserver.proto.ConfigDetail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  ::google::protobuf::int64 version_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AgentAttributes_ExtrasEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AgentAttributes_ExtrasEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AgentAttributes_ExtrasEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AgentAttributes_ExtrasEntry_DoNotUse();
  AgentAttributes_ExtrasEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AgentAttributes_ExtrasEntry_DoNotUse& other);
  static const AgentAttributes_ExtrasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AgentAttributes_ExtrasEntry_DoNotUse*>(&_AgentAttributes_ExtrasEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AgentAttributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.AgentAttributes) */ {
 public:
  AgentAttributes();
  virtual ~AgentAttributes();

  AgentAttributes(const AgentAttributes& from);

  inline AgentAttributes& operator=(const AgentAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AgentAttributes(AgentAttributes&& from) noexcept
    : AgentAttributes() {
    *this = ::std::move(from);
  }

  inline AgentAttributes& operator=(AgentAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentAttributes* internal_default_instance() {
    return reinterpret_cast<const AgentAttributes*>(
               &_AgentAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AgentAttributes* other);
  friend void swap(AgentAttributes& a, AgentAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AgentAttributes* New() const final {
    return CreateMaybeMessage<AgentAttributes>(NULL);
  }

  AgentAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AgentAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AgentAttributes& from);
  void MergeFrom(const AgentAttributes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> extras = 100;
  int extras_size() const;
  void clear_extras();
  static const int kExtrasFieldNumber = 100;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      extras() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_extras();

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string category = 2;
  void clear_category();
  static const int kCategoryFieldNumber = 2;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string hostname = 4;
  void clear_hostname();
  static const int kHostnameFieldNumber = 4;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // string region = 5;
  void clear_region();
  static const int kRegionFieldNumber = 5;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // string zone = 6;
  void clear_zone();
  static const int kZoneFieldNumber = 6;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // @@protoc_insertion_point(class_scope:configserver.proto.AgentAttributes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      AgentAttributes_ExtrasEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > extras_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Command_ArgsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Command_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Command_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Command_ArgsEntry_DoNotUse();
  Command_ArgsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Command_ArgsEntry_DoNotUse& other);
  static const Command_ArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Command_ArgsEntry_DoNotUse*>(&_Command_ArgsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(NULL);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> args = 4;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      args() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_args();

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:configserver.proto.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Command_ArgsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > args_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartBeatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.HeartBeatRequest) */ {
 public:
  HeartBeatRequest();
  virtual ~HeartBeatRequest();

  HeartBeatRequest(const HeartBeatRequest& from);

  inline HeartBeatRequest& operator=(const HeartBeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartBeatRequest(HeartBeatRequest&& from) noexcept
    : HeartBeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartBeatRequest& operator=(HeartBeatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartBeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartBeatRequest*>(
               &_HeartBeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(HeartBeatRequest* other);
  friend void swap(HeartBeatRequest& a, HeartBeatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartBeatRequest* New() const final {
    return CreateMaybeMessage<HeartBeatRequest>(NULL);
  }

  HeartBeatRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeatRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeartBeatRequest& from);
  void MergeFrom(const HeartBeatRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 5;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated .configserver.proto.ConfigInfo pipeline_configs = 9;
  int pipeline_configs_size() const;
  void clear_pipeline_configs();
  static const int kPipelineConfigsFieldNumber = 9;
  ::configserver::proto::ConfigInfo* mutable_pipeline_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >*
      mutable_pipeline_configs();
  const ::configserver::proto::ConfigInfo& pipeline_configs(int index) const;
  ::configserver::proto::ConfigInfo* add_pipeline_configs();
  const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >&
      pipeline_configs() const;

  // repeated .configserver.proto.ConfigInfo agent_configs = 10;
  int agent_configs_size() const;
  void clear_agent_configs();
  static const int kAgentConfigsFieldNumber = 10;
  ::configserver::proto::ConfigInfo* mutable_agent_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >*
      mutable_agent_configs();
  const ::configserver::proto::ConfigInfo& agent_configs(int index) const;
  ::configserver::proto::ConfigInfo* add_agent_configs();
  const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >&
      agent_configs() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string agent_id = 2;
  void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  const ::std::string& agent_id() const;
  void set_agent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_id(::std::string&& value);
  #endif
  void set_agent_id(const char* value);
  void set_agent_id(const char* value, size_t size);
  ::std::string* mutable_agent_id();
  ::std::string* release_agent_id();
  void set_allocated_agent_id(::std::string* agent_id);

  // string agent_type = 3;
  void clear_agent_type();
  static const int kAgentTypeFieldNumber = 3;
  const ::std::string& agent_type() const;
  void set_agent_type(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_type(::std::string&& value);
  #endif
  void set_agent_type(const char* value);
  void set_agent_type(const char* value, size_t size);
  ::std::string* mutable_agent_type();
  ::std::string* release_agent_type();
  void set_allocated_agent_type(::std::string* agent_type);

  // string running_status = 6;
  void clear_running_status();
  static const int kRunningStatusFieldNumber = 6;
  const ::std::string& running_status() const;
  void set_running_status(const ::std::string& value);
  #if LANG_CXX11
  void set_running_status(::std::string&& value);
  #endif
  void set_running_status(const char* value);
  void set_running_status(const char* value, size_t size);
  ::std::string* mutable_running_status();
  ::std::string* release_running_status();
  void set_allocated_running_status(::std::string* running_status);

  // .configserver.proto.AgentAttributes attributes = 4;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 4;
  private:
  const ::configserver::proto::AgentAttributes& _internal_attributes() const;
  public:
  const ::configserver::proto::AgentAttributes& attributes() const;
  ::configserver::proto::AgentAttributes* release_attributes();
  ::configserver::proto::AgentAttributes* mutable_attributes();
  void set_allocated_attributes(::configserver::proto::AgentAttributes* attributes);

  // int64 startup_time = 7;
  void clear_startup_time();
  static const int kStartupTimeFieldNumber = 7;
  ::google::protobuf::int64 startup_time() const;
  void set_startup_time(::google::protobuf::int64 value);

  // int32 interval = 8;
  void clear_interval();
  static const int kIntervalFieldNumber = 8;
  ::google::protobuf::int32 interval() const;
  void set_interval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:configserver.proto.HeartBeatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo > pipeline_configs_;
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo > agent_configs_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr agent_id_;
  ::google::protobuf::internal::ArenaStringPtr agent_type_;
  ::google::protobuf::internal::ArenaStringPtr running_status_;
  ::configserver::proto::AgentAttributes* attributes_;
  ::google::protobuf::int64 startup_time_;
  ::google::protobuf::int32 interval_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartBeatResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.HeartBeatResponse) */ {
 public:
  HeartBeatResponse();
  virtual ~HeartBeatResponse();

  HeartBeatResponse(const HeartBeatResponse& from);

  inline HeartBeatResponse& operator=(const HeartBeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartBeatResponse(HeartBeatResponse&& from) noexcept
    : HeartBeatResponse() {
    *this = ::std::move(from);
  }

  inline HeartBeatResponse& operator=(HeartBeatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartBeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartBeatResponse*>(
               &_HeartBeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(HeartBeatResponse* other);
  friend void swap(HeartBeatResponse& a, HeartBeatResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartBeatResponse* New() const final {
    return CreateMaybeMessage<HeartBeatResponse>(NULL);
  }

  HeartBeatResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeatResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeartBeatResponse& from);
  void MergeFrom(const HeartBeatResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .configserver.proto.ConfigCheckResult pipeline_check_results = 4;
  int pipeline_check_results_size() const;
  void clear_pipeline_check_results();
  static const int kPipelineCheckResultsFieldNumber = 4;
  ::configserver::proto::ConfigCheckResult* mutable_pipeline_check_results(int index);
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigCheckResult >*
      mutable_pipeline_check_results();
  const ::configserver::proto::ConfigCheckResult& pipeline_check_results(int index) const;
  ::configserver::proto::ConfigCheckResult* add_pipeline_check_results();
  const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigCheckResult >&
      pipeline_check_results() const;

  // repeated .configserver.proto.ConfigCheckResult agent_check_results = 5;
  int agent_check_results_size() const;
  void clear_agent_check_results();
  static const int kAgentCheckResultsFieldNumber = 5;
  ::configserver::proto::ConfigCheckResult* mutable_agent_check_results(int index);
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigCheckResult >*
      mutable_agent_check_results();
  const ::configserver::proto::ConfigCheckResult& agent_check_results(int index) const;
  ::configserver::proto::ConfigCheckResult* add_agent_check_results();
  const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigCheckResult >&
      agent_check_results() const;

  // repeated .configserver.proto.Command custom_commands = 6;
  int custom_commands_size() const;
  void clear_custom_commands();
  static const int kCustomCommandsFieldNumber = 6;
  ::configserver::proto::Command* mutable_custom_commands(int index);
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::Command >*
      mutable_custom_commands();
  const ::configserver::proto::Command& custom_commands(int index) const;
  ::configserver::proto::Command* add_custom_commands();
  const ::google::protobuf::RepeatedPtrField< ::configserver::proto::Command >&
      custom_commands() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .configserver.proto.RespCode code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::configserver::proto::RespCode code() const;
  void set_code(::configserver::proto::RespCode value);

  // @@protoc_insertion_point(class_scope:configserver.proto.HeartBeatResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigCheckResult > pipeline_check_results_;
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigCheckResult > agent_check_results_;
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::Command > custom_commands_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FetchPipelineConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.FetchPipelineConfigRequest) */ {
 public:
  FetchPipelineConfigRequest();
  virtual ~FetchPipelineConfigRequest();

  FetchPipelineConfigRequest(const FetchPipelineConfigRequest& from);

  inline FetchPipelineConfigRequest& operator=(const FetchPipelineConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchPipelineConfigRequest(FetchPipelineConfigRequest&& from) noexcept
    : FetchPipelineConfigRequest() {
    *this = ::std::move(from);
  }

  inline FetchPipelineConfigRequest& operator=(FetchPipelineConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchPipelineConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchPipelineConfigRequest* internal_default_instance() {
    return reinterpret_cast<const FetchPipelineConfigRequest*>(
               &_FetchPipelineConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(FetchPipelineConfigRequest* other);
  friend void swap(FetchPipelineConfigRequest& a, FetchPipelineConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchPipelineConfigRequest* New() const final {
    return CreateMaybeMessage<FetchPipelineConfigRequest>(NULL);
  }

  FetchPipelineConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FetchPipelineConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FetchPipelineConfigRequest& from);
  void MergeFrom(const FetchPipelineConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchPipelineConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .configserver.proto.ConfigInfo req_configs = 3;
  int req_configs_size() const;
  void clear_req_configs();
  static const int kReqConfigsFieldNumber = 3;
  ::configserver::proto::ConfigInfo* mutable_req_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >*
      mutable_req_configs();
  const ::configserver::proto::ConfigInfo& req_configs(int index) const;
  ::configserver::proto::ConfigInfo* add_req_configs();
  const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >&
      req_configs() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string agent_id = 2;
  void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  const ::std::string& agent_id() const;
  void set_agent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_id(::std::string&& value);
  #endif
  void set_agent_id(const char* value);
  void set_agent_id(const char* value, size_t size);
  ::std::string* mutable_agent_id();
  ::std::string* release_agent_id();
  void set_allocated_agent_id(::std::string* agent_id);

  // @@protoc_insertion_point(class_scope:configserver.proto.FetchPipelineConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo > req_configs_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr agent_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FetchPipelineConfigResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.FetchPipelineConfigResponse) */ {
 public:
  FetchPipelineConfigResponse();
  virtual ~FetchPipelineConfigResponse();

  FetchPipelineConfigResponse(const FetchPipelineConfigResponse& from);

  inline FetchPipelineConfigResponse& operator=(const FetchPipelineConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchPipelineConfigResponse(FetchPipelineConfigResponse&& from) noexcept
    : FetchPipelineConfigResponse() {
    *this = ::std::move(from);
  }

  inline FetchPipelineConfigResponse& operator=(FetchPipelineConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchPipelineConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchPipelineConfigResponse* internal_default_instance() {
    return reinterpret_cast<const FetchPipelineConfigResponse*>(
               &_FetchPipelineConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(FetchPipelineConfigResponse* other);
  friend void swap(FetchPipelineConfigResponse& a, FetchPipelineConfigResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchPipelineConfigResponse* New() const final {
    return CreateMaybeMessage<FetchPipelineConfigResponse>(NULL);
  }

  FetchPipelineConfigResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FetchPipelineConfigResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FetchPipelineConfigResponse& from);
  void MergeFrom(const FetchPipelineConfigResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchPipelineConfigResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .configserver.proto.ConfigDetail config_details = 4;
  int config_details_size() const;
  void clear_config_details();
  static const int kConfigDetailsFieldNumber = 4;
  ::configserver::proto::ConfigDetail* mutable_config_details(int index);
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigDetail >*
      mutable_config_details();
  const ::configserver::proto::ConfigDetail& config_details(int index) const;
  ::configserver::proto::ConfigDetail* add_config_details();
  const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigDetail >&
      config_details() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .configserver.proto.RespCode code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::configserver::proto::RespCode code() const;
  void set_code(::configserver::proto::RespCode value);

  // @@protoc_insertion_point(class_scope:configserver.proto.FetchPipelineConfigResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigDetail > config_details_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FetchAgentConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.FetchAgentConfigRequest) */ {
 public:
  FetchAgentConfigRequest();
  virtual ~FetchAgentConfigRequest();

  FetchAgentConfigRequest(const FetchAgentConfigRequest& from);

  inline FetchAgentConfigRequest& operator=(const FetchAgentConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchAgentConfigRequest(FetchAgentConfigRequest&& from) noexcept
    : FetchAgentConfigRequest() {
    *this = ::std::move(from);
  }

  inline FetchAgentConfigRequest& operator=(FetchAgentConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchAgentConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchAgentConfigRequest* internal_default_instance() {
    return reinterpret_cast<const FetchAgentConfigRequest*>(
               &_FetchAgentConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(FetchAgentConfigRequest* other);
  friend void swap(FetchAgentConfigRequest& a, FetchAgentConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchAgentConfigRequest* New() const final {
    return CreateMaybeMessage<FetchAgentConfigRequest>(NULL);
  }

  FetchAgentConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FetchAgentConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FetchAgentConfigRequest& from);
  void MergeFrom(const FetchAgentConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchAgentConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .configserver.proto.ConfigInfo req_configs = 4;
  int req_configs_size() const;
  void clear_req_configs();
  static const int kReqConfigsFieldNumber = 4;
  ::configserver::proto::ConfigInfo* mutable_req_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >*
      mutable_req_configs();
  const ::configserver::proto::ConfigInfo& req_configs(int index) const;
  ::configserver::proto::ConfigInfo* add_req_configs();
  const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >&
      req_configs() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string agent_id = 2;
  void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  const ::std::string& agent_id() const;
  void set_agent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_id(::std::string&& value);
  #endif
  void set_agent_id(const char* value);
  void set_agent_id(const char* value, size_t size);
  ::std::string* mutable_agent_id();
  ::std::string* release_agent_id();
  void set_allocated_agent_id(::std::string* agent_id);

  // .configserver.proto.AgentAttributes attributes = 3;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  private:
  const ::configserver::proto::AgentAttributes& _internal_attributes() const;
  public:
  const ::configserver::proto::AgentAttributes& attributes() const;
  ::configserver::proto::AgentAttributes* release_attributes();
  ::configserver::proto::AgentAttributes* mutable_attributes();
  void set_allocated_attributes(::configserver::proto::AgentAttributes* attributes);

  // @@protoc_insertion_point(class_scope:configserver.proto.FetchAgentConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo > req_configs_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr agent_id_;
  ::configserver::proto::AgentAttributes* attributes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FetchAgentConfigResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:configserver.proto.FetchAgentConfigResponse) */ {
 public:
  FetchAgentConfigResponse();
  virtual ~FetchAgentConfigResponse();

  FetchAgentConfigResponse(const FetchAgentConfigResponse& from);

  inline FetchAgentConfigResponse& operator=(const FetchAgentConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchAgentConfigResponse(FetchAgentConfigResponse&& from) noexcept
    : FetchAgentConfigResponse() {
    *this = ::std::move(from);
  }

  inline FetchAgentConfigResponse& operator=(FetchAgentConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchAgentConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchAgentConfigResponse* internal_default_instance() {
    return reinterpret_cast<const FetchAgentConfigResponse*>(
               &_FetchAgentConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(FetchAgentConfigResponse* other);
  friend void swap(FetchAgentConfigResponse& a, FetchAgentConfigResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchAgentConfigResponse* New() const final {
    return CreateMaybeMessage<FetchAgentConfigResponse>(NULL);
  }

  FetchAgentConfigResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FetchAgentConfigResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FetchAgentConfigResponse& from);
  void MergeFrom(const FetchAgentConfigResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchAgentConfigResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .configserver.proto.ConfigDetail config_details = 4;
  int config_details_size() const;
  void clear_config_details();
  static const int kConfigDetailsFieldNumber = 4;
  ::configserver::proto::ConfigDetail* mutable_config_details(int index);
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigDetail >*
      mutable_config_details();
  const ::configserver::proto::ConfigDetail& config_details(int index) const;
  ::configserver::proto::ConfigDetail* add_config_details();
  const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigDetail >&
      config_details() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .configserver.proto.RespCode code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::configserver::proto::RespCode code() const;
  void set_code(::configserver::proto::RespCode value);

  // @@protoc_insertion_point(class_scope:configserver.proto.FetchAgentConfigResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigDetail > config_details_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_agent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigInfo

// .configserver.proto.ConfigType type = 1;
inline void ConfigInfo::clear_type() {
  type_ = 0;
}
inline ::configserver::proto::ConfigType ConfigInfo::type() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigInfo.type)
  return static_cast< ::configserver::proto::ConfigType >(type_);
}
inline void ConfigInfo::set_type(::configserver::proto::ConfigType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigInfo.type)
}

// string name = 2;
inline void ConfigInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::name() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigInfo.name)
  return name_.GetNoArena();
}
inline void ConfigInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigInfo.name)
}
#if LANG_CXX11
inline void ConfigInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.ConfigInfo.name)
}
#endif
inline void ConfigInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.ConfigInfo.name)
}
inline void ConfigInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.ConfigInfo.name)
}
inline ::std::string* ConfigInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.ConfigInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_name() {
  // @@protoc_insertion_point(field_release:configserver.proto.ConfigInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.ConfigInfo.name)
}

// int64 version = 3;
inline void ConfigInfo::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigInfo::version() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigInfo.version)
  return version_;
}
inline void ConfigInfo::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigInfo.version)
}

// string context = 4;
inline void ConfigInfo::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::context() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigInfo.context)
  return context_.GetNoArena();
}
inline void ConfigInfo::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigInfo.context)
}
#if LANG_CXX11
inline void ConfigInfo::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.ConfigInfo.context)
}
#endif
inline void ConfigInfo::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.ConfigInfo.context)
}
inline void ConfigInfo::set_context(const char* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.ConfigInfo.context)
}
inline ::std::string* ConfigInfo::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.ConfigInfo.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_context() {
  // @@protoc_insertion_point(field_release:configserver.proto.ConfigInfo.context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.ConfigInfo.context)
}

// -------------------------------------------------------------------

// ConfigCheckResult

// .configserver.proto.ConfigType type = 1;
inline void ConfigCheckResult::clear_type() {
  type_ = 0;
}
inline ::configserver::proto::ConfigType ConfigCheckResult::type() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigCheckResult.type)
  return static_cast< ::configserver::proto::ConfigType >(type_);
}
inline void ConfigCheckResult::set_type(::configserver::proto::ConfigType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigCheckResult.type)
}

// string name = 2;
inline void ConfigCheckResult::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigCheckResult::name() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigCheckResult.name)
  return name_.GetNoArena();
}
inline void ConfigCheckResult::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigCheckResult.name)
}
#if LANG_CXX11
inline void ConfigCheckResult::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.ConfigCheckResult.name)
}
#endif
inline void ConfigCheckResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.ConfigCheckResult.name)
}
inline void ConfigCheckResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.ConfigCheckResult.name)
}
inline ::std::string* ConfigCheckResult::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.ConfigCheckResult.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigCheckResult::release_name() {
  // @@protoc_insertion_point(field_release:configserver.proto.ConfigCheckResult.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigCheckResult::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.ConfigCheckResult.name)
}

// int64 old_version = 3;
inline void ConfigCheckResult::clear_old_version() {
  old_version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigCheckResult::old_version() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigCheckResult.old_version)
  return old_version_;
}
inline void ConfigCheckResult::set_old_version(::google::protobuf::int64 value) {
  
  old_version_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigCheckResult.old_version)
}

// int64 new_version = 4;
inline void ConfigCheckResult::clear_new_version() {
  new_version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigCheckResult::new_version() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigCheckResult.new_version)
  return new_version_;
}
inline void ConfigCheckResult::set_new_version(::google::protobuf::int64 value) {
  
  new_version_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigCheckResult.new_version)
}

// string context = 5;
inline void ConfigCheckResult::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigCheckResult::context() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigCheckResult.context)
  return context_.GetNoArena();
}
inline void ConfigCheckResult::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigCheckResult.context)
}
#if LANG_CXX11
inline void ConfigCheckResult::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.ConfigCheckResult.context)
}
#endif
inline void ConfigCheckResult::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.ConfigCheckResult.context)
}
inline void ConfigCheckResult::set_context(const char* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.ConfigCheckResult.context)
}
inline ::std::string* ConfigCheckResult::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.ConfigCheckResult.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigCheckResult::release_context() {
  // @@protoc_insertion_point(field_release:configserver.proto.ConfigCheckResult.context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigCheckResult::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.ConfigCheckResult.context)
}

// .configserver.proto.CheckStatus check_status = 6;
inline void ConfigCheckResult::clear_check_status() {
  check_status_ = 0;
}
inline ::configserver::proto::CheckStatus ConfigCheckResult::check_status() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigCheckResult.check_status)
  return static_cast< ::configserver::proto::CheckStatus >(check_status_);
}
inline void ConfigCheckResult::set_check_status(::configserver::proto::CheckStatus value) {
  
  check_status_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigCheckResult.check_status)
}

// -------------------------------------------------------------------

// ConfigDetail

// .configserver.proto.ConfigType type = 1;
inline void ConfigDetail::clear_type() {
  type_ = 0;
}
inline ::configserver::proto::ConfigType ConfigDetail::type() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigDetail.type)
  return static_cast< ::configserver::proto::ConfigType >(type_);
}
inline void ConfigDetail::set_type(::configserver::proto::ConfigType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigDetail.type)
}

// string name = 2;
inline void ConfigDetail::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigDetail::name() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigDetail.name)
  return name_.GetNoArena();
}
inline void ConfigDetail::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigDetail.name)
}
#if LANG_CXX11
inline void ConfigDetail::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.ConfigDetail.name)
}
#endif
inline void ConfigDetail::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.ConfigDetail.name)
}
inline void ConfigDetail::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.ConfigDetail.name)
}
inline ::std::string* ConfigDetail::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.ConfigDetail.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigDetail::release_name() {
  // @@protoc_insertion_point(field_release:configserver.proto.ConfigDetail.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigDetail::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.ConfigDetail.name)
}

// int64 version = 3;
inline void ConfigDetail::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigDetail::version() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigDetail.version)
  return version_;
}
inline void ConfigDetail::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigDetail.version)
}

// string context = 4;
inline void ConfigDetail::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigDetail::context() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigDetail.context)
  return context_.GetNoArena();
}
inline void ConfigDetail::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigDetail.context)
}
#if LANG_CXX11
inline void ConfigDetail::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.ConfigDetail.context)
}
#endif
inline void ConfigDetail::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.ConfigDetail.context)
}
inline void ConfigDetail::set_context(const char* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.ConfigDetail.context)
}
inline ::std::string* ConfigDetail::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.ConfigDetail.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigDetail::release_context() {
  // @@protoc_insertion_point(field_release:configserver.proto.ConfigDetail.context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigDetail::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.ConfigDetail.context)
}

// string detail = 5;
inline void ConfigDetail::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigDetail::detail() const {
  // @@protoc_insertion_point(field_get:configserver.proto.ConfigDetail.detail)
  return detail_.GetNoArena();
}
inline void ConfigDetail::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.ConfigDetail.detail)
}
#if LANG_CXX11
inline void ConfigDetail::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.ConfigDetail.detail)
}
#endif
inline void ConfigDetail::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.ConfigDetail.detail)
}
inline void ConfigDetail::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.ConfigDetail.detail)
}
inline ::std::string* ConfigDetail::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.ConfigDetail.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigDetail::release_detail() {
  // @@protoc_insertion_point(field_release:configserver.proto.ConfigDetail.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigDetail::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.ConfigDetail.detail)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AgentAttributes

// string version = 1;
inline void AgentAttributes::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgentAttributes::version() const {
  // @@protoc_insertion_point(field_get:configserver.proto.AgentAttributes.version)
  return version_.GetNoArena();
}
inline void AgentAttributes::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.AgentAttributes.version)
}
#if LANG_CXX11
inline void AgentAttributes::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.AgentAttributes.version)
}
#endif
inline void AgentAttributes::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.AgentAttributes.version)
}
inline void AgentAttributes::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.AgentAttributes.version)
}
inline ::std::string* AgentAttributes::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.AgentAttributes.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgentAttributes::release_version() {
  // @@protoc_insertion_point(field_release:configserver.proto.AgentAttributes.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgentAttributes::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.AgentAttributes.version)
}

// string category = 2;
inline void AgentAttributes::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgentAttributes::category() const {
  // @@protoc_insertion_point(field_get:configserver.proto.AgentAttributes.category)
  return category_.GetNoArena();
}
inline void AgentAttributes::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.AgentAttributes.category)
}
#if LANG_CXX11
inline void AgentAttributes::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.AgentAttributes.category)
}
#endif
inline void AgentAttributes::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.AgentAttributes.category)
}
inline void AgentAttributes::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.AgentAttributes.category)
}
inline ::std::string* AgentAttributes::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.AgentAttributes.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgentAttributes::release_category() {
  // @@protoc_insertion_point(field_release:configserver.proto.AgentAttributes.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgentAttributes::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.AgentAttributes.category)
}

// string ip = 3;
inline void AgentAttributes::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgentAttributes::ip() const {
  // @@protoc_insertion_point(field_get:configserver.proto.AgentAttributes.ip)
  return ip_.GetNoArena();
}
inline void AgentAttributes::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.AgentAttributes.ip)
}
#if LANG_CXX11
inline void AgentAttributes::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.AgentAttributes.ip)
}
#endif
inline void AgentAttributes::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.AgentAttributes.ip)
}
inline void AgentAttributes::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.AgentAttributes.ip)
}
inline ::std::string* AgentAttributes::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.AgentAttributes.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgentAttributes::release_ip() {
  // @@protoc_insertion_point(field_release:configserver.proto.AgentAttributes.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgentAttributes::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.AgentAttributes.ip)
}

// string hostname = 4;
inline void AgentAttributes::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgentAttributes::hostname() const {
  // @@protoc_insertion_point(field_get:configserver.proto.AgentAttributes.hostname)
  return hostname_.GetNoArena();
}
inline void AgentAttributes::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.AgentAttributes.hostname)
}
#if LANG_CXX11
inline void AgentAttributes::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.AgentAttributes.hostname)
}
#endif
inline void AgentAttributes::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.AgentAttributes.hostname)
}
inline void AgentAttributes::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.AgentAttributes.hostname)
}
inline ::std::string* AgentAttributes::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.AgentAttributes.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgentAttributes::release_hostname() {
  // @@protoc_insertion_point(field_release:configserver.proto.AgentAttributes.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgentAttributes::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.AgentAttributes.hostname)
}

// string region = 5;
inline void AgentAttributes::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgentAttributes::region() const {
  // @@protoc_insertion_point(field_get:configserver.proto.AgentAttributes.region)
  return region_.GetNoArena();
}
inline void AgentAttributes::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.AgentAttributes.region)
}
#if LANG_CXX11
inline void AgentAttributes::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.AgentAttributes.region)
}
#endif
inline void AgentAttributes::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.AgentAttributes.region)
}
inline void AgentAttributes::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.AgentAttributes.region)
}
inline ::std::string* AgentAttributes::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.AgentAttributes.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgentAttributes::release_region() {
  // @@protoc_insertion_point(field_release:configserver.proto.AgentAttributes.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgentAttributes::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.AgentAttributes.region)
}

// string zone = 6;
inline void AgentAttributes::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgentAttributes::zone() const {
  // @@protoc_insertion_point(field_get:configserver.proto.AgentAttributes.zone)
  return zone_.GetNoArena();
}
inline void AgentAttributes::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.AgentAttributes.zone)
}
#if LANG_CXX11
inline void AgentAttributes::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.AgentAttributes.zone)
}
#endif
inline void AgentAttributes::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.AgentAttributes.zone)
}
inline void AgentAttributes::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.AgentAttributes.zone)
}
inline ::std::string* AgentAttributes::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.AgentAttributes.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgentAttributes::release_zone() {
  // @@protoc_insertion_point(field_release:configserver.proto.AgentAttributes.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgentAttributes::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.AgentAttributes.zone)
}

// map<string, string> extras = 100;
inline int AgentAttributes::extras_size() const {
  return extras_.size();
}
inline void AgentAttributes::clear_extras() {
  extras_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AgentAttributes::extras() const {
  // @@protoc_insertion_point(field_map:configserver.proto.AgentAttributes.extras)
  return extras_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AgentAttributes::mutable_extras() {
  // @@protoc_insertion_point(field_mutable_map:configserver.proto.AgentAttributes.extras)
  return extras_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Command

// string type = 1;
inline void Command::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::type() const {
  // @@protoc_insertion_point(field_get:configserver.proto.Command.type)
  return type_.GetNoArena();
}
inline void Command::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.Command.type)
}
#if LANG_CXX11
inline void Command::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.Command.type)
}
#endif
inline void Command::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.Command.type)
}
inline void Command::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.Command.type)
}
inline ::std::string* Command::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.Command.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_type() {
  // @@protoc_insertion_point(field_release:configserver.proto.Command.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.Command.type)
}

// string name = 2;
inline void Command::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::name() const {
  // @@protoc_insertion_point(field_get:configserver.proto.Command.name)
  return name_.GetNoArena();
}
inline void Command::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.Command.name)
}
#if LANG_CXX11
inline void Command::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.Command.name)
}
#endif
inline void Command::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.Command.name)
}
inline void Command::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.Command.name)
}
inline ::std::string* Command::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.Command.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_name() {
  // @@protoc_insertion_point(field_release:configserver.proto.Command.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.Command.name)
}

// string id = 3;
inline void Command::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::id() const {
  // @@protoc_insertion_point(field_get:configserver.proto.Command.id)
  return id_.GetNoArena();
}
inline void Command::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.Command.id)
}
#if LANG_CXX11
inline void Command::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.Command.id)
}
#endif
inline void Command::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.Command.id)
}
inline void Command::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.Command.id)
}
inline ::std::string* Command::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.Command.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_id() {
  // @@protoc_insertion_point(field_release:configserver.proto.Command.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.Command.id)
}

// map<string, string> args = 4;
inline int Command::args_size() const {
  return args_.size();
}
inline void Command::clear_args() {
  args_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Command::args() const {
  // @@protoc_insertion_point(field_map:configserver.proto.Command.args)
  return args_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Command::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:configserver.proto.Command.args)
  return args_.MutableMap();
}

// -------------------------------------------------------------------

// HeartBeatRequest

// string request_id = 1;
inline void HeartBeatRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatRequest::request_id() const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatRequest.request_id)
  return request_id_.GetNoArena();
}
inline void HeartBeatRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatRequest.request_id)
}
#if LANG_CXX11
inline void HeartBeatRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.HeartBeatRequest.request_id)
}
#endif
inline void HeartBeatRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.HeartBeatRequest.request_id)
}
inline void HeartBeatRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.HeartBeatRequest.request_id)
}
inline ::std::string* HeartBeatRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:configserver.proto.HeartBeatRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.HeartBeatRequest.request_id)
}

// string agent_id = 2;
inline void HeartBeatRequest::clear_agent_id() {
  agent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatRequest.agent_id)
  return agent_id_.GetNoArena();
}
inline void HeartBeatRequest::set_agent_id(const ::std::string& value) {
  
  agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatRequest.agent_id)
}
#if LANG_CXX11
inline void HeartBeatRequest::set_agent_id(::std::string&& value) {
  
  agent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.HeartBeatRequest.agent_id)
}
#endif
inline void HeartBeatRequest::set_agent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.HeartBeatRequest.agent_id)
}
inline void HeartBeatRequest::set_agent_id(const char* value, size_t size) {
  
  agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.HeartBeatRequest.agent_id)
}
inline ::std::string* HeartBeatRequest::mutable_agent_id() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatRequest.agent_id)
  return agent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:configserver.proto.HeartBeatRequest.agent_id)
  
  return agent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequest::set_allocated_agent_id(::std::string* agent_id) {
  if (agent_id != NULL) {
    
  } else {
    
  }
  agent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_id);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.HeartBeatRequest.agent_id)
}

// string agent_type = 3;
inline void HeartBeatRequest::clear_agent_type() {
  agent_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatRequest::agent_type() const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatRequest.agent_type)
  return agent_type_.GetNoArena();
}
inline void HeartBeatRequest::set_agent_type(const ::std::string& value) {
  
  agent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatRequest.agent_type)
}
#if LANG_CXX11
inline void HeartBeatRequest::set_agent_type(::std::string&& value) {
  
  agent_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.HeartBeatRequest.agent_type)
}
#endif
inline void HeartBeatRequest::set_agent_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.HeartBeatRequest.agent_type)
}
inline void HeartBeatRequest::set_agent_type(const char* value, size_t size) {
  
  agent_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.HeartBeatRequest.agent_type)
}
inline ::std::string* HeartBeatRequest::mutable_agent_type() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatRequest.agent_type)
  return agent_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRequest::release_agent_type() {
  // @@protoc_insertion_point(field_release:configserver.proto.HeartBeatRequest.agent_type)
  
  return agent_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequest::set_allocated_agent_type(::std::string* agent_type) {
  if (agent_type != NULL) {
    
  } else {
    
  }
  agent_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_type);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.HeartBeatRequest.agent_type)
}

// .configserver.proto.AgentAttributes attributes = 4;
inline bool HeartBeatRequest::has_attributes() const {
  return this != internal_default_instance() && attributes_ != NULL;
}
inline void HeartBeatRequest::clear_attributes() {
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) {
    delete attributes_;
  }
  attributes_ = NULL;
}
inline const ::configserver::proto::AgentAttributes& HeartBeatRequest::_internal_attributes() const {
  return *attributes_;
}
inline const ::configserver::proto::AgentAttributes& HeartBeatRequest::attributes() const {
  const ::configserver::proto::AgentAttributes* p = attributes_;
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatRequest.attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::configserver::proto::AgentAttributes*>(
      &::configserver::proto::_AgentAttributes_default_instance_);
}
inline ::configserver::proto::AgentAttributes* HeartBeatRequest::release_attributes() {
  // @@protoc_insertion_point(field_release:configserver.proto.HeartBeatRequest.attributes)
  
  ::configserver::proto::AgentAttributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline ::configserver::proto::AgentAttributes* HeartBeatRequest::mutable_attributes() {
  
  if (attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::configserver::proto::AgentAttributes>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatRequest.attributes)
  return attributes_;
}
inline void HeartBeatRequest::set_allocated_attributes(::configserver::proto::AgentAttributes* attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete attributes_;
  }
  if (attributes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.HeartBeatRequest.attributes)
}

// repeated string tags = 5;
inline int HeartBeatRequest::tags_size() const {
  return tags_.size();
}
inline void HeartBeatRequest::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& HeartBeatRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatRequest.tags)
  return tags_.Get(index);
}
inline ::std::string* HeartBeatRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatRequest.tags)
  return tags_.Mutable(index);
}
inline void HeartBeatRequest::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatRequest.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HeartBeatRequest::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatRequest.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HeartBeatRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:configserver.proto.HeartBeatRequest.tags)
}
inline void HeartBeatRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.HeartBeatRequest.tags)
}
inline ::std::string* HeartBeatRequest::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:configserver.proto.HeartBeatRequest.tags)
  return tags_.Add();
}
inline void HeartBeatRequest::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:configserver.proto.HeartBeatRequest.tags)
}
#if LANG_CXX11
inline void HeartBeatRequest::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:configserver.proto.HeartBeatRequest.tags)
}
#endif
inline void HeartBeatRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:configserver.proto.HeartBeatRequest.tags)
}
inline void HeartBeatRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:configserver.proto.HeartBeatRequest.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeartBeatRequest::tags() const {
  // @@protoc_insertion_point(field_list:configserver.proto.HeartBeatRequest.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeartBeatRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:configserver.proto.HeartBeatRequest.tags)
  return &tags_;
}

// string running_status = 6;
inline void HeartBeatRequest::clear_running_status() {
  running_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatRequest::running_status() const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatRequest.running_status)
  return running_status_.GetNoArena();
}
inline void HeartBeatRequest::set_running_status(const ::std::string& value) {
  
  running_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatRequest.running_status)
}
#if LANG_CXX11
inline void HeartBeatRequest::set_running_status(::std::string&& value) {
  
  running_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.HeartBeatRequest.running_status)
}
#endif
inline void HeartBeatRequest::set_running_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  running_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.HeartBeatRequest.running_status)
}
inline void HeartBeatRequest::set_running_status(const char* value, size_t size) {
  
  running_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.HeartBeatRequest.running_status)
}
inline ::std::string* HeartBeatRequest::mutable_running_status() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatRequest.running_status)
  return running_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRequest::release_running_status() {
  // @@protoc_insertion_point(field_release:configserver.proto.HeartBeatRequest.running_status)
  
  return running_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequest::set_allocated_running_status(::std::string* running_status) {
  if (running_status != NULL) {
    
  } else {
    
  }
  running_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), running_status);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.HeartBeatRequest.running_status)
}

// int64 startup_time = 7;
inline void HeartBeatRequest::clear_startup_time() {
  startup_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HeartBeatRequest::startup_time() const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatRequest.startup_time)
  return startup_time_;
}
inline void HeartBeatRequest::set_startup_time(::google::protobuf::int64 value) {
  
  startup_time_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatRequest.startup_time)
}

// int32 interval = 8;
inline void HeartBeatRequest::clear_interval() {
  interval_ = 0;
}
inline ::google::protobuf::int32 HeartBeatRequest::interval() const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatRequest.interval)
  return interval_;
}
inline void HeartBeatRequest::set_interval(::google::protobuf::int32 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatRequest.interval)
}

// repeated .configserver.proto.ConfigInfo pipeline_configs = 9;
inline int HeartBeatRequest::pipeline_configs_size() const {
  return pipeline_configs_.size();
}
inline void HeartBeatRequest::clear_pipeline_configs() {
  pipeline_configs_.Clear();
}
inline ::configserver::proto::ConfigInfo* HeartBeatRequest::mutable_pipeline_configs(int index) {
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatRequest.pipeline_configs)
  return pipeline_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >*
HeartBeatRequest::mutable_pipeline_configs() {
  // @@protoc_insertion_point(field_mutable_list:configserver.proto.HeartBeatRequest.pipeline_configs)
  return &pipeline_configs_;
}
inline const ::configserver::proto::ConfigInfo& HeartBeatRequest::pipeline_configs(int index) const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatRequest.pipeline_configs)
  return pipeline_configs_.Get(index);
}
inline ::configserver::proto::ConfigInfo* HeartBeatRequest::add_pipeline_configs() {
  // @@protoc_insertion_point(field_add:configserver.proto.HeartBeatRequest.pipeline_configs)
  return pipeline_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >&
HeartBeatRequest::pipeline_configs() const {
  // @@protoc_insertion_point(field_list:configserver.proto.HeartBeatRequest.pipeline_configs)
  return pipeline_configs_;
}

// repeated .configserver.proto.ConfigInfo agent_configs = 10;
inline int HeartBeatRequest::agent_configs_size() const {
  return agent_configs_.size();
}
inline void HeartBeatRequest::clear_agent_configs() {
  agent_configs_.Clear();
}
inline ::configserver::proto::ConfigInfo* HeartBeatRequest::mutable_agent_configs(int index) {
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatRequest.agent_configs)
  return agent_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >*
HeartBeatRequest::mutable_agent_configs() {
  // @@protoc_insertion_point(field_mutable_list:configserver.proto.HeartBeatRequest.agent_configs)
  return &agent_configs_;
}
inline const ::configserver::proto::ConfigInfo& HeartBeatRequest::agent_configs(int index) const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatRequest.agent_configs)
  return agent_configs_.Get(index);
}
inline ::configserver::proto::ConfigInfo* HeartBeatRequest::add_agent_configs() {
  // @@protoc_insertion_point(field_add:configserver.proto.HeartBeatRequest.agent_configs)
  return agent_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >&
HeartBeatRequest::agent_configs() const {
  // @@protoc_insertion_point(field_list:configserver.proto.HeartBeatRequest.agent_configs)
  return agent_configs_;
}

// -------------------------------------------------------------------

// HeartBeatResponse

// string request_id = 1;
inline void HeartBeatResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatResponse::request_id() const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatResponse.request_id)
  return request_id_.GetNoArena();
}
inline void HeartBeatResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatResponse.request_id)
}
#if LANG_CXX11
inline void HeartBeatResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.HeartBeatResponse.request_id)
}
#endif
inline void HeartBeatResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.HeartBeatResponse.request_id)
}
inline void HeartBeatResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.HeartBeatResponse.request_id)
}
inline ::std::string* HeartBeatResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:configserver.proto.HeartBeatResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.HeartBeatResponse.request_id)
}

// .configserver.proto.RespCode code = 2;
inline void HeartBeatResponse::clear_code() {
  code_ = 0;
}
inline ::configserver::proto::RespCode HeartBeatResponse::code() const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatResponse.code)
  return static_cast< ::configserver::proto::RespCode >(code_);
}
inline void HeartBeatResponse::set_code(::configserver::proto::RespCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatResponse.code)
}

// string message = 3;
inline void HeartBeatResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatResponse::message() const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatResponse.message)
  return message_.GetNoArena();
}
inline void HeartBeatResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.HeartBeatResponse.message)
}
#if LANG_CXX11
inline void HeartBeatResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.HeartBeatResponse.message)
}
#endif
inline void HeartBeatResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.HeartBeatResponse.message)
}
inline void HeartBeatResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.HeartBeatResponse.message)
}
inline ::std::string* HeartBeatResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatResponse::release_message() {
  // @@protoc_insertion_point(field_release:configserver.proto.HeartBeatResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.HeartBeatResponse.message)
}

// repeated .configserver.proto.ConfigCheckResult pipeline_check_results = 4;
inline int HeartBeatResponse::pipeline_check_results_size() const {
  return pipeline_check_results_.size();
}
inline void HeartBeatResponse::clear_pipeline_check_results() {
  pipeline_check_results_.Clear();
}
inline ::configserver::proto::ConfigCheckResult* HeartBeatResponse::mutable_pipeline_check_results(int index) {
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatResponse.pipeline_check_results)
  return pipeline_check_results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigCheckResult >*
HeartBeatResponse::mutable_pipeline_check_results() {
  // @@protoc_insertion_point(field_mutable_list:configserver.proto.HeartBeatResponse.pipeline_check_results)
  return &pipeline_check_results_;
}
inline const ::configserver::proto::ConfigCheckResult& HeartBeatResponse::pipeline_check_results(int index) const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatResponse.pipeline_check_results)
  return pipeline_check_results_.Get(index);
}
inline ::configserver::proto::ConfigCheckResult* HeartBeatResponse::add_pipeline_check_results() {
  // @@protoc_insertion_point(field_add:configserver.proto.HeartBeatResponse.pipeline_check_results)
  return pipeline_check_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigCheckResult >&
HeartBeatResponse::pipeline_check_results() const {
  // @@protoc_insertion_point(field_list:configserver.proto.HeartBeatResponse.pipeline_check_results)
  return pipeline_check_results_;
}

// repeated .configserver.proto.ConfigCheckResult agent_check_results = 5;
inline int HeartBeatResponse::agent_check_results_size() const {
  return agent_check_results_.size();
}
inline void HeartBeatResponse::clear_agent_check_results() {
  agent_check_results_.Clear();
}
inline ::configserver::proto::ConfigCheckResult* HeartBeatResponse::mutable_agent_check_results(int index) {
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatResponse.agent_check_results)
  return agent_check_results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigCheckResult >*
HeartBeatResponse::mutable_agent_check_results() {
  // @@protoc_insertion_point(field_mutable_list:configserver.proto.HeartBeatResponse.agent_check_results)
  return &agent_check_results_;
}
inline const ::configserver::proto::ConfigCheckResult& HeartBeatResponse::agent_check_results(int index) const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatResponse.agent_check_results)
  return agent_check_results_.Get(index);
}
inline ::configserver::proto::ConfigCheckResult* HeartBeatResponse::add_agent_check_results() {
  // @@protoc_insertion_point(field_add:configserver.proto.HeartBeatResponse.agent_check_results)
  return agent_check_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigCheckResult >&
HeartBeatResponse::agent_check_results() const {
  // @@protoc_insertion_point(field_list:configserver.proto.HeartBeatResponse.agent_check_results)
  return agent_check_results_;
}

// repeated .configserver.proto.Command custom_commands = 6;
inline int HeartBeatResponse::custom_commands_size() const {
  return custom_commands_.size();
}
inline void HeartBeatResponse::clear_custom_commands() {
  custom_commands_.Clear();
}
inline ::configserver::proto::Command* HeartBeatResponse::mutable_custom_commands(int index) {
  // @@protoc_insertion_point(field_mutable:configserver.proto.HeartBeatResponse.custom_commands)
  return custom_commands_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::configserver::proto::Command >*
HeartBeatResponse::mutable_custom_commands() {
  // @@protoc_insertion_point(field_mutable_list:configserver.proto.HeartBeatResponse.custom_commands)
  return &custom_commands_;
}
inline const ::configserver::proto::Command& HeartBeatResponse::custom_commands(int index) const {
  // @@protoc_insertion_point(field_get:configserver.proto.HeartBeatResponse.custom_commands)
  return custom_commands_.Get(index);
}
inline ::configserver::proto::Command* HeartBeatResponse::add_custom_commands() {
  // @@protoc_insertion_point(field_add:configserver.proto.HeartBeatResponse.custom_commands)
  return custom_commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::configserver::proto::Command >&
HeartBeatResponse::custom_commands() const {
  // @@protoc_insertion_point(field_list:configserver.proto.HeartBeatResponse.custom_commands)
  return custom_commands_;
}

// -------------------------------------------------------------------

// FetchPipelineConfigRequest

// string request_id = 1;
inline void FetchPipelineConfigRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FetchPipelineConfigRequest::request_id() const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchPipelineConfigRequest.request_id)
  return request_id_.GetNoArena();
}
inline void FetchPipelineConfigRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.FetchPipelineConfigRequest.request_id)
}
#if LANG_CXX11
inline void FetchPipelineConfigRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.FetchPipelineConfigRequest.request_id)
}
#endif
inline void FetchPipelineConfigRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.FetchPipelineConfigRequest.request_id)
}
inline void FetchPipelineConfigRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.FetchPipelineConfigRequest.request_id)
}
inline ::std::string* FetchPipelineConfigRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchPipelineConfigRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchPipelineConfigRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:configserver.proto.FetchPipelineConfigRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchPipelineConfigRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.FetchPipelineConfigRequest.request_id)
}

// string agent_id = 2;
inline void FetchPipelineConfigRequest::clear_agent_id() {
  agent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FetchPipelineConfigRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchPipelineConfigRequest.agent_id)
  return agent_id_.GetNoArena();
}
inline void FetchPipelineConfigRequest::set_agent_id(const ::std::string& value) {
  
  agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.FetchPipelineConfigRequest.agent_id)
}
#if LANG_CXX11
inline void FetchPipelineConfigRequest::set_agent_id(::std::string&& value) {
  
  agent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.FetchPipelineConfigRequest.agent_id)
}
#endif
inline void FetchPipelineConfigRequest::set_agent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.FetchPipelineConfigRequest.agent_id)
}
inline void FetchPipelineConfigRequest::set_agent_id(const char* value, size_t size) {
  
  agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.FetchPipelineConfigRequest.agent_id)
}
inline ::std::string* FetchPipelineConfigRequest::mutable_agent_id() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchPipelineConfigRequest.agent_id)
  return agent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchPipelineConfigRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:configserver.proto.FetchPipelineConfigRequest.agent_id)
  
  return agent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchPipelineConfigRequest::set_allocated_agent_id(::std::string* agent_id) {
  if (agent_id != NULL) {
    
  } else {
    
  }
  agent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_id);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.FetchPipelineConfigRequest.agent_id)
}

// repeated .configserver.proto.ConfigInfo req_configs = 3;
inline int FetchPipelineConfigRequest::req_configs_size() const {
  return req_configs_.size();
}
inline void FetchPipelineConfigRequest::clear_req_configs() {
  req_configs_.Clear();
}
inline ::configserver::proto::ConfigInfo* FetchPipelineConfigRequest::mutable_req_configs(int index) {
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchPipelineConfigRequest.req_configs)
  return req_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >*
FetchPipelineConfigRequest::mutable_req_configs() {
  // @@protoc_insertion_point(field_mutable_list:configserver.proto.FetchPipelineConfigRequest.req_configs)
  return &req_configs_;
}
inline const ::configserver::proto::ConfigInfo& FetchPipelineConfigRequest::req_configs(int index) const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchPipelineConfigRequest.req_configs)
  return req_configs_.Get(index);
}
inline ::configserver::proto::ConfigInfo* FetchPipelineConfigRequest::add_req_configs() {
  // @@protoc_insertion_point(field_add:configserver.proto.FetchPipelineConfigRequest.req_configs)
  return req_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >&
FetchPipelineConfigRequest::req_configs() const {
  // @@protoc_insertion_point(field_list:configserver.proto.FetchPipelineConfigRequest.req_configs)
  return req_configs_;
}

// -------------------------------------------------------------------

// FetchPipelineConfigResponse

// string request_id = 1;
inline void FetchPipelineConfigResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FetchPipelineConfigResponse::request_id() const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchPipelineConfigResponse.request_id)
  return request_id_.GetNoArena();
}
inline void FetchPipelineConfigResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.FetchPipelineConfigResponse.request_id)
}
#if LANG_CXX11
inline void FetchPipelineConfigResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.FetchPipelineConfigResponse.request_id)
}
#endif
inline void FetchPipelineConfigResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.FetchPipelineConfigResponse.request_id)
}
inline void FetchPipelineConfigResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.FetchPipelineConfigResponse.request_id)
}
inline ::std::string* FetchPipelineConfigResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchPipelineConfigResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchPipelineConfigResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:configserver.proto.FetchPipelineConfigResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchPipelineConfigResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.FetchPipelineConfigResponse.request_id)
}

// .configserver.proto.RespCode code = 2;
inline void FetchPipelineConfigResponse::clear_code() {
  code_ = 0;
}
inline ::configserver::proto::RespCode FetchPipelineConfigResponse::code() const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchPipelineConfigResponse.code)
  return static_cast< ::configserver::proto::RespCode >(code_);
}
inline void FetchPipelineConfigResponse::set_code(::configserver::proto::RespCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.FetchPipelineConfigResponse.code)
}

// string message = 3;
inline void FetchPipelineConfigResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FetchPipelineConfigResponse::message() const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchPipelineConfigResponse.message)
  return message_.GetNoArena();
}
inline void FetchPipelineConfigResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.FetchPipelineConfigResponse.message)
}
#if LANG_CXX11
inline void FetchPipelineConfigResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.FetchPipelineConfigResponse.message)
}
#endif
inline void FetchPipelineConfigResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.FetchPipelineConfigResponse.message)
}
inline void FetchPipelineConfigResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.FetchPipelineConfigResponse.message)
}
inline ::std::string* FetchPipelineConfigResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchPipelineConfigResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchPipelineConfigResponse::release_message() {
  // @@protoc_insertion_point(field_release:configserver.proto.FetchPipelineConfigResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchPipelineConfigResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.FetchPipelineConfigResponse.message)
}

// repeated .configserver.proto.ConfigDetail config_details = 4;
inline int FetchPipelineConfigResponse::config_details_size() const {
  return config_details_.size();
}
inline void FetchPipelineConfigResponse::clear_config_details() {
  config_details_.Clear();
}
inline ::configserver::proto::ConfigDetail* FetchPipelineConfigResponse::mutable_config_details(int index) {
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchPipelineConfigResponse.config_details)
  return config_details_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigDetail >*
FetchPipelineConfigResponse::mutable_config_details() {
  // @@protoc_insertion_point(field_mutable_list:configserver.proto.FetchPipelineConfigResponse.config_details)
  return &config_details_;
}
inline const ::configserver::proto::ConfigDetail& FetchPipelineConfigResponse::config_details(int index) const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchPipelineConfigResponse.config_details)
  return config_details_.Get(index);
}
inline ::configserver::proto::ConfigDetail* FetchPipelineConfigResponse::add_config_details() {
  // @@protoc_insertion_point(field_add:configserver.proto.FetchPipelineConfigResponse.config_details)
  return config_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigDetail >&
FetchPipelineConfigResponse::config_details() const {
  // @@protoc_insertion_point(field_list:configserver.proto.FetchPipelineConfigResponse.config_details)
  return config_details_;
}

// -------------------------------------------------------------------

// FetchAgentConfigRequest

// string request_id = 1;
inline void FetchAgentConfigRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FetchAgentConfigRequest::request_id() const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchAgentConfigRequest.request_id)
  return request_id_.GetNoArena();
}
inline void FetchAgentConfigRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.FetchAgentConfigRequest.request_id)
}
#if LANG_CXX11
inline void FetchAgentConfigRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.FetchAgentConfigRequest.request_id)
}
#endif
inline void FetchAgentConfigRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.FetchAgentConfigRequest.request_id)
}
inline void FetchAgentConfigRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.FetchAgentConfigRequest.request_id)
}
inline ::std::string* FetchAgentConfigRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchAgentConfigRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchAgentConfigRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:configserver.proto.FetchAgentConfigRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchAgentConfigRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.FetchAgentConfigRequest.request_id)
}

// string agent_id = 2;
inline void FetchAgentConfigRequest::clear_agent_id() {
  agent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FetchAgentConfigRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchAgentConfigRequest.agent_id)
  return agent_id_.GetNoArena();
}
inline void FetchAgentConfigRequest::set_agent_id(const ::std::string& value) {
  
  agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.FetchAgentConfigRequest.agent_id)
}
#if LANG_CXX11
inline void FetchAgentConfigRequest::set_agent_id(::std::string&& value) {
  
  agent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.FetchAgentConfigRequest.agent_id)
}
#endif
inline void FetchAgentConfigRequest::set_agent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.FetchAgentConfigRequest.agent_id)
}
inline void FetchAgentConfigRequest::set_agent_id(const char* value, size_t size) {
  
  agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.FetchAgentConfigRequest.agent_id)
}
inline ::std::string* FetchAgentConfigRequest::mutable_agent_id() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchAgentConfigRequest.agent_id)
  return agent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchAgentConfigRequest::release_agent_id() {
  // @@protoc_insertion_point(field_release:configserver.proto.FetchAgentConfigRequest.agent_id)
  
  return agent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchAgentConfigRequest::set_allocated_agent_id(::std::string* agent_id) {
  if (agent_id != NULL) {
    
  } else {
    
  }
  agent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_id);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.FetchAgentConfigRequest.agent_id)
}

// .configserver.proto.AgentAttributes attributes = 3;
inline bool FetchAgentConfigRequest::has_attributes() const {
  return this != internal_default_instance() && attributes_ != NULL;
}
inline void FetchAgentConfigRequest::clear_attributes() {
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) {
    delete attributes_;
  }
  attributes_ = NULL;
}
inline const ::configserver::proto::AgentAttributes& FetchAgentConfigRequest::_internal_attributes() const {
  return *attributes_;
}
inline const ::configserver::proto::AgentAttributes& FetchAgentConfigRequest::attributes() const {
  const ::configserver::proto::AgentAttributes* p = attributes_;
  // @@protoc_insertion_point(field_get:configserver.proto.FetchAgentConfigRequest.attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::configserver::proto::AgentAttributes*>(
      &::configserver::proto::_AgentAttributes_default_instance_);
}
inline ::configserver::proto::AgentAttributes* FetchAgentConfigRequest::release_attributes() {
  // @@protoc_insertion_point(field_release:configserver.proto.FetchAgentConfigRequest.attributes)
  
  ::configserver::proto::AgentAttributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline ::configserver::proto::AgentAttributes* FetchAgentConfigRequest::mutable_attributes() {
  
  if (attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::configserver::proto::AgentAttributes>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchAgentConfigRequest.attributes)
  return attributes_;
}
inline void FetchAgentConfigRequest::set_allocated_attributes(::configserver::proto::AgentAttributes* attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete attributes_;
  }
  if (attributes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.FetchAgentConfigRequest.attributes)
}

// repeated .configserver.proto.ConfigInfo req_configs = 4;
inline int FetchAgentConfigRequest::req_configs_size() const {
  return req_configs_.size();
}
inline void FetchAgentConfigRequest::clear_req_configs() {
  req_configs_.Clear();
}
inline ::configserver::proto::ConfigInfo* FetchAgentConfigRequest::mutable_req_configs(int index) {
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchAgentConfigRequest.req_configs)
  return req_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >*
FetchAgentConfigRequest::mutable_req_configs() {
  // @@protoc_insertion_point(field_mutable_list:configserver.proto.FetchAgentConfigRequest.req_configs)
  return &req_configs_;
}
inline const ::configserver::proto::ConfigInfo& FetchAgentConfigRequest::req_configs(int index) const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchAgentConfigRequest.req_configs)
  return req_configs_.Get(index);
}
inline ::configserver::proto::ConfigInfo* FetchAgentConfigRequest::add_req_configs() {
  // @@protoc_insertion_point(field_add:configserver.proto.FetchAgentConfigRequest.req_configs)
  return req_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigInfo >&
FetchAgentConfigRequest::req_configs() const {
  // @@protoc_insertion_point(field_list:configserver.proto.FetchAgentConfigRequest.req_configs)
  return req_configs_;
}

// -------------------------------------------------------------------

// FetchAgentConfigResponse

// string request_id = 1;
inline void FetchAgentConfigResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FetchAgentConfigResponse::request_id() const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchAgentConfigResponse.request_id)
  return request_id_.GetNoArena();
}
inline void FetchAgentConfigResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.FetchAgentConfigResponse.request_id)
}
#if LANG_CXX11
inline void FetchAgentConfigResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.FetchAgentConfigResponse.request_id)
}
#endif
inline void FetchAgentConfigResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.FetchAgentConfigResponse.request_id)
}
inline void FetchAgentConfigResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.FetchAgentConfigResponse.request_id)
}
inline ::std::string* FetchAgentConfigResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchAgentConfigResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchAgentConfigResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:configserver.proto.FetchAgentConfigResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchAgentConfigResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.FetchAgentConfigResponse.request_id)
}

// .configserver.proto.RespCode code = 2;
inline void FetchAgentConfigResponse::clear_code() {
  code_ = 0;
}
inline ::configserver::proto::RespCode FetchAgentConfigResponse::code() const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchAgentConfigResponse.code)
  return static_cast< ::configserver::proto::RespCode >(code_);
}
inline void FetchAgentConfigResponse::set_code(::configserver::proto::RespCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:configserver.proto.FetchAgentConfigResponse.code)
}

// string message = 3;
inline void FetchAgentConfigResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FetchAgentConfigResponse::message() const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchAgentConfigResponse.message)
  return message_.GetNoArena();
}
inline void FetchAgentConfigResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configserver.proto.FetchAgentConfigResponse.message)
}
#if LANG_CXX11
inline void FetchAgentConfigResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configserver.proto.FetchAgentConfigResponse.message)
}
#endif
inline void FetchAgentConfigResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configserver.proto.FetchAgentConfigResponse.message)
}
inline void FetchAgentConfigResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configserver.proto.FetchAgentConfigResponse.message)
}
inline ::std::string* FetchAgentConfigResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchAgentConfigResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchAgentConfigResponse::release_message() {
  // @@protoc_insertion_point(field_release:configserver.proto.FetchAgentConfigResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchAgentConfigResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:configserver.proto.FetchAgentConfigResponse.message)
}

// repeated .configserver.proto.ConfigDetail config_details = 4;
inline int FetchAgentConfigResponse::config_details_size() const {
  return config_details_.size();
}
inline void FetchAgentConfigResponse::clear_config_details() {
  config_details_.Clear();
}
inline ::configserver::proto::ConfigDetail* FetchAgentConfigResponse::mutable_config_details(int index) {
  // @@protoc_insertion_point(field_mutable:configserver.proto.FetchAgentConfigResponse.config_details)
  return config_details_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigDetail >*
FetchAgentConfigResponse::mutable_config_details() {
  // @@protoc_insertion_point(field_mutable_list:configserver.proto.FetchAgentConfigResponse.config_details)
  return &config_details_;
}
inline const ::configserver::proto::ConfigDetail& FetchAgentConfigResponse::config_details(int index) const {
  // @@protoc_insertion_point(field_get:configserver.proto.FetchAgentConfigResponse.config_details)
  return config_details_.Get(index);
}
inline ::configserver::proto::ConfigDetail* FetchAgentConfigResponse::add_config_details() {
  // @@protoc_insertion_point(field_add:configserver.proto.FetchAgentConfigResponse.config_details)
  return config_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::configserver::proto::ConfigDetail >&
FetchAgentConfigResponse::config_details() const {
  // @@protoc_insertion_point(field_list:configserver.proto.FetchAgentConfigResponse.config_details)
  return config_details_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace configserver

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::configserver::proto::ConfigType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::configserver::proto::ConfigType>() {
  return ::configserver::proto::ConfigType_descriptor();
}
template <> struct is_proto_enum< ::configserver::proto::CheckStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::configserver::proto::CheckStatus>() {
  return ::configserver::proto::CheckStatus_descriptor();
}
template <> struct is_proto_enum< ::configserver::proto::RespCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::configserver::proto::RespCode>() {
  return ::configserver::proto::RespCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_agent_2eproto
