// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MeasureBatches.proto

#include "MeasureBatches.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_MeasureBatches_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MeasureBatches_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Measure;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MeasureBatches_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MeasureBatch_CommonTagsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MeasureBatches_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Measures_LabelsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MeasureBatches_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MeasureBatch;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MeasureBatches_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Measures;
}  // namespace protobuf_MeasureBatches_2eproto
namespace proto {
class MeasureBatchesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeasureBatches>
      _instance;
} _MeasureBatches_default_instance_;
class MeasureBatch_CommonTagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeasureBatch_CommonTagsEntry_DoNotUse>
      _instance;
} _MeasureBatch_CommonTagsEntry_DoNotUse_default_instance_;
class MeasureBatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeasureBatch>
      _instance;
} _MeasureBatch_default_instance_;
class Measures_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measures_LabelsEntry_DoNotUse>
      _instance;
} _Measures_LabelsEntry_DoNotUse_default_instance_;
class MeasuresDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measures>
      _instance;
} _Measures_default_instance_;
class MeasureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measure>
      _instance;
} _Measure_default_instance_;
}  // namespace proto
namespace protobuf_MeasureBatches_2eproto {
static void InitDefaultsMeasureBatches() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_MeasureBatches_default_instance_;
    new (ptr) ::proto::MeasureBatches();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::MeasureBatches::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MeasureBatches =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMeasureBatches}, {
      &protobuf_MeasureBatches_2eproto::scc_info_MeasureBatch.base,}};

static void InitDefaultsMeasureBatch_CommonTagsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_MeasureBatch_CommonTagsEntry_DoNotUse_default_instance_;
    new (ptr) ::proto::MeasureBatch_CommonTagsEntry_DoNotUse();
  }
  ::proto::MeasureBatch_CommonTagsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MeasureBatch_CommonTagsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeasureBatch_CommonTagsEntry_DoNotUse}, {}};

static void InitDefaultsMeasureBatch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_MeasureBatch_default_instance_;
    new (ptr) ::proto::MeasureBatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::MeasureBatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MeasureBatch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMeasureBatch}, {
      &protobuf_MeasureBatches_2eproto::scc_info_MeasureBatch_CommonTagsEntry_DoNotUse.base,
      &protobuf_MeasureBatches_2eproto::scc_info_Measures.base,}};

static void InitDefaultsMeasures_LabelsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_Measures_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::proto::Measures_LabelsEntry_DoNotUse();
  }
  ::proto::Measures_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Measures_LabelsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeasures_LabelsEntry_DoNotUse}, {}};

static void InitDefaultsMeasures() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_Measures_default_instance_;
    new (ptr) ::proto::Measures();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::Measures::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Measures =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMeasures}, {
      &protobuf_MeasureBatches_2eproto::scc_info_Measures_LabelsEntry_DoNotUse.base,
      &protobuf_MeasureBatches_2eproto::scc_info_Measure.base,}};

static void InitDefaultsMeasure() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_Measure_default_instance_;
    new (ptr) ::proto::Measure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::Measure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Measure =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeasure}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MeasureBatches.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MeasureBatch_CommonTagsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MeasureBatch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Measures_LabelsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Measures.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Measure.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatches, measurebatches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch_CommonTagsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch_CommonTagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch_CommonTagsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch_CommonTagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch, commontags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::MeasureBatch, measures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measures_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measures_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measures_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measures_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measures, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measures, measures_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measure, valuetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measure, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measure, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measure, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::Measure, desc_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::MeasureBatches)},
  { 6, 13, sizeof(::proto::MeasureBatch_CommonTagsEntry_DoNotUse)},
  { 15, -1, sizeof(::proto::MeasureBatch)},
  { 27, 34, sizeof(::proto::Measures_LabelsEntry_DoNotUse)},
  { 36, -1, sizeof(::proto::Measures)},
  { 43, -1, sizeof(::proto::Measure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_MeasureBatches_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_MeasureBatch_CommonTagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_MeasureBatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_Measures_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_Measures_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_Measure_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "MeasureBatches.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024MeasureBatches.proto\022\005proto\"=\n\016Measure"
      "Batches\022+\n\016measureBatches\030\001 \003(\0132\023.proto."
      "MeasureBatch\"\343\001\n\014MeasureBatch\022\017\n\007version"
      "\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\014\n\004time\030\003 \001(\003\022\013\n\003pi"
      "d\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\0227\n\ncommonTags\030\006 \003(\0132"
      "#.proto.MeasureBatch.CommonTagsEntry\022!\n\010"
      "measures\030\007 \003(\0132\017.proto.Measures\0321\n\017Commo"
      "nTagsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
      "8\001\"\210\001\n\010Measures\022+\n\006labels\030\001 \003(\0132\033.proto."
      "Measures.LabelsEntry\022 \n\010measures\030\002 \003(\0132\016"
      ".proto.Measure\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001"
      "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"f\n\007Measure\022\021\n\tvalu"
      "eType\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\001"
      "\022\035\n\004unit\030\004 \001(\0162\017.proto.EnumUnit\022\014\n\004desc\030"
      "\005 \001(\t*b\n\010EnumUnit\022\013\n\007UNKNOWN\020\000\022\t\n\005COUNT\020"
      "\001\022\t\n\005RATIO\020\002\022\013\n\007PERCENT\020\003\022\010\n\004BYTE\020\004\022\n\n\006S"
      "ECOND\020\005\022\020\n\014MILLISECONDS\020\006B\rZ\013../protobuf"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 688);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MeasureBatches.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_MeasureBatches_2eproto
namespace proto {
const ::google::protobuf::EnumDescriptor* EnumUnit_descriptor() {
  protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MeasureBatches_2eproto::file_level_enum_descriptors[0];
}
bool EnumUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MeasureBatches::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeasureBatches::kMeasureBatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeasureBatches::MeasureBatches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MeasureBatches_2eproto::scc_info_MeasureBatches.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MeasureBatches)
}
MeasureBatches::MeasureBatches(const MeasureBatches& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      measurebatches_(from.measurebatches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.MeasureBatches)
}

void MeasureBatches::SharedCtor() {
}

MeasureBatches::~MeasureBatches() {
  // @@protoc_insertion_point(destructor:proto.MeasureBatches)
  SharedDtor();
}

void MeasureBatches::SharedDtor() {
}

void MeasureBatches::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MeasureBatches::descriptor() {
  ::protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MeasureBatches_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeasureBatches& MeasureBatches::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MeasureBatches_2eproto::scc_info_MeasureBatches.base);
  return *internal_default_instance();
}


void MeasureBatches::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MeasureBatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  measurebatches_.Clear();
  _internal_metadata_.Clear();
}

bool MeasureBatches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MeasureBatches)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.MeasureBatch measureBatches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_measurebatches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MeasureBatches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MeasureBatches)
  return false;
#undef DO_
}

void MeasureBatches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MeasureBatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.MeasureBatch measureBatches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurebatches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->measurebatches(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MeasureBatches)
}

::google::protobuf::uint8* MeasureBatches::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MeasureBatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.MeasureBatch measureBatches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurebatches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->measurebatches(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MeasureBatches)
  return target;
}

size_t MeasureBatches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MeasureBatches)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.MeasureBatch measureBatches = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->measurebatches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->measurebatches(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeasureBatches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MeasureBatches)
  GOOGLE_DCHECK_NE(&from, this);
  const MeasureBatches* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeasureBatches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MeasureBatches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MeasureBatches)
    MergeFrom(*source);
  }
}

void MeasureBatches::MergeFrom(const MeasureBatches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MeasureBatches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  measurebatches_.MergeFrom(from.measurebatches_);
}

void MeasureBatches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MeasureBatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasureBatches::CopyFrom(const MeasureBatches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MeasureBatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureBatches::IsInitialized() const {
  return true;
}

void MeasureBatches::Swap(MeasureBatches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeasureBatches::InternalSwap(MeasureBatches* other) {
  using std::swap;
  CastToBase(&measurebatches_)->InternalSwap(CastToBase(&other->measurebatches_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MeasureBatches::GetMetadata() const {
  protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MeasureBatches_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

MeasureBatch_CommonTagsEntry_DoNotUse::MeasureBatch_CommonTagsEntry_DoNotUse() {}
MeasureBatch_CommonTagsEntry_DoNotUse::MeasureBatch_CommonTagsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MeasureBatch_CommonTagsEntry_DoNotUse::MergeFrom(const MeasureBatch_CommonTagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MeasureBatch_CommonTagsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MeasureBatches_2eproto::file_level_metadata[1];
}
void MeasureBatch_CommonTagsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void MeasureBatch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeasureBatch::kVersionFieldNumber;
const int MeasureBatch::kTypeFieldNumber;
const int MeasureBatch::kTimeFieldNumber;
const int MeasureBatch::kPidFieldNumber;
const int MeasureBatch::kIpFieldNumber;
const int MeasureBatch::kCommonTagsFieldNumber;
const int MeasureBatch::kMeasuresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeasureBatch::MeasureBatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MeasureBatches_2eproto::scc_info_MeasureBatch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MeasureBatch)
}
MeasureBatch::MeasureBatch(const MeasureBatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      measures_(from.measures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  commontags_.MergeFrom(from.commontags_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pid().size() > 0) {
    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:proto.MeasureBatch)
}

void MeasureBatch::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
}

MeasureBatch::~MeasureBatch() {
  // @@protoc_insertion_point(destructor:proto.MeasureBatch)
  SharedDtor();
}

void MeasureBatch::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MeasureBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MeasureBatch::descriptor() {
  ::protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MeasureBatches_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeasureBatch& MeasureBatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MeasureBatches_2eproto::scc_info_MeasureBatch.base);
  return *internal_default_instance();
}


void MeasureBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MeasureBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commontags_.Clear();
  measures_.Clear();
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool MeasureBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MeasureBatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MeasureBatch.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MeasureBatch.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pid().data(), static_cast<int>(this->pid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MeasureBatch.pid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MeasureBatch.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> commonTags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          MeasureBatch_CommonTagsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MeasureBatch_CommonTagsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&commontags_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MeasureBatch.CommonTagsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.MeasureBatch.CommonTagsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.Measures measures = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_measures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MeasureBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MeasureBatch)
  return false;
#undef DO_
}

void MeasureBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MeasureBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MeasureBatch.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MeasureBatch.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // string pid = 4;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MeasureBatch.pid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pid(), output);
  }

  // string ip = 5;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MeasureBatch.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  // map<string, string> commonTags = 6;
  if (!this->commontags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "proto.MeasureBatch.CommonTagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "proto.MeasureBatch.CommonTagsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->commontags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->commontags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->commontags().begin();
          it != this->commontags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MeasureBatch_CommonTagsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(commontags_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MeasureBatch_CommonTagsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->commontags().begin();
          it != this->commontags().end(); ++it) {
        entry.reset(commontags_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .proto.Measures measures = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measures_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->measures(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MeasureBatch)
}

::google::protobuf::uint8* MeasureBatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MeasureBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MeasureBatch.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MeasureBatch.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // string pid = 4;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), static_cast<int>(this->pid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MeasureBatch.pid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pid(), target);
  }

  // string ip = 5;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.MeasureBatch.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // map<string, string> commonTags = 6;
  if (!this->commontags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "proto.MeasureBatch.CommonTagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "proto.MeasureBatch.CommonTagsEntry.value");
      }
    };

    if (deterministic &&
        this->commontags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->commontags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->commontags().begin();
          it != this->commontags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MeasureBatch_CommonTagsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(commontags_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MeasureBatch_CommonTagsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->commontags().begin();
          it != this->commontags().end(); ++it) {
        entry.reset(commontags_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .proto.Measures measures = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measures_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->measures(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MeasureBatch)
  return target;
}

size_t MeasureBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MeasureBatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> commonTags = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->commontags_size());
  {
    ::std::unique_ptr<MeasureBatch_CommonTagsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->commontags().begin();
        it != this->commontags().end(); ++it) {
      entry.reset(commontags_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .proto.Measures measures = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->measures_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->measures(static_cast<int>(i)));
    }
  }

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string pid = 4;
  if (this->pid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pid());
  }

  // string ip = 5;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int64 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeasureBatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MeasureBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const MeasureBatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeasureBatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MeasureBatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MeasureBatch)
    MergeFrom(*source);
  }
}

void MeasureBatch::MergeFrom(const MeasureBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MeasureBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commontags_.MergeFrom(from.commontags_);
  measures_.MergeFrom(from.measures_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.pid().size() > 0) {

    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void MeasureBatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MeasureBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasureBatch::CopyFrom(const MeasureBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MeasureBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureBatch::IsInitialized() const {
  return true;
}

void MeasureBatch::Swap(MeasureBatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeasureBatch::InternalSwap(MeasureBatch* other) {
  using std::swap;
  commontags_.Swap(&other->commontags_);
  CastToBase(&measures_)->InternalSwap(CastToBase(&other->measures_));
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pid_.Swap(&other->pid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MeasureBatch::GetMetadata() const {
  protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MeasureBatches_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Measures_LabelsEntry_DoNotUse::Measures_LabelsEntry_DoNotUse() {}
Measures_LabelsEntry_DoNotUse::Measures_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Measures_LabelsEntry_DoNotUse::MergeFrom(const Measures_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Measures_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MeasureBatches_2eproto::file_level_metadata[3];
}
void Measures_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Measures::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measures::kLabelsFieldNumber;
const int Measures::kMeasuresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measures::Measures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MeasureBatches_2eproto::scc_info_Measures.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Measures)
}
Measures::Measures(const Measures& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      measures_(from.measures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  // @@protoc_insertion_point(copy_constructor:proto.Measures)
}

void Measures::SharedCtor() {
}

Measures::~Measures() {
  // @@protoc_insertion_point(destructor:proto.Measures)
  SharedDtor();
}

void Measures::SharedDtor() {
}

void Measures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Measures::descriptor() {
  ::protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MeasureBatches_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Measures& Measures::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MeasureBatches_2eproto::scc_info_Measures.base);
  return *internal_default_instance();
}


void Measures::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Measures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  measures_.Clear();
  _internal_metadata_.Clear();
}

bool Measures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Measures)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          Measures_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Measures_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Measures.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Measures.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.Measure measures = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_measures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Measures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Measures)
  return false;
#undef DO_
}

void Measures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Measures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "proto.Measures.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "proto.Measures.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Measures_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Measures_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .proto.Measure measures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measures_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->measures(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Measures)
}

::google::protobuf::uint8* Measures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Measures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "proto.Measures.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "proto.Measures.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Measures_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Measures_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .proto.Measure measures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measures_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->measures(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Measures)
  return target;
}

size_t Measures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Measures)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> labels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<Measures_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .proto.Measure measures = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->measures_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->measures(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Measures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Measures)
  GOOGLE_DCHECK_NE(&from, this);
  const Measures* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Measures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Measures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Measures)
    MergeFrom(*source);
  }
}

void Measures::MergeFrom(const Measures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Measures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  measures_.MergeFrom(from.measures_);
}

void Measures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Measures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measures::CopyFrom(const Measures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Measures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measures::IsInitialized() const {
  return true;
}

void Measures::Swap(Measures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measures::InternalSwap(Measures* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  CastToBase(&measures_)->InternalSwap(CastToBase(&other->measures_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Measures::GetMetadata() const {
  protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MeasureBatches_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Measure::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measure::kValueTypeFieldNumber;
const int Measure::kNameFieldNumber;
const int Measure::kValueFieldNumber;
const int Measure::kUnitFieldNumber;
const int Measure::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measure::Measure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MeasureBatches_2eproto::scc_info_Measure.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Measure)
}
Measure::Measure(const Measure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  valuetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.valuetype().size() > 0) {
    valuetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valuetype_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:proto.Measure)
}

void Measure::SharedCtor() {
  valuetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unit_));
}

Measure::~Measure() {
  // @@protoc_insertion_point(destructor:proto.Measure)
  SharedDtor();
}

void Measure::SharedDtor() {
  valuetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Measure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Measure::descriptor() {
  ::protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MeasureBatches_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Measure& Measure::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MeasureBatches_2eproto::scc_info_Measure.base);
  return *internal_default_instance();
}


void Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valuetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unit_));
  _internal_metadata_.Clear();
}

bool Measure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Measure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string valueType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valuetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->valuetype().data(), static_cast<int>(this->valuetype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Measure.valueType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Measure.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EnumUnit unit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unit(static_cast< ::proto::EnumUnit >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Measure.desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Measure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Measure)
  return false;
#undef DO_
}

void Measure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string valueType = 1;
  if (this->valuetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valuetype().data(), static_cast<int>(this->valuetype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Measure.valueType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->valuetype(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Measure.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // double value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // .proto.EnumUnit unit = 4;
  if (this->unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->unit(), output);
  }

  // string desc = 5;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Measure.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->desc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Measure)
}

::google::protobuf::uint8* Measure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string valueType = 1;
  if (this->valuetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valuetype().data(), static_cast<int>(this->valuetype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Measure.valueType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->valuetype(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Measure.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // double value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // .proto.EnumUnit unit = 4;
  if (this->unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->unit(), target);
  }

  // string desc = 5;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Measure.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Measure)
  return target;
}

size_t Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Measure)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string valueType = 1;
  if (this->valuetype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->valuetype());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string desc = 5;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  // double value = 3;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // .proto.EnumUnit unit = 4;
  if (this->unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Measure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  const Measure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Measure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Measure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Measure)
    MergeFrom(*source);
  }
}

void Measure::MergeFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.valuetype().size() > 0) {

    valuetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valuetype_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.unit() != 0) {
    set_unit(from.unit());
  }
}

void Measure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measure::CopyFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measure::IsInitialized() const {
  return true;
}

void Measure::Swap(Measure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measure::InternalSwap(Measure* other) {
  using std::swap;
  valuetype_.Swap(&other->valuetype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(unit_, other->unit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Measure::GetMetadata() const {
  protobuf_MeasureBatches_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MeasureBatches_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::MeasureBatches* Arena::CreateMaybeMessage< ::proto::MeasureBatches >(Arena* arena) {
  return Arena::CreateInternal< ::proto::MeasureBatches >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::MeasureBatch_CommonTagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto::MeasureBatch_CommonTagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::MeasureBatch_CommonTagsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::MeasureBatch* Arena::CreateMaybeMessage< ::proto::MeasureBatch >(Arena* arena) {
  return Arena::CreateInternal< ::proto::MeasureBatch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::Measures_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto::Measures_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::Measures_LabelsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::Measures* Arena::CreateMaybeMessage< ::proto::Measures >(Arena* arena) {
  return Arena::CreateInternal< ::proto::Measures >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::Measure* Arena::CreateMaybeMessage< ::proto::Measure >(Arena* arena) {
  return Arena::CreateInternal< ::proto::Measure >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
