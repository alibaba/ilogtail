// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MeasureBatches.proto

#ifndef PROTOBUF_INCLUDED_MeasureBatches_2eproto
#define PROTOBUF_INCLUDED_MeasureBatches_2eproto

#include <google/protobuf/stubs/common.h>

#include <string>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/map.h> // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MeasureBatches_2eproto

namespace protobuf_MeasureBatches_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
    static const ::google::protobuf::internal::ParseTableField entries[];
    static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    static const ::google::protobuf::internal::ParseTable schema[6];
    static const ::google::protobuf::internal::FieldMetadata field_metadata[];
    static const ::google::protobuf::internal::SerializationTable serialization_table[];
    static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
} // namespace protobuf_MeasureBatches_2eproto
namespace proto {
class Measure;
class MeasureDefaultTypeInternal;
extern MeasureDefaultTypeInternal _Measure_default_instance_;
class MeasureBatch;
class MeasureBatchDefaultTypeInternal;
extern MeasureBatchDefaultTypeInternal _MeasureBatch_default_instance_;
class MeasureBatch_CommonTagsEntry_DoNotUse;
class MeasureBatch_CommonTagsEntry_DoNotUseDefaultTypeInternal;
extern MeasureBatch_CommonTagsEntry_DoNotUseDefaultTypeInternal
    _MeasureBatch_CommonTagsEntry_DoNotUse_default_instance_;
class MeasureBatches;
class MeasureBatchesDefaultTypeInternal;
extern MeasureBatchesDefaultTypeInternal _MeasureBatches_default_instance_;
class Measures;
class MeasuresDefaultTypeInternal;
extern MeasuresDefaultTypeInternal _Measures_default_instance_;
class Measures_LabelsEntry_DoNotUse;
class Measures_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Measures_LabelsEntry_DoNotUseDefaultTypeInternal _Measures_LabelsEntry_DoNotUse_default_instance_;
} // namespace proto
namespace google {
namespace protobuf {
    template <>
    ::proto::Measure* Arena::CreateMaybeMessage<::proto::Measure>(Arena*);
    template <>
    ::proto::MeasureBatch* Arena::CreateMaybeMessage<::proto::MeasureBatch>(Arena*);
    template <>
    ::proto::MeasureBatch_CommonTagsEntry_DoNotUse*
    Arena::CreateMaybeMessage<::proto::MeasureBatch_CommonTagsEntry_DoNotUse>(Arena*);
    template <>
    ::proto::MeasureBatches* Arena::CreateMaybeMessage<::proto::MeasureBatches>(Arena*);
    template <>
    ::proto::Measures* Arena::CreateMaybeMessage<::proto::Measures>(Arena*);
    template <>
    ::proto::Measures_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::proto::Measures_LabelsEntry_DoNotUse>(Arena*);
} // namespace protobuf
} // namespace google
namespace proto {

enum EnumUnit {
    UNKNOWN = 0,
    COUNT = 1,
    RATIO = 2,
    PERCENT = 3,
    BYTE = 4,
    SECOND = 5,
    MILLISECONDS = 6,
    EnumUnit_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    EnumUnit_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnumUnit_IsValid(int value);
const EnumUnit EnumUnit_MIN = UNKNOWN;
const EnumUnit EnumUnit_MAX = MILLISECONDS;
const int EnumUnit_ARRAYSIZE = EnumUnit_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumUnit_descriptor();
inline const ::std::string& EnumUnit_Name(EnumUnit value) {
    return ::google::protobuf::internal::NameOfEnum(EnumUnit_descriptor(), value);
}
inline bool EnumUnit_Parse(const ::std::string& name, EnumUnit* value) {
    return ::google::protobuf::internal::ParseNamedEnum<EnumUnit>(EnumUnit_descriptor(), name, value);
}
// ===================================================================

class MeasureBatches
    : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MeasureBatches) */ {
public:
    MeasureBatches();
    virtual ~MeasureBatches();

    MeasureBatches(const MeasureBatches& from);

    inline MeasureBatches& operator=(const MeasureBatches& from) {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    MeasureBatches(MeasureBatches&& from) noexcept : MeasureBatches() { *this = ::std::move(from); }

    inline MeasureBatches& operator=(MeasureBatches&& from) noexcept {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const MeasureBatches& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const MeasureBatches* internal_default_instance() {
        return reinterpret_cast<const MeasureBatches*>(&_MeasureBatches_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    void Swap(MeasureBatches* other);
    friend void swap(MeasureBatches& a, MeasureBatches& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline MeasureBatches* New() const final { return CreateMaybeMessage<MeasureBatches>(NULL); }

    MeasureBatches* New(::google::protobuf::Arena* arena) const final {
        return CreateMaybeMessage<MeasureBatches>(arena);
    }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const MeasureBatches& from);
    void MergeFrom(const MeasureBatches& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(MeasureBatches* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .proto.MeasureBatch measureBatches = 1;
    int measurebatches_size() const;
    void clear_measurebatches();
    static const int kMeasureBatchesFieldNumber = 1;
    ::proto::MeasureBatch* mutable_measurebatches(int index);
    ::google::protobuf::RepeatedPtrField<::proto::MeasureBatch>* mutable_measurebatches();
    const ::proto::MeasureBatch& measurebatches(int index) const;
    ::proto::MeasureBatch* add_measurebatches();
    const ::google::protobuf::RepeatedPtrField<::proto::MeasureBatch>& measurebatches() const;

    // @@protoc_insertion_point(class_scope:proto.MeasureBatches)
private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField<::proto::MeasureBatch> measurebatches_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_MeasureBatches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MeasureBatch_CommonTagsEntry_DoNotUse
    : public ::google::protobuf::internal::MapEntry<MeasureBatch_CommonTagsEntry_DoNotUse,
                                                    ::std::string,
                                                    ::std::string,
                                                    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                                    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                                    0> {
public:
    typedef ::google::protobuf::internal::MapEntry<MeasureBatch_CommonTagsEntry_DoNotUse,
                                                   ::std::string,
                                                   ::std::string,
                                                   ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                                   ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                                   0>
        SuperType;
    MeasureBatch_CommonTagsEntry_DoNotUse();
    MeasureBatch_CommonTagsEntry_DoNotUse(::google::protobuf::Arena* arena);
    void MergeFrom(const MeasureBatch_CommonTagsEntry_DoNotUse& other);
    static const MeasureBatch_CommonTagsEntry_DoNotUse* internal_default_instance() {
        return reinterpret_cast<const MeasureBatch_CommonTagsEntry_DoNotUse*>(
            &_MeasureBatch_CommonTagsEntry_DoNotUse_default_instance_);
    }
    void MergeFrom(const ::google::protobuf::Message& other) final;
    ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class MeasureBatch
    : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MeasureBatch) */ {
public:
    MeasureBatch();
    virtual ~MeasureBatch();

    MeasureBatch(const MeasureBatch& from);

    inline MeasureBatch& operator=(const MeasureBatch& from) {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    MeasureBatch(MeasureBatch&& from) noexcept : MeasureBatch() { *this = ::std::move(from); }

    inline MeasureBatch& operator=(MeasureBatch&& from) noexcept {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const MeasureBatch& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const MeasureBatch* internal_default_instance() {
        return reinterpret_cast<const MeasureBatch*>(&_MeasureBatch_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;

    void Swap(MeasureBatch* other);
    friend void swap(MeasureBatch& a, MeasureBatch& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline MeasureBatch* New() const final { return CreateMaybeMessage<MeasureBatch>(NULL); }

    MeasureBatch* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage<MeasureBatch>(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const MeasureBatch& from);
    void MergeFrom(const MeasureBatch& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(MeasureBatch* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------


    // accessors -------------------------------------------------------

    // map<string, string> commonTags = 6;
    int commontags_size() const;
    void clear_commontags();
    static const int kCommonTagsFieldNumber = 6;
    const ::google::protobuf::Map<::std::string, ::std::string>& commontags() const;
    ::google::protobuf::Map<::std::string, ::std::string>* mutable_commontags();

    // repeated .proto.Measures measures = 7;
    int measures_size() const;
    void clear_measures();
    static const int kMeasuresFieldNumber = 7;
    ::proto::Measures* mutable_measures(int index);
    ::google::protobuf::RepeatedPtrField<::proto::Measures>* mutable_measures();
    const ::proto::Measures& measures(int index) const;
    ::proto::Measures* add_measures();
    const ::google::protobuf::RepeatedPtrField<::proto::Measures>& measures() const;

    // string version = 1;
    void clear_version();
    static const int kVersionFieldNumber = 1;
    const ::std::string& version() const;
    void set_version(const ::std::string& value);
#if LANG_CXX11
    void set_version(::std::string&& value);
#endif
    void set_version(const char* value);
    void set_version(const char* value, size_t size);
    ::std::string* mutable_version();
    ::std::string* release_version();
    void set_allocated_version(::std::string* version);

    // string type = 2;
    void clear_type();
    static const int kTypeFieldNumber = 2;
    const ::std::string& type() const;
    void set_type(const ::std::string& value);
#if LANG_CXX11
    void set_type(::std::string&& value);
#endif
    void set_type(const char* value);
    void set_type(const char* value, size_t size);
    ::std::string* mutable_type();
    ::std::string* release_type();
    void set_allocated_type(::std::string* type);

    // string pid = 4;
    void clear_pid();
    static const int kPidFieldNumber = 4;
    const ::std::string& pid() const;
    void set_pid(const ::std::string& value);
#if LANG_CXX11
    void set_pid(::std::string&& value);
#endif
    void set_pid(const char* value);
    void set_pid(const char* value, size_t size);
    ::std::string* mutable_pid();
    ::std::string* release_pid();
    void set_allocated_pid(::std::string* pid);

    // string ip = 5;
    void clear_ip();
    static const int kIpFieldNumber = 5;
    const ::std::string& ip() const;
    void set_ip(const ::std::string& value);
#if LANG_CXX11
    void set_ip(::std::string&& value);
#endif
    void set_ip(const char* value);
    void set_ip(const char* value, size_t size);
    ::std::string* mutable_ip();
    ::std::string* release_ip();
    void set_allocated_ip(::std::string* ip);

    // int64 time = 3;
    void clear_time();
    static const int kTimeFieldNumber = 3;
    ::google::protobuf::int64 time() const;
    void set_time(::google::protobuf::int64 value);

    // @@protoc_insertion_point(class_scope:proto.MeasureBatch)
private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::MapField<MeasureBatch_CommonTagsEntry_DoNotUse,
                                           ::std::string,
                                           ::std::string,
                                           ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                           ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                           0>
        commontags_;
    ::google::protobuf::RepeatedPtrField<::proto::Measures> measures_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr pid_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::int64 time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_MeasureBatches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Measures_LabelsEntry_DoNotUse
    : public ::google::protobuf::internal::MapEntry<Measures_LabelsEntry_DoNotUse,
                                                    ::std::string,
                                                    ::std::string,
                                                    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                                    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                                    0> {
public:
    typedef ::google::protobuf::internal::MapEntry<Measures_LabelsEntry_DoNotUse,
                                                   ::std::string,
                                                   ::std::string,
                                                   ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                                   ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                                   0>
        SuperType;
    Measures_LabelsEntry_DoNotUse();
    Measures_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
    void MergeFrom(const Measures_LabelsEntry_DoNotUse& other);
    static const Measures_LabelsEntry_DoNotUse* internal_default_instance() {
        return reinterpret_cast<const Measures_LabelsEntry_DoNotUse*>(
            &_Measures_LabelsEntry_DoNotUse_default_instance_);
    }
    void MergeFrom(const ::google::protobuf::Message& other) final;
    ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Measures : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Measures) */ {
public:
    Measures();
    virtual ~Measures();

    Measures(const Measures& from);

    inline Measures& operator=(const Measures& from) {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Measures(Measures&& from) noexcept : Measures() { *this = ::std::move(from); }

    inline Measures& operator=(Measures&& from) noexcept {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Measures& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const Measures* internal_default_instance() {
        return reinterpret_cast<const Measures*>(&_Measures_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 4;

    void Swap(Measures* other);
    friend void swap(Measures& a, Measures& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Measures* New() const final { return CreateMaybeMessage<Measures>(NULL); }

    Measures* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage<Measures>(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Measures& from);
    void MergeFrom(const Measures& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Measures* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------


    // accessors -------------------------------------------------------

    // map<string, string> labels = 1;
    int labels_size() const;
    void clear_labels();
    static const int kLabelsFieldNumber = 1;
    const ::google::protobuf::Map<::std::string, ::std::string>& labels() const;
    ::google::protobuf::Map<::std::string, ::std::string>* mutable_labels();

    // repeated .proto.Measure measures = 2;
    int measures_size() const;
    void clear_measures();
    static const int kMeasuresFieldNumber = 2;
    ::proto::Measure* mutable_measures(int index);
    ::google::protobuf::RepeatedPtrField<::proto::Measure>* mutable_measures();
    const ::proto::Measure& measures(int index) const;
    ::proto::Measure* add_measures();
    const ::google::protobuf::RepeatedPtrField<::proto::Measure>& measures() const;

    // @@protoc_insertion_point(class_scope:proto.Measures)
private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::MapField<Measures_LabelsEntry_DoNotUse,
                                           ::std::string,
                                           ::std::string,
                                           ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                           ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                           0>
        labels_;
    ::google::protobuf::RepeatedPtrField<::proto::Measure> measures_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_MeasureBatches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Measure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Measure) */ {
public:
    Measure();
    virtual ~Measure();

    Measure(const Measure& from);

    inline Measure& operator=(const Measure& from) {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Measure(Measure&& from) noexcept : Measure() { *this = ::std::move(from); }

    inline Measure& operator=(Measure&& from) noexcept {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Measure& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const Measure* internal_default_instance() {
        return reinterpret_cast<const Measure*>(&_Measure_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 5;

    void Swap(Measure* other);
    friend void swap(Measure& a, Measure& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Measure* New() const final { return CreateMaybeMessage<Measure>(NULL); }

    Measure* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage<Measure>(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Measure& from);
    void MergeFrom(const Measure& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Measure* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // string valueType = 1;
    void clear_valuetype();
    static const int kValueTypeFieldNumber = 1;
    const ::std::string& valuetype() const;
    void set_valuetype(const ::std::string& value);
#if LANG_CXX11
    void set_valuetype(::std::string&& value);
#endif
    void set_valuetype(const char* value);
    void set_valuetype(const char* value, size_t size);
    ::std::string* mutable_valuetype();
    ::std::string* release_valuetype();
    void set_allocated_valuetype(::std::string* valuetype);

    // string name = 2;
    void clear_name();
    static const int kNameFieldNumber = 2;
    const ::std::string& name() const;
    void set_name(const ::std::string& value);
#if LANG_CXX11
    void set_name(::std::string&& value);
#endif
    void set_name(const char* value);
    void set_name(const char* value, size_t size);
    ::std::string* mutable_name();
    ::std::string* release_name();
    void set_allocated_name(::std::string* name);

    // string desc = 5;
    void clear_desc();
    static const int kDescFieldNumber = 5;
    const ::std::string& desc() const;
    void set_desc(const ::std::string& value);
#if LANG_CXX11
    void set_desc(::std::string&& value);
#endif
    void set_desc(const char* value);
    void set_desc(const char* value, size_t size);
    ::std::string* mutable_desc();
    ::std::string* release_desc();
    void set_allocated_desc(::std::string* desc);

    // double value = 3;
    void clear_value();
    static const int kValueFieldNumber = 3;
    double value() const;
    void set_value(double value);

    // .proto.EnumUnit unit = 4;
    void clear_unit();
    static const int kUnitFieldNumber = 4;
    ::proto::EnumUnit unit() const;
    void set_unit(::proto::EnumUnit value);

    // @@protoc_insertion_point(class_scope:proto.Measure)
private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::ArenaStringPtr valuetype_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr desc_;
    double value_;
    int unit_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_MeasureBatches_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// MeasureBatches

// repeated .proto.MeasureBatch measureBatches = 1;
inline int MeasureBatches::measurebatches_size() const {
    return measurebatches_.size();
}
inline void MeasureBatches::clear_measurebatches() {
    measurebatches_.Clear();
}
inline ::proto::MeasureBatch* MeasureBatches::mutable_measurebatches(int index) {
    // @@protoc_insertion_point(field_mutable:proto.MeasureBatches.measureBatches)
    return measurebatches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::proto::MeasureBatch>* MeasureBatches::mutable_measurebatches() {
    // @@protoc_insertion_point(field_mutable_list:proto.MeasureBatches.measureBatches)
    return &measurebatches_;
}
inline const ::proto::MeasureBatch& MeasureBatches::measurebatches(int index) const {
    // @@protoc_insertion_point(field_get:proto.MeasureBatches.measureBatches)
    return measurebatches_.Get(index);
}
inline ::proto::MeasureBatch* MeasureBatches::add_measurebatches() {
    // @@protoc_insertion_point(field_add:proto.MeasureBatches.measureBatches)
    return measurebatches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::proto::MeasureBatch>& MeasureBatches::measurebatches() const {
    // @@protoc_insertion_point(field_list:proto.MeasureBatches.measureBatches)
    return measurebatches_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MeasureBatch

// string version = 1;
inline void MeasureBatch::clear_version() {
    version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeasureBatch::version() const {
    // @@protoc_insertion_point(field_get:proto.MeasureBatch.version)
    return version_.GetNoArena();
}
inline void MeasureBatch::set_version(const ::std::string& value) {
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:proto.MeasureBatch.version)
}
#if LANG_CXX11
inline void MeasureBatch::set_version(::std::string&& value) {
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:proto.MeasureBatch.version)
}
#endif
inline void MeasureBatch::set_version(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:proto.MeasureBatch.version)
}
inline void MeasureBatch::set_version(const char* value, size_t size) {
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:proto.MeasureBatch.version)
}
inline ::std::string* MeasureBatch::mutable_version() {
    // @@protoc_insertion_point(field_mutable:proto.MeasureBatch.version)
    return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeasureBatch::release_version() {
    // @@protoc_insertion_point(field_release:proto.MeasureBatch.version)

    return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeasureBatch::set_allocated_version(::std::string* version) {
    if (version != NULL) {
    } else {
    }
    version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
    // @@protoc_insertion_point(field_set_allocated:proto.MeasureBatch.version)
}

// string type = 2;
inline void MeasureBatch::clear_type() {
    type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeasureBatch::type() const {
    // @@protoc_insertion_point(field_get:proto.MeasureBatch.type)
    return type_.GetNoArena();
}
inline void MeasureBatch::set_type(const ::std::string& value) {
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:proto.MeasureBatch.type)
}
#if LANG_CXX11
inline void MeasureBatch::set_type(::std::string&& value) {
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:proto.MeasureBatch.type)
}
#endif
inline void MeasureBatch::set_type(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:proto.MeasureBatch.type)
}
inline void MeasureBatch::set_type(const char* value, size_t size) {
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:proto.MeasureBatch.type)
}
inline ::std::string* MeasureBatch::mutable_type() {
    // @@protoc_insertion_point(field_mutable:proto.MeasureBatch.type)
    return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeasureBatch::release_type() {
    // @@protoc_insertion_point(field_release:proto.MeasureBatch.type)

    return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeasureBatch::set_allocated_type(::std::string* type) {
    if (type != NULL) {
    } else {
    }
    type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
    // @@protoc_insertion_point(field_set_allocated:proto.MeasureBatch.type)
}

// int64 time = 3;
inline void MeasureBatch::clear_time() {
    time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MeasureBatch::time() const {
    // @@protoc_insertion_point(field_get:proto.MeasureBatch.time)
    return time_;
}
inline void MeasureBatch::set_time(::google::protobuf::int64 value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:proto.MeasureBatch.time)
}

// string pid = 4;
inline void MeasureBatch::clear_pid() {
    pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeasureBatch::pid() const {
    // @@protoc_insertion_point(field_get:proto.MeasureBatch.pid)
    return pid_.GetNoArena();
}
inline void MeasureBatch::set_pid(const ::std::string& value) {
    pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:proto.MeasureBatch.pid)
}
#if LANG_CXX11
inline void MeasureBatch::set_pid(::std::string&& value) {
    pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:proto.MeasureBatch.pid)
}
#endif
inline void MeasureBatch::set_pid(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:proto.MeasureBatch.pid)
}
inline void MeasureBatch::set_pid(const char* value, size_t size) {
    pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                    ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:proto.MeasureBatch.pid)
}
inline ::std::string* MeasureBatch::mutable_pid() {
    // @@protoc_insertion_point(field_mutable:proto.MeasureBatch.pid)
    return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeasureBatch::release_pid() {
    // @@protoc_insertion_point(field_release:proto.MeasureBatch.pid)

    return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeasureBatch::set_allocated_pid(::std::string* pid) {
    if (pid != NULL) {
    } else {
    }
    pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
    // @@protoc_insertion_point(field_set_allocated:proto.MeasureBatch.pid)
}

// string ip = 5;
inline void MeasureBatch::clear_ip() {
    ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeasureBatch::ip() const {
    // @@protoc_insertion_point(field_get:proto.MeasureBatch.ip)
    return ip_.GetNoArena();
}
inline void MeasureBatch::set_ip(const ::std::string& value) {
    ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:proto.MeasureBatch.ip)
}
#if LANG_CXX11
inline void MeasureBatch::set_ip(::std::string&& value) {
    ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:proto.MeasureBatch.ip)
}
#endif
inline void MeasureBatch::set_ip(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:proto.MeasureBatch.ip)
}
inline void MeasureBatch::set_ip(const char* value, size_t size) {
    ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:proto.MeasureBatch.ip)
}
inline ::std::string* MeasureBatch::mutable_ip() {
    // @@protoc_insertion_point(field_mutable:proto.MeasureBatch.ip)
    return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeasureBatch::release_ip() {
    // @@protoc_insertion_point(field_release:proto.MeasureBatch.ip)

    return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeasureBatch::set_allocated_ip(::std::string* ip) {
    if (ip != NULL) {
    } else {
    }
    ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
    // @@protoc_insertion_point(field_set_allocated:proto.MeasureBatch.ip)
}

// map<string, string> commonTags = 6;
inline int MeasureBatch::commontags_size() const {
    return commontags_.size();
}
inline void MeasureBatch::clear_commontags() {
    commontags_.Clear();
}
inline const ::google::protobuf::Map<::std::string, ::std::string>& MeasureBatch::commontags() const {
    // @@protoc_insertion_point(field_map:proto.MeasureBatch.commonTags)
    return commontags_.GetMap();
}
inline ::google::protobuf::Map<::std::string, ::std::string>* MeasureBatch::mutable_commontags() {
    // @@protoc_insertion_point(field_mutable_map:proto.MeasureBatch.commonTags)
    return commontags_.MutableMap();
}

// repeated .proto.Measures measures = 7;
inline int MeasureBatch::measures_size() const {
    return measures_.size();
}
inline void MeasureBatch::clear_measures() {
    measures_.Clear();
}
inline ::proto::Measures* MeasureBatch::mutable_measures(int index) {
    // @@protoc_insertion_point(field_mutable:proto.MeasureBatch.measures)
    return measures_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::proto::Measures>* MeasureBatch::mutable_measures() {
    // @@protoc_insertion_point(field_mutable_list:proto.MeasureBatch.measures)
    return &measures_;
}
inline const ::proto::Measures& MeasureBatch::measures(int index) const {
    // @@protoc_insertion_point(field_get:proto.MeasureBatch.measures)
    return measures_.Get(index);
}
inline ::proto::Measures* MeasureBatch::add_measures() {
    // @@protoc_insertion_point(field_add:proto.MeasureBatch.measures)
    return measures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::proto::Measures>& MeasureBatch::measures() const {
    // @@protoc_insertion_point(field_list:proto.MeasureBatch.measures)
    return measures_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Measures

// map<string, string> labels = 1;
inline int Measures::labels_size() const {
    return labels_.size();
}
inline void Measures::clear_labels() {
    labels_.Clear();
}
inline const ::google::protobuf::Map<::std::string, ::std::string>& Measures::labels() const {
    // @@protoc_insertion_point(field_map:proto.Measures.labels)
    return labels_.GetMap();
}
inline ::google::protobuf::Map<::std::string, ::std::string>* Measures::mutable_labels() {
    // @@protoc_insertion_point(field_mutable_map:proto.Measures.labels)
    return labels_.MutableMap();
}

// repeated .proto.Measure measures = 2;
inline int Measures::measures_size() const {
    return measures_.size();
}
inline void Measures::clear_measures() {
    measures_.Clear();
}
inline ::proto::Measure* Measures::mutable_measures(int index) {
    // @@protoc_insertion_point(field_mutable:proto.Measures.measures)
    return measures_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::proto::Measure>* Measures::mutable_measures() {
    // @@protoc_insertion_point(field_mutable_list:proto.Measures.measures)
    return &measures_;
}
inline const ::proto::Measure& Measures::measures(int index) const {
    // @@protoc_insertion_point(field_get:proto.Measures.measures)
    return measures_.Get(index);
}
inline ::proto::Measure* Measures::add_measures() {
    // @@protoc_insertion_point(field_add:proto.Measures.measures)
    return measures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::proto::Measure>& Measures::measures() const {
    // @@protoc_insertion_point(field_list:proto.Measures.measures)
    return measures_;
}

// -------------------------------------------------------------------

// Measure

// string valueType = 1;
inline void Measure::clear_valuetype() {
    valuetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Measure::valuetype() const {
    // @@protoc_insertion_point(field_get:proto.Measure.valueType)
    return valuetype_.GetNoArena();
}
inline void Measure::set_valuetype(const ::std::string& value) {
    valuetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:proto.Measure.valueType)
}
#if LANG_CXX11
inline void Measure::set_valuetype(::std::string&& value) {
    valuetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:proto.Measure.valueType)
}
#endif
inline void Measure::set_valuetype(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    valuetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:proto.Measure.valueType)
}
inline void Measure::set_valuetype(const char* value, size_t size) {
    valuetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:proto.Measure.valueType)
}
inline ::std::string* Measure::mutable_valuetype() {
    // @@protoc_insertion_point(field_mutable:proto.Measure.valueType)
    return valuetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Measure::release_valuetype() {
    // @@protoc_insertion_point(field_release:proto.Measure.valueType)

    return valuetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_valuetype(::std::string* valuetype) {
    if (valuetype != NULL) {
    } else {
    }
    valuetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valuetype);
    // @@protoc_insertion_point(field_set_allocated:proto.Measure.valueType)
}

// string name = 2;
inline void Measure::clear_name() {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Measure::name() const {
    // @@protoc_insertion_point(field_get:proto.Measure.name)
    return name_.GetNoArena();
}
inline void Measure::set_name(const ::std::string& value) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:proto.Measure.name)
}
#if LANG_CXX11
inline void Measure::set_name(::std::string&& value) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:proto.Measure.name)
}
#endif
inline void Measure::set_name(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:proto.Measure.name)
}
inline void Measure::set_name(const char* value, size_t size) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:proto.Measure.name)
}
inline ::std::string* Measure::mutable_name() {
    // @@protoc_insertion_point(field_mutable:proto.Measure.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Measure::release_name() {
    // @@protoc_insertion_point(field_release:proto.Measure.name)

    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_name(::std::string* name) {
    if (name != NULL) {
    } else {
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:proto.Measure.name)
}

// double value = 3;
inline void Measure::clear_value() {
    value_ = 0;
}
inline double Measure::value() const {
    // @@protoc_insertion_point(field_get:proto.Measure.value)
    return value_;
}
inline void Measure::set_value(double value) {
    value_ = value;
    // @@protoc_insertion_point(field_set:proto.Measure.value)
}

// .proto.EnumUnit unit = 4;
inline void Measure::clear_unit() {
    unit_ = 0;
}
inline ::proto::EnumUnit Measure::unit() const {
    // @@protoc_insertion_point(field_get:proto.Measure.unit)
    return static_cast<::proto::EnumUnit>(unit_);
}
inline void Measure::set_unit(::proto::EnumUnit value) {
    unit_ = value;
    // @@protoc_insertion_point(field_set:proto.Measure.unit)
}

// string desc = 5;
inline void Measure::clear_desc() {
    desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Measure::desc() const {
    // @@protoc_insertion_point(field_get:proto.Measure.desc)
    return desc_.GetNoArena();
}
inline void Measure::set_desc(const ::std::string& value) {
    desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:proto.Measure.desc)
}
#if LANG_CXX11
inline void Measure::set_desc(::std::string&& value) {
    desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:proto.Measure.desc)
}
#endif
inline void Measure::set_desc(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:proto.Measure.desc)
}
inline void Measure::set_desc(const char* value, size_t size) {
    desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:proto.Measure.desc)
}
inline ::std::string* Measure::mutable_desc() {
    // @@protoc_insertion_point(field_mutable:proto.Measure.desc)
    return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Measure::release_desc() {
    // @@protoc_insertion_point(field_release:proto.Measure.desc)

    return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Measure::set_allocated_desc(::std::string* desc) {
    if (desc != NULL) {
    } else {
    }
    desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
    // @@protoc_insertion_point(field_set_allocated:proto.Measure.desc)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

} // namespace proto

namespace google {
namespace protobuf {

    template <>
    struct is_proto_enum<::proto::EnumUnit> : ::std::true_type {};
    template <>
    inline const EnumDescriptor* GetEnumDescriptor<::proto::EnumUnit>() {
        return ::proto::EnumUnit_descriptor();
    }

} // namespace protobuf
} // namespace google

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_INCLUDED_MeasureBatches_2eproto
