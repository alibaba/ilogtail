// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote.proto

#ifndef PROTOBUF_INCLUDED_remote_2eproto
#define PROTOBUF_INCLUDED_remote_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_remote_2eproto 

namespace protobuf_remote_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_remote_2eproto
namespace prometheus {
class ChunkedReadResponse;
class ChunkedReadResponseDefaultTypeInternal;
extern ChunkedReadResponseDefaultTypeInternal _ChunkedReadResponse_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class QueryResult;
class QueryResultDefaultTypeInternal;
extern QueryResultDefaultTypeInternal _QueryResult_default_instance_;
class ReadRequest;
class ReadRequestDefaultTypeInternal;
extern ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
class ReadResponse;
class ReadResponseDefaultTypeInternal;
extern ReadResponseDefaultTypeInternal _ReadResponse_default_instance_;
class WriteRequest;
class WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
}  // namespace prometheus
namespace google {
namespace protobuf {
template<> ::prometheus::ChunkedReadResponse* Arena::CreateMaybeMessage<::prometheus::ChunkedReadResponse>(Arena*);
template<> ::prometheus::Query* Arena::CreateMaybeMessage<::prometheus::Query>(Arena*);
template<> ::prometheus::QueryResult* Arena::CreateMaybeMessage<::prometheus::QueryResult>(Arena*);
template<> ::prometheus::ReadRequest* Arena::CreateMaybeMessage<::prometheus::ReadRequest>(Arena*);
template<> ::prometheus::ReadResponse* Arena::CreateMaybeMessage<::prometheus::ReadResponse>(Arena*);
template<> ::prometheus::WriteRequest* Arena::CreateMaybeMessage<::prometheus::WriteRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace prometheus {

enum ReadRequest_ResponseType {
  ReadRequest_ResponseType_SAMPLES = 0,
  ReadRequest_ResponseType_STREAMED_XOR_CHUNKS = 1,
  ReadRequest_ResponseType_ReadRequest_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReadRequest_ResponseType_ReadRequest_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReadRequest_ResponseType_IsValid(int value);
const ReadRequest_ResponseType ReadRequest_ResponseType_ResponseType_MIN = ReadRequest_ResponseType_SAMPLES;
const ReadRequest_ResponseType ReadRequest_ResponseType_ResponseType_MAX = ReadRequest_ResponseType_STREAMED_XOR_CHUNKS;
const int ReadRequest_ResponseType_ResponseType_ARRAYSIZE = ReadRequest_ResponseType_ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReadRequest_ResponseType_descriptor();
inline const ::std::string& ReadRequest_ResponseType_Name(ReadRequest_ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReadRequest_ResponseType_descriptor(), value);
}
inline bool ReadRequest_ResponseType_Parse(
    const ::std::string& name, ReadRequest_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReadRequest_ResponseType>(
    ReadRequest_ResponseType_descriptor(), name, value);
}
// ===================================================================

class WriteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.WriteRequest) */ {
 public:
  WriteRequest();
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WriteRequest* other);
  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const final {
    return CreateMaybeMessage<WriteRequest>(NULL);
  }

  WriteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prometheus.TimeSeries timeseries = 1;
  int timeseries_size() const;
  void clear_timeseries();
  static const int kTimeseriesFieldNumber = 1;
  ::prometheus::TimeSeries* mutable_timeseries(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::TimeSeries >*
      mutable_timeseries();
  const ::prometheus::TimeSeries& timeseries(int index) const;
  ::prometheus::TimeSeries* add_timeseries();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::TimeSeries >&
      timeseries() const;

  // repeated .prometheus.MetricMetadata metadata = 3;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  ::prometheus::MetricMetadata* mutable_metadata(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::MetricMetadata >*
      mutable_metadata();
  const ::prometheus::MetricMetadata& metadata(int index) const;
  ::prometheus::MetricMetadata* add_metadata();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::MetricMetadata >&
      metadata() const;

  // @@protoc_insertion_point(class_scope:prometheus.WriteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::TimeSeries > timeseries_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::MetricMetadata > metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_remote_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.ReadRequest) */ {
 public:
  ReadRequest();
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadRequest(ReadRequest&& from) noexcept
    : ReadRequest() {
    *this = ::std::move(from);
  }

  inline ReadRequest& operator=(ReadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRequest*>(
               &_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReadRequest* other);
  friend void swap(ReadRequest& a, ReadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const final {
    return CreateMaybeMessage<ReadRequest>(NULL);
  }

  ReadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRequest_ResponseType ResponseType;
  static const ResponseType SAMPLES =
    ReadRequest_ResponseType_SAMPLES;
  static const ResponseType STREAMED_XOR_CHUNKS =
    ReadRequest_ResponseType_STREAMED_XOR_CHUNKS;
  static inline bool ResponseType_IsValid(int value) {
    return ReadRequest_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    ReadRequest_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    ReadRequest_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    ReadRequest_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseType_descriptor() {
    return ReadRequest_ResponseType_descriptor();
  }
  static inline const ::std::string& ResponseType_Name(ResponseType value) {
    return ReadRequest_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(const ::std::string& name,
      ResponseType* value) {
    return ReadRequest_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .prometheus.Query queries = 1;
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 1;
  ::prometheus::Query* mutable_queries(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::Query >*
      mutable_queries();
  const ::prometheus::Query& queries(int index) const;
  ::prometheus::Query* add_queries();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::Query >&
      queries() const;

  // repeated .prometheus.ReadRequest.ResponseType accepted_response_types = 2;
  int accepted_response_types_size() const;
  void clear_accepted_response_types();
  static const int kAcceptedResponseTypesFieldNumber = 2;
  ::prometheus::ReadRequest_ResponseType accepted_response_types(int index) const;
  void set_accepted_response_types(int index, ::prometheus::ReadRequest_ResponseType value);
  void add_accepted_response_types(::prometheus::ReadRequest_ResponseType value);
  const ::google::protobuf::RepeatedField<int>& accepted_response_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_accepted_response_types();

  // @@protoc_insertion_point(class_scope:prometheus.ReadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::Query > queries_;
  ::google::protobuf::RepeatedField<int> accepted_response_types_;
  mutable int _accepted_response_types_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_remote_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.ReadResponse) */ {
 public:
  ReadResponse();
  virtual ~ReadResponse();

  ReadResponse(const ReadResponse& from);

  inline ReadResponse& operator=(const ReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadResponse(ReadResponse&& from) noexcept
    : ReadResponse() {
    *this = ::std::move(from);
  }

  inline ReadResponse& operator=(ReadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResponse* internal_default_instance() {
    return reinterpret_cast<const ReadResponse*>(
               &_ReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReadResponse* other);
  friend void swap(ReadResponse& a, ReadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadResponse* New() const final {
    return CreateMaybeMessage<ReadResponse>(NULL);
  }

  ReadResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadResponse& from);
  void MergeFrom(const ReadResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prometheus.QueryResult results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::prometheus::QueryResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::QueryResult >*
      mutable_results();
  const ::prometheus::QueryResult& results(int index) const;
  ::prometheus::QueryResult* add_results();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::QueryResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:prometheus.ReadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::QueryResult > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_remote_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Query* other);
  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(NULL);
  }

  Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prometheus.LabelMatcher matchers = 3;
  int matchers_size() const;
  void clear_matchers();
  static const int kMatchersFieldNumber = 3;
  ::prometheus::LabelMatcher* mutable_matchers(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::LabelMatcher >*
      mutable_matchers();
  const ::prometheus::LabelMatcher& matchers(int index) const;
  ::prometheus::LabelMatcher* add_matchers();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::LabelMatcher >&
      matchers() const;

  // .prometheus.ReadHints hints = 4;
  bool has_hints() const;
  void clear_hints();
  static const int kHintsFieldNumber = 4;
  private:
  const ::prometheus::ReadHints& _internal_hints() const;
  public:
  const ::prometheus::ReadHints& hints() const;
  ::prometheus::ReadHints* release_hints();
  ::prometheus::ReadHints* mutable_hints();
  void set_allocated_hints(::prometheus::ReadHints* hints);

  // int64 start_timestamp_ms = 1;
  void clear_start_timestamp_ms();
  static const int kStartTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 start_timestamp_ms() const;
  void set_start_timestamp_ms(::google::protobuf::int64 value);

  // int64 end_timestamp_ms = 2;
  void clear_end_timestamp_ms();
  static const int kEndTimestampMsFieldNumber = 2;
  ::google::protobuf::int64 end_timestamp_ms() const;
  void set_end_timestamp_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:prometheus.Query)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::LabelMatcher > matchers_;
  ::prometheus::ReadHints* hints_;
  ::google::protobuf::int64 start_timestamp_ms_;
  ::google::protobuf::int64 end_timestamp_ms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_remote_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.QueryResult) */ {
 public:
  QueryResult();
  virtual ~QueryResult();

  QueryResult(const QueryResult& from);

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResult(QueryResult&& from) noexcept
    : QueryResult() {
    *this = ::std::move(from);
  }

  inline QueryResult& operator=(QueryResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResult* internal_default_instance() {
    return reinterpret_cast<const QueryResult*>(
               &_QueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(QueryResult* other);
  friend void swap(QueryResult& a, QueryResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResult* New() const final {
    return CreateMaybeMessage<QueryResult>(NULL);
  }

  QueryResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prometheus.TimeSeries timeseries = 1;
  int timeseries_size() const;
  void clear_timeseries();
  static const int kTimeseriesFieldNumber = 1;
  ::prometheus::TimeSeries* mutable_timeseries(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::TimeSeries >*
      mutable_timeseries();
  const ::prometheus::TimeSeries& timeseries(int index) const;
  ::prometheus::TimeSeries* add_timeseries();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::TimeSeries >&
      timeseries() const;

  // @@protoc_insertion_point(class_scope:prometheus.QueryResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::TimeSeries > timeseries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_remote_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkedReadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.ChunkedReadResponse) */ {
 public:
  ChunkedReadResponse();
  virtual ~ChunkedReadResponse();

  ChunkedReadResponse(const ChunkedReadResponse& from);

  inline ChunkedReadResponse& operator=(const ChunkedReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkedReadResponse(ChunkedReadResponse&& from) noexcept
    : ChunkedReadResponse() {
    *this = ::std::move(from);
  }

  inline ChunkedReadResponse& operator=(ChunkedReadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkedReadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkedReadResponse* internal_default_instance() {
    return reinterpret_cast<const ChunkedReadResponse*>(
               &_ChunkedReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ChunkedReadResponse* other);
  friend void swap(ChunkedReadResponse& a, ChunkedReadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkedReadResponse* New() const final {
    return CreateMaybeMessage<ChunkedReadResponse>(NULL);
  }

  ChunkedReadResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkedReadResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkedReadResponse& from);
  void MergeFrom(const ChunkedReadResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkedReadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prometheus.ChunkedSeries chunked_series = 1;
  int chunked_series_size() const;
  void clear_chunked_series();
  static const int kChunkedSeriesFieldNumber = 1;
  ::prometheus::ChunkedSeries* mutable_chunked_series(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::ChunkedSeries >*
      mutable_chunked_series();
  const ::prometheus::ChunkedSeries& chunked_series(int index) const;
  ::prometheus::ChunkedSeries* add_chunked_series();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::ChunkedSeries >&
      chunked_series() const;

  // int64 query_index = 2;
  void clear_query_index();
  static const int kQueryIndexFieldNumber = 2;
  ::google::protobuf::int64 query_index() const;
  void set_query_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:prometheus.ChunkedReadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::ChunkedSeries > chunked_series_;
  ::google::protobuf::int64 query_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_remote_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WriteRequest

// repeated .prometheus.TimeSeries timeseries = 1;
inline int WriteRequest::timeseries_size() const {
  return timeseries_.size();
}
inline ::prometheus::TimeSeries* WriteRequest::mutable_timeseries(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.WriteRequest.timeseries)
  return timeseries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::TimeSeries >*
WriteRequest::mutable_timeseries() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.WriteRequest.timeseries)
  return &timeseries_;
}
inline const ::prometheus::TimeSeries& WriteRequest::timeseries(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.WriteRequest.timeseries)
  return timeseries_.Get(index);
}
inline ::prometheus::TimeSeries* WriteRequest::add_timeseries() {
  // @@protoc_insertion_point(field_add:prometheus.WriteRequest.timeseries)
  return timeseries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::TimeSeries >&
WriteRequest::timeseries() const {
  // @@protoc_insertion_point(field_list:prometheus.WriteRequest.timeseries)
  return timeseries_;
}

// repeated .prometheus.MetricMetadata metadata = 3;
inline int WriteRequest::metadata_size() const {
  return metadata_.size();
}
inline ::prometheus::MetricMetadata* WriteRequest::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.WriteRequest.metadata)
  return metadata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::MetricMetadata >*
WriteRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.WriteRequest.metadata)
  return &metadata_;
}
inline const ::prometheus::MetricMetadata& WriteRequest::metadata(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.WriteRequest.metadata)
  return metadata_.Get(index);
}
inline ::prometheus::MetricMetadata* WriteRequest::add_metadata() {
  // @@protoc_insertion_point(field_add:prometheus.WriteRequest.metadata)
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::MetricMetadata >&
WriteRequest::metadata() const {
  // @@protoc_insertion_point(field_list:prometheus.WriteRequest.metadata)
  return metadata_;
}

// -------------------------------------------------------------------

// ReadRequest

// repeated .prometheus.Query queries = 1;
inline int ReadRequest::queries_size() const {
  return queries_.size();
}
inline void ReadRequest::clear_queries() {
  queries_.Clear();
}
inline ::prometheus::Query* ReadRequest::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.ReadRequest.queries)
  return queries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::Query >*
ReadRequest::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.ReadRequest.queries)
  return &queries_;
}
inline const ::prometheus::Query& ReadRequest::queries(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.ReadRequest.queries)
  return queries_.Get(index);
}
inline ::prometheus::Query* ReadRequest::add_queries() {
  // @@protoc_insertion_point(field_add:prometheus.ReadRequest.queries)
  return queries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::Query >&
ReadRequest::queries() const {
  // @@protoc_insertion_point(field_list:prometheus.ReadRequest.queries)
  return queries_;
}

// repeated .prometheus.ReadRequest.ResponseType accepted_response_types = 2;
inline int ReadRequest::accepted_response_types_size() const {
  return accepted_response_types_.size();
}
inline void ReadRequest::clear_accepted_response_types() {
  accepted_response_types_.Clear();
}
inline ::prometheus::ReadRequest_ResponseType ReadRequest::accepted_response_types(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.ReadRequest.accepted_response_types)
  return static_cast< ::prometheus::ReadRequest_ResponseType >(accepted_response_types_.Get(index));
}
inline void ReadRequest::set_accepted_response_types(int index, ::prometheus::ReadRequest_ResponseType value) {
  accepted_response_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:prometheus.ReadRequest.accepted_response_types)
}
inline void ReadRequest::add_accepted_response_types(::prometheus::ReadRequest_ResponseType value) {
  accepted_response_types_.Add(value);
  // @@protoc_insertion_point(field_add:prometheus.ReadRequest.accepted_response_types)
}
inline const ::google::protobuf::RepeatedField<int>&
ReadRequest::accepted_response_types() const {
  // @@protoc_insertion_point(field_list:prometheus.ReadRequest.accepted_response_types)
  return accepted_response_types_;
}
inline ::google::protobuf::RepeatedField<int>*
ReadRequest::mutable_accepted_response_types() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.ReadRequest.accepted_response_types)
  return &accepted_response_types_;
}

// -------------------------------------------------------------------

// ReadResponse

// repeated .prometheus.QueryResult results = 1;
inline int ReadResponse::results_size() const {
  return results_.size();
}
inline void ReadResponse::clear_results() {
  results_.Clear();
}
inline ::prometheus::QueryResult* ReadResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.ReadResponse.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::QueryResult >*
ReadResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.ReadResponse.results)
  return &results_;
}
inline const ::prometheus::QueryResult& ReadResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.ReadResponse.results)
  return results_.Get(index);
}
inline ::prometheus::QueryResult* ReadResponse::add_results() {
  // @@protoc_insertion_point(field_add:prometheus.ReadResponse.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::QueryResult >&
ReadResponse::results() const {
  // @@protoc_insertion_point(field_list:prometheus.ReadResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// Query

// int64 start_timestamp_ms = 1;
inline void Query::clear_start_timestamp_ms() {
  start_timestamp_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Query::start_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:prometheus.Query.start_timestamp_ms)
  return start_timestamp_ms_;
}
inline void Query::set_start_timestamp_ms(::google::protobuf::int64 value) {
  
  start_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Query.start_timestamp_ms)
}

// int64 end_timestamp_ms = 2;
inline void Query::clear_end_timestamp_ms() {
  end_timestamp_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Query::end_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:prometheus.Query.end_timestamp_ms)
  return end_timestamp_ms_;
}
inline void Query::set_end_timestamp_ms(::google::protobuf::int64 value) {
  
  end_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Query.end_timestamp_ms)
}

// repeated .prometheus.LabelMatcher matchers = 3;
inline int Query::matchers_size() const {
  return matchers_.size();
}
inline ::prometheus::LabelMatcher* Query::mutable_matchers(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.Query.matchers)
  return matchers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::LabelMatcher >*
Query::mutable_matchers() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.Query.matchers)
  return &matchers_;
}
inline const ::prometheus::LabelMatcher& Query::matchers(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.Query.matchers)
  return matchers_.Get(index);
}
inline ::prometheus::LabelMatcher* Query::add_matchers() {
  // @@protoc_insertion_point(field_add:prometheus.Query.matchers)
  return matchers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::LabelMatcher >&
Query::matchers() const {
  // @@protoc_insertion_point(field_list:prometheus.Query.matchers)
  return matchers_;
}

// .prometheus.ReadHints hints = 4;
inline bool Query::has_hints() const {
  return this != internal_default_instance() && hints_ != NULL;
}
inline const ::prometheus::ReadHints& Query::_internal_hints() const {
  return *hints_;
}
inline const ::prometheus::ReadHints& Query::hints() const {
  const ::prometheus::ReadHints* p = hints_;
  // @@protoc_insertion_point(field_get:prometheus.Query.hints)
  return p != NULL ? *p : *reinterpret_cast<const ::prometheus::ReadHints*>(
      &::prometheus::_ReadHints_default_instance_);
}
inline ::prometheus::ReadHints* Query::release_hints() {
  // @@protoc_insertion_point(field_release:prometheus.Query.hints)
  
  ::prometheus::ReadHints* temp = hints_;
  hints_ = NULL;
  return temp;
}
inline ::prometheus::ReadHints* Query::mutable_hints() {
  
  if (hints_ == NULL) {
    auto* p = CreateMaybeMessage<::prometheus::ReadHints>(GetArenaNoVirtual());
    hints_ = p;
  }
  // @@protoc_insertion_point(field_mutable:prometheus.Query.hints)
  return hints_;
}
inline void Query::set_allocated_hints(::prometheus::ReadHints* hints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hints_);
  }
  if (hints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hints, submessage_arena);
    }
    
  } else {
    
  }
  hints_ = hints;
  // @@protoc_insertion_point(field_set_allocated:prometheus.Query.hints)
}

// -------------------------------------------------------------------

// QueryResult

// repeated .prometheus.TimeSeries timeseries = 1;
inline int QueryResult::timeseries_size() const {
  return timeseries_.size();
}
inline ::prometheus::TimeSeries* QueryResult::mutable_timeseries(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.QueryResult.timeseries)
  return timeseries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::TimeSeries >*
QueryResult::mutable_timeseries() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.QueryResult.timeseries)
  return &timeseries_;
}
inline const ::prometheus::TimeSeries& QueryResult::timeseries(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.QueryResult.timeseries)
  return timeseries_.Get(index);
}
inline ::prometheus::TimeSeries* QueryResult::add_timeseries() {
  // @@protoc_insertion_point(field_add:prometheus.QueryResult.timeseries)
  return timeseries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::TimeSeries >&
QueryResult::timeseries() const {
  // @@protoc_insertion_point(field_list:prometheus.QueryResult.timeseries)
  return timeseries_;
}

// -------------------------------------------------------------------

// ChunkedReadResponse

// repeated .prometheus.ChunkedSeries chunked_series = 1;
inline int ChunkedReadResponse::chunked_series_size() const {
  return chunked_series_.size();
}
inline ::prometheus::ChunkedSeries* ChunkedReadResponse::mutable_chunked_series(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.ChunkedReadResponse.chunked_series)
  return chunked_series_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::ChunkedSeries >*
ChunkedReadResponse::mutable_chunked_series() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.ChunkedReadResponse.chunked_series)
  return &chunked_series_;
}
inline const ::prometheus::ChunkedSeries& ChunkedReadResponse::chunked_series(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.ChunkedReadResponse.chunked_series)
  return chunked_series_.Get(index);
}
inline ::prometheus::ChunkedSeries* ChunkedReadResponse::add_chunked_series() {
  // @@protoc_insertion_point(field_add:prometheus.ChunkedReadResponse.chunked_series)
  return chunked_series_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::ChunkedSeries >&
ChunkedReadResponse::chunked_series() const {
  // @@protoc_insertion_point(field_list:prometheus.ChunkedReadResponse.chunked_series)
  return chunked_series_;
}

// int64 query_index = 2;
inline void ChunkedReadResponse::clear_query_index() {
  query_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChunkedReadResponse::query_index() const {
  // @@protoc_insertion_point(field_get:prometheus.ChunkedReadResponse.query_index)
  return query_index_;
}
inline void ChunkedReadResponse::set_query_index(::google::protobuf::int64 value) {
  
  query_index_ = value;
  // @@protoc_insertion_point(field_set:prometheus.ChunkedReadResponse.query_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prometheus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::prometheus::ReadRequest_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prometheus::ReadRequest_ResponseType>() {
  return ::prometheus::ReadRequest_ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_remote_2eproto
