// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef PROTOBUF_INCLUDED_types_2eproto
#define PROTOBUF_INCLUDED_types_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_types_2eproto 

namespace protobuf_types_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_types_2eproto
namespace prometheus {
class BucketSpan;
class BucketSpanDefaultTypeInternal;
extern BucketSpanDefaultTypeInternal _BucketSpan_default_instance_;
class Chunk;
class ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class ChunkedSeries;
class ChunkedSeriesDefaultTypeInternal;
extern ChunkedSeriesDefaultTypeInternal _ChunkedSeries_default_instance_;
class Exemplar;
class ExemplarDefaultTypeInternal;
extern ExemplarDefaultTypeInternal _Exemplar_default_instance_;
class Histogram;
class HistogramDefaultTypeInternal;
extern HistogramDefaultTypeInternal _Histogram_default_instance_;
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class LabelMatcher;
class LabelMatcherDefaultTypeInternal;
extern LabelMatcherDefaultTypeInternal _LabelMatcher_default_instance_;
class Labels;
class LabelsDefaultTypeInternal;
extern LabelsDefaultTypeInternal _Labels_default_instance_;
class MetricMetadata;
class MetricMetadataDefaultTypeInternal;
extern MetricMetadataDefaultTypeInternal _MetricMetadata_default_instance_;
class ReadHints;
class ReadHintsDefaultTypeInternal;
extern ReadHintsDefaultTypeInternal _ReadHints_default_instance_;
class Sample;
class SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class TimeSeries;
class TimeSeriesDefaultTypeInternal;
extern TimeSeriesDefaultTypeInternal _TimeSeries_default_instance_;
}  // namespace prometheus
namespace google {
namespace protobuf {
template<> ::prometheus::BucketSpan* Arena::CreateMaybeMessage<::prometheus::BucketSpan>(Arena*);
template<> ::prometheus::Chunk* Arena::CreateMaybeMessage<::prometheus::Chunk>(Arena*);
template<> ::prometheus::ChunkedSeries* Arena::CreateMaybeMessage<::prometheus::ChunkedSeries>(Arena*);
template<> ::prometheus::Exemplar* Arena::CreateMaybeMessage<::prometheus::Exemplar>(Arena*);
template<> ::prometheus::Histogram* Arena::CreateMaybeMessage<::prometheus::Histogram>(Arena*);
template<> ::prometheus::Label* Arena::CreateMaybeMessage<::prometheus::Label>(Arena*);
template<> ::prometheus::LabelMatcher* Arena::CreateMaybeMessage<::prometheus::LabelMatcher>(Arena*);
template<> ::prometheus::Labels* Arena::CreateMaybeMessage<::prometheus::Labels>(Arena*);
template<> ::prometheus::MetricMetadata* Arena::CreateMaybeMessage<::prometheus::MetricMetadata>(Arena*);
template<> ::prometheus::ReadHints* Arena::CreateMaybeMessage<::prometheus::ReadHints>(Arena*);
template<> ::prometheus::Sample* Arena::CreateMaybeMessage<::prometheus::Sample>(Arena*);
template<> ::prometheus::TimeSeries* Arena::CreateMaybeMessage<::prometheus::TimeSeries>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace prometheus {

enum MetricMetadata_MetricType {
  MetricMetadata_MetricType_UNKNOWN = 0,
  MetricMetadata_MetricType_COUNTER = 1,
  MetricMetadata_MetricType_GAUGE = 2,
  MetricMetadata_MetricType_HISTOGRAM = 3,
  MetricMetadata_MetricType_GAUGEHISTOGRAM = 4,
  MetricMetadata_MetricType_SUMMARY = 5,
  MetricMetadata_MetricType_INFO = 6,
  MetricMetadata_MetricType_STATESET = 7,
  MetricMetadata_MetricType_MetricMetadata_MetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MetricMetadata_MetricType_MetricMetadata_MetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MetricMetadata_MetricType_IsValid(int value);
const MetricMetadata_MetricType MetricMetadata_MetricType_MetricType_MIN = MetricMetadata_MetricType_UNKNOWN;
const MetricMetadata_MetricType MetricMetadata_MetricType_MetricType_MAX = MetricMetadata_MetricType_STATESET;
const int MetricMetadata_MetricType_MetricType_ARRAYSIZE = MetricMetadata_MetricType_MetricType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MetricMetadata_MetricType_descriptor();
inline const ::std::string& MetricMetadata_MetricType_Name(MetricMetadata_MetricType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MetricMetadata_MetricType_descriptor(), value);
}
inline bool MetricMetadata_MetricType_Parse(
    const ::std::string& name, MetricMetadata_MetricType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetricMetadata_MetricType>(
    MetricMetadata_MetricType_descriptor(), name, value);
}
enum Histogram_ResetHint {
  Histogram_ResetHint_UNKNOWN = 0,
  Histogram_ResetHint_YES = 1,
  Histogram_ResetHint_NO = 2,
  Histogram_ResetHint_GAUGE = 3,
  Histogram_ResetHint_Histogram_ResetHint_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Histogram_ResetHint_Histogram_ResetHint_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Histogram_ResetHint_IsValid(int value);
const Histogram_ResetHint Histogram_ResetHint_ResetHint_MIN = Histogram_ResetHint_UNKNOWN;
const Histogram_ResetHint Histogram_ResetHint_ResetHint_MAX = Histogram_ResetHint_GAUGE;
const int Histogram_ResetHint_ResetHint_ARRAYSIZE = Histogram_ResetHint_ResetHint_MAX + 1;

const ::google::protobuf::EnumDescriptor* Histogram_ResetHint_descriptor();
inline const ::std::string& Histogram_ResetHint_Name(Histogram_ResetHint value) {
  return ::google::protobuf::internal::NameOfEnum(
    Histogram_ResetHint_descriptor(), value);
}
inline bool Histogram_ResetHint_Parse(
    const ::std::string& name, Histogram_ResetHint* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Histogram_ResetHint>(
    Histogram_ResetHint_descriptor(), name, value);
}
enum LabelMatcher_Type {
  LabelMatcher_Type_EQ = 0,
  LabelMatcher_Type_NEQ = 1,
  LabelMatcher_Type_RE = 2,
  LabelMatcher_Type_NRE = 3,
  LabelMatcher_Type_LabelMatcher_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LabelMatcher_Type_LabelMatcher_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LabelMatcher_Type_IsValid(int value);
const LabelMatcher_Type LabelMatcher_Type_Type_MIN = LabelMatcher_Type_EQ;
const LabelMatcher_Type LabelMatcher_Type_Type_MAX = LabelMatcher_Type_NRE;
const int LabelMatcher_Type_Type_ARRAYSIZE = LabelMatcher_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LabelMatcher_Type_descriptor();
inline const ::std::string& LabelMatcher_Type_Name(LabelMatcher_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LabelMatcher_Type_descriptor(), value);
}
inline bool LabelMatcher_Type_Parse(
    const ::std::string& name, LabelMatcher_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LabelMatcher_Type>(
    LabelMatcher_Type_descriptor(), name, value);
}
enum Chunk_Encoding {
  Chunk_Encoding_UNKNOWN = 0,
  Chunk_Encoding_XOR = 1,
  Chunk_Encoding_HISTOGRAM = 2,
  Chunk_Encoding_FLOAT_HISTOGRAM = 3,
  Chunk_Encoding_Chunk_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Chunk_Encoding_Chunk_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Chunk_Encoding_IsValid(int value);
const Chunk_Encoding Chunk_Encoding_Encoding_MIN = Chunk_Encoding_UNKNOWN;
const Chunk_Encoding Chunk_Encoding_Encoding_MAX = Chunk_Encoding_FLOAT_HISTOGRAM;
const int Chunk_Encoding_Encoding_ARRAYSIZE = Chunk_Encoding_Encoding_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chunk_Encoding_descriptor();
inline const ::std::string& Chunk_Encoding_Name(Chunk_Encoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chunk_Encoding_descriptor(), value);
}
inline bool Chunk_Encoding_Parse(
    const ::std::string& name, Chunk_Encoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chunk_Encoding>(
    Chunk_Encoding_descriptor(), name, value);
}
// ===================================================================

class MetricMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.MetricMetadata) */ {
 public:
  MetricMetadata();
  virtual ~MetricMetadata();

  MetricMetadata(const MetricMetadata& from);

  inline MetricMetadata& operator=(const MetricMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetricMetadata(MetricMetadata&& from) noexcept
    : MetricMetadata() {
    *this = ::std::move(from);
  }

  inline MetricMetadata& operator=(MetricMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MetricMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricMetadata* internal_default_instance() {
    return reinterpret_cast<const MetricMetadata*>(
               &_MetricMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MetricMetadata* other);
  friend void swap(MetricMetadata& a, MetricMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricMetadata* New() const final {
    return CreateMaybeMessage<MetricMetadata>(NULL);
  }

  MetricMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MetricMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MetricMetadata& from);
  void MergeFrom(const MetricMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MetricMetadata_MetricType MetricType;
  static const MetricType UNKNOWN =
    MetricMetadata_MetricType_UNKNOWN;
  static const MetricType COUNTER =
    MetricMetadata_MetricType_COUNTER;
  static const MetricType GAUGE =
    MetricMetadata_MetricType_GAUGE;
  static const MetricType HISTOGRAM =
    MetricMetadata_MetricType_HISTOGRAM;
  static const MetricType GAUGEHISTOGRAM =
    MetricMetadata_MetricType_GAUGEHISTOGRAM;
  static const MetricType SUMMARY =
    MetricMetadata_MetricType_SUMMARY;
  static const MetricType INFO =
    MetricMetadata_MetricType_INFO;
  static const MetricType STATESET =
    MetricMetadata_MetricType_STATESET;
  static inline bool MetricType_IsValid(int value) {
    return MetricMetadata_MetricType_IsValid(value);
  }
  static const MetricType MetricType_MIN =
    MetricMetadata_MetricType_MetricType_MIN;
  static const MetricType MetricType_MAX =
    MetricMetadata_MetricType_MetricType_MAX;
  static const int MetricType_ARRAYSIZE =
    MetricMetadata_MetricType_MetricType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MetricType_descriptor() {
    return MetricMetadata_MetricType_descriptor();
  }
  static inline const ::std::string& MetricType_Name(MetricType value) {
    return MetricMetadata_MetricType_Name(value);
  }
  static inline bool MetricType_Parse(const ::std::string& name,
      MetricType* value) {
    return MetricMetadata_MetricType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string metric_family_name = 2;
  void clear_metric_family_name();
  static const int kMetricFamilyNameFieldNumber = 2;
  const ::std::string& metric_family_name() const;
  void set_metric_family_name(const ::std::string& value);
  #if LANG_CXX11
  void set_metric_family_name(::std::string&& value);
  #endif
  void set_metric_family_name(const char* value);
  void set_metric_family_name(const char* value, size_t size);
  ::std::string* mutable_metric_family_name();
  ::std::string* release_metric_family_name();
  void set_allocated_metric_family_name(::std::string* metric_family_name);

  // string help = 4;
  void clear_help();
  static const int kHelpFieldNumber = 4;
  const ::std::string& help() const;
  void set_help(const ::std::string& value);
  #if LANG_CXX11
  void set_help(::std::string&& value);
  #endif
  void set_help(const char* value);
  void set_help(const char* value, size_t size);
  ::std::string* mutable_help();
  ::std::string* release_help();
  void set_allocated_help(::std::string* help);

  // string unit = 5;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // .prometheus.MetricMetadata.MetricType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::prometheus::MetricMetadata_MetricType type() const;
  void set_type(::prometheus::MetricMetadata_MetricType value);

  // @@protoc_insertion_point(class_scope:prometheus.MetricMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr metric_family_name_;
  ::google::protobuf::internal::ArenaStringPtr help_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sample : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.Sample) */ {
 public:
  Sample();
  virtual ~Sample();

  Sample(const Sample& from);

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(Sample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Sample* other);
  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sample* New() const final {
    return CreateMaybeMessage<Sample>(NULL);
  }

  Sample* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:prometheus.Sample)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Exemplar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.Exemplar) */ {
 public:
  Exemplar();
  virtual ~Exemplar();

  Exemplar(const Exemplar& from);

  inline Exemplar& operator=(const Exemplar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Exemplar(Exemplar&& from) noexcept
    : Exemplar() {
    *this = ::std::move(from);
  }

  inline Exemplar& operator=(Exemplar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Exemplar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Exemplar* internal_default_instance() {
    return reinterpret_cast<const Exemplar*>(
               &_Exemplar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Exemplar* other);
  friend void swap(Exemplar& a, Exemplar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Exemplar* New() const final {
    return CreateMaybeMessage<Exemplar>(NULL);
  }

  Exemplar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Exemplar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Exemplar& from);
  void MergeFrom(const Exemplar& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Exemplar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prometheus.Label labels = 1;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 1;
  ::prometheus::Label* mutable_labels(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::Label >*
      mutable_labels();
  const ::prometheus::Label& labels(int index) const;
  ::prometheus::Label* add_labels();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::Label >&
      labels() const;

  // double value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value() const;
  void set_value(double value);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:prometheus.Exemplar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::Label > labels_;
  double value_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Histogram : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.Histogram) */ {
 public:
  Histogram();
  virtual ~Histogram();

  Histogram(const Histogram& from);

  inline Histogram& operator=(const Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Histogram(Histogram&& from) noexcept
    : Histogram() {
    *this = ::std::move(from);
  }

  inline Histogram& operator=(Histogram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Histogram& default_instance();

  enum CountCase {
    kCountInt = 1,
    kCountFloat = 2,
    COUNT_NOT_SET = 0,
  };

  enum ZeroCountCase {
    kZeroCountInt = 6,
    kZeroCountFloat = 7,
    ZERO_COUNT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Histogram* internal_default_instance() {
    return reinterpret_cast<const Histogram*>(
               &_Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Histogram* other);
  friend void swap(Histogram& a, Histogram& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Histogram* New() const final {
    return CreateMaybeMessage<Histogram>(NULL);
  }

  Histogram* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Histogram>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Histogram& from);
  void MergeFrom(const Histogram& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Histogram* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Histogram_ResetHint ResetHint;
  static const ResetHint UNKNOWN =
    Histogram_ResetHint_UNKNOWN;
  static const ResetHint YES =
    Histogram_ResetHint_YES;
  static const ResetHint NO =
    Histogram_ResetHint_NO;
  static const ResetHint GAUGE =
    Histogram_ResetHint_GAUGE;
  static inline bool ResetHint_IsValid(int value) {
    return Histogram_ResetHint_IsValid(value);
  }
  static const ResetHint ResetHint_MIN =
    Histogram_ResetHint_ResetHint_MIN;
  static const ResetHint ResetHint_MAX =
    Histogram_ResetHint_ResetHint_MAX;
  static const int ResetHint_ARRAYSIZE =
    Histogram_ResetHint_ResetHint_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResetHint_descriptor() {
    return Histogram_ResetHint_descriptor();
  }
  static inline const ::std::string& ResetHint_Name(ResetHint value) {
    return Histogram_ResetHint_Name(value);
  }
  static inline bool ResetHint_Parse(const ::std::string& name,
      ResetHint* value) {
    return Histogram_ResetHint_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .prometheus.BucketSpan negative_spans = 8;
  int negative_spans_size() const;
  void clear_negative_spans();
  static const int kNegativeSpansFieldNumber = 8;
  ::prometheus::BucketSpan* mutable_negative_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::BucketSpan >*
      mutable_negative_spans();
  const ::prometheus::BucketSpan& negative_spans(int index) const;
  ::prometheus::BucketSpan* add_negative_spans();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::BucketSpan >&
      negative_spans() const;

  // repeated sint64 negative_deltas = 9;
  int negative_deltas_size() const;
  void clear_negative_deltas();
  static const int kNegativeDeltasFieldNumber = 9;
  ::google::protobuf::int64 negative_deltas(int index) const;
  void set_negative_deltas(int index, ::google::protobuf::int64 value);
  void add_negative_deltas(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      negative_deltas() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_negative_deltas();

  // repeated double negative_counts = 10;
  int negative_counts_size() const;
  void clear_negative_counts();
  static const int kNegativeCountsFieldNumber = 10;
  double negative_counts(int index) const;
  void set_negative_counts(int index, double value);
  void add_negative_counts(double value);
  const ::google::protobuf::RepeatedField< double >&
      negative_counts() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_negative_counts();

  // repeated .prometheus.BucketSpan positive_spans = 11;
  int positive_spans_size() const;
  void clear_positive_spans();
  static const int kPositiveSpansFieldNumber = 11;
  ::prometheus::BucketSpan* mutable_positive_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::BucketSpan >*
      mutable_positive_spans();
  const ::prometheus::BucketSpan& positive_spans(int index) const;
  ::prometheus::BucketSpan* add_positive_spans();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::BucketSpan >&
      positive_spans() const;

  // repeated sint64 positive_deltas = 12;
  int positive_deltas_size() const;
  void clear_positive_deltas();
  static const int kPositiveDeltasFieldNumber = 12;
  ::google::protobuf::int64 positive_deltas(int index) const;
  void set_positive_deltas(int index, ::google::protobuf::int64 value);
  void add_positive_deltas(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      positive_deltas() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_positive_deltas();

  // repeated double positive_counts = 13;
  int positive_counts_size() const;
  void clear_positive_counts();
  static const int kPositiveCountsFieldNumber = 13;
  double positive_counts(int index) const;
  void set_positive_counts(int index, double value);
  void add_positive_counts(double value);
  const ::google::protobuf::RepeatedField< double >&
      positive_counts() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_positive_counts();

  // double sum = 3;
  void clear_sum();
  static const int kSumFieldNumber = 3;
  double sum() const;
  void set_sum(double value);

  // double zero_threshold = 5;
  void clear_zero_threshold();
  static const int kZeroThresholdFieldNumber = 5;
  double zero_threshold() const;
  void set_zero_threshold(double value);

  // sint32 schema = 4;
  void clear_schema();
  static const int kSchemaFieldNumber = 4;
  ::google::protobuf::int32 schema() const;
  void set_schema(::google::protobuf::int32 value);

  // .prometheus.Histogram.ResetHint reset_hint = 14;
  void clear_reset_hint();
  static const int kResetHintFieldNumber = 14;
  ::prometheus::Histogram_ResetHint reset_hint() const;
  void set_reset_hint(::prometheus::Histogram_ResetHint value);

  // int64 timestamp = 15;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 15;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // uint64 count_int = 1;
  private:
  bool has_count_int() const;
  public:
  void clear_count_int();
  static const int kCountIntFieldNumber = 1;
  ::google::protobuf::uint64 count_int() const;
  void set_count_int(::google::protobuf::uint64 value);

  // double count_float = 2;
  private:
  bool has_count_float() const;
  public:
  void clear_count_float();
  static const int kCountFloatFieldNumber = 2;
  double count_float() const;
  void set_count_float(double value);

  // uint64 zero_count_int = 6;
  private:
  bool has_zero_count_int() const;
  public:
  void clear_zero_count_int();
  static const int kZeroCountIntFieldNumber = 6;
  ::google::protobuf::uint64 zero_count_int() const;
  void set_zero_count_int(::google::protobuf::uint64 value);

  // double zero_count_float = 7;
  private:
  bool has_zero_count_float() const;
  public:
  void clear_zero_count_float();
  static const int kZeroCountFloatFieldNumber = 7;
  double zero_count_float() const;
  void set_zero_count_float(double value);

  void clear_count();
  CountCase count_case() const;
  void clear_zero_count();
  ZeroCountCase zero_count_case() const;
  // @@protoc_insertion_point(class_scope:prometheus.Histogram)
 private:
  void set_has_count_int();
  void set_has_count_float();
  void set_has_zero_count_int();
  void set_has_zero_count_float();

  inline bool has_count() const;
  inline void clear_has_count();

  inline bool has_zero_count() const;
  inline void clear_has_zero_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::BucketSpan > negative_spans_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > negative_deltas_;
  mutable int _negative_deltas_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > negative_counts_;
  mutable int _negative_counts_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::BucketSpan > positive_spans_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > positive_deltas_;
  mutable int _positive_deltas_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > positive_counts_;
  mutable int _positive_counts_cached_byte_size_;
  double sum_;
  double zero_threshold_;
  ::google::protobuf::int32 schema_;
  int reset_hint_;
  ::google::protobuf::int64 timestamp_;
  union CountUnion {
    CountUnion() {}
    ::google::protobuf::uint64 count_int_;
    double count_float_;
  } count_;
  union ZeroCountUnion {
    ZeroCountUnion() {}
    ::google::protobuf::uint64 zero_count_int_;
    double zero_count_float_;
  } zero_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BucketSpan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.BucketSpan) */ {
 public:
  BucketSpan();
  virtual ~BucketSpan();

  BucketSpan(const BucketSpan& from);

  inline BucketSpan& operator=(const BucketSpan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BucketSpan(BucketSpan&& from) noexcept
    : BucketSpan() {
    *this = ::std::move(from);
  }

  inline BucketSpan& operator=(BucketSpan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketSpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BucketSpan* internal_default_instance() {
    return reinterpret_cast<const BucketSpan*>(
               &_BucketSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BucketSpan* other);
  friend void swap(BucketSpan& a, BucketSpan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BucketSpan* New() const final {
    return CreateMaybeMessage<BucketSpan>(NULL);
  }

  BucketSpan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BucketSpan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BucketSpan& from);
  void MergeFrom(const BucketSpan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sint32 offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // uint32 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:prometheus.BucketSpan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::uint32 length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeSeries : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.TimeSeries) */ {
 public:
  TimeSeries();
  virtual ~TimeSeries();

  TimeSeries(const TimeSeries& from);

  inline TimeSeries& operator=(const TimeSeries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeSeries(TimeSeries&& from) noexcept
    : TimeSeries() {
    *this = ::std::move(from);
  }

  inline TimeSeries& operator=(TimeSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSeries* internal_default_instance() {
    return reinterpret_cast<const TimeSeries*>(
               &_TimeSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TimeSeries* other);
  friend void swap(TimeSeries& a, TimeSeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeSeries* New() const final {
    return CreateMaybeMessage<TimeSeries>(NULL);
  }

  TimeSeries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimeSeries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimeSeries& from);
  void MergeFrom(const TimeSeries& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSeries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prometheus.Label labels = 1;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 1;
  ::prometheus::Label* mutable_labels(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::Label >*
      mutable_labels();
  const ::prometheus::Label& labels(int index) const;
  ::prometheus::Label* add_labels();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::Label >&
      labels() const;

  // repeated .prometheus.Sample samples = 2;
  int samples_size() const;
  void clear_samples();
  static const int kSamplesFieldNumber = 2;
  ::prometheus::Sample* mutable_samples(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::Sample >*
      mutable_samples();
  const ::prometheus::Sample& samples(int index) const;
  ::prometheus::Sample* add_samples();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::Sample >&
      samples() const;

  // repeated .prometheus.Exemplar exemplars = 3;
  int exemplars_size() const;
  void clear_exemplars();
  static const int kExemplarsFieldNumber = 3;
  ::prometheus::Exemplar* mutable_exemplars(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::Exemplar >*
      mutable_exemplars();
  const ::prometheus::Exemplar& exemplars(int index) const;
  ::prometheus::Exemplar* add_exemplars();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::Exemplar >&
      exemplars() const;

  // repeated .prometheus.Histogram histograms = 4;
  int histograms_size() const;
  void clear_histograms();
  static const int kHistogramsFieldNumber = 4;
  ::prometheus::Histogram* mutable_histograms(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::Histogram >*
      mutable_histograms();
  const ::prometheus::Histogram& histograms(int index) const;
  ::prometheus::Histogram* add_histograms();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::Histogram >&
      histograms() const;

  // @@protoc_insertion_point(class_scope:prometheus.TimeSeries)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::Label > labels_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::Sample > samples_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::Exemplar > exemplars_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::Histogram > histograms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Label : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.Label) */ {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(Label&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Label* other);
  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const final {
    return CreateMaybeMessage<Label>(NULL);
  }

  Label* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:prometheus.Label)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Labels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.Labels) */ {
 public:
  Labels();
  virtual ~Labels();

  Labels(const Labels& from);

  inline Labels& operator=(const Labels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Labels(Labels&& from) noexcept
    : Labels() {
    *this = ::std::move(from);
  }

  inline Labels& operator=(Labels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Labels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Labels* internal_default_instance() {
    return reinterpret_cast<const Labels*>(
               &_Labels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Labels* other);
  friend void swap(Labels& a, Labels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Labels* New() const final {
    return CreateMaybeMessage<Labels>(NULL);
  }

  Labels* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Labels>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Labels& from);
  void MergeFrom(const Labels& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Labels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prometheus.Label labels = 1;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 1;
  ::prometheus::Label* mutable_labels(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::Label >*
      mutable_labels();
  const ::prometheus::Label& labels(int index) const;
  ::prometheus::Label* add_labels();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::Label >&
      labels() const;

  // @@protoc_insertion_point(class_scope:prometheus.Labels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::Label > labels_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabelMatcher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.LabelMatcher) */ {
 public:
  LabelMatcher();
  virtual ~LabelMatcher();

  LabelMatcher(const LabelMatcher& from);

  inline LabelMatcher& operator=(const LabelMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelMatcher(LabelMatcher&& from) noexcept
    : LabelMatcher() {
    *this = ::std::move(from);
  }

  inline LabelMatcher& operator=(LabelMatcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelMatcher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelMatcher* internal_default_instance() {
    return reinterpret_cast<const LabelMatcher*>(
               &_LabelMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LabelMatcher* other);
  friend void swap(LabelMatcher& a, LabelMatcher& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelMatcher* New() const final {
    return CreateMaybeMessage<LabelMatcher>(NULL);
  }

  LabelMatcher* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabelMatcher>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabelMatcher& from);
  void MergeFrom(const LabelMatcher& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelMatcher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LabelMatcher_Type Type;
  static const Type EQ =
    LabelMatcher_Type_EQ;
  static const Type NEQ =
    LabelMatcher_Type_NEQ;
  static const Type RE =
    LabelMatcher_Type_RE;
  static const Type NRE =
    LabelMatcher_Type_NRE;
  static inline bool Type_IsValid(int value) {
    return LabelMatcher_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LabelMatcher_Type_Type_MIN;
  static const Type Type_MAX =
    LabelMatcher_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LabelMatcher_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LabelMatcher_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LabelMatcher_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LabelMatcher_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .prometheus.LabelMatcher.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::prometheus::LabelMatcher_Type type() const;
  void set_type(::prometheus::LabelMatcher_Type value);

  // @@protoc_insertion_point(class_scope:prometheus.LabelMatcher)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadHints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.ReadHints) */ {
 public:
  ReadHints();
  virtual ~ReadHints();

  ReadHints(const ReadHints& from);

  inline ReadHints& operator=(const ReadHints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadHints(ReadHints&& from) noexcept
    : ReadHints() {
    *this = ::std::move(from);
  }

  inline ReadHints& operator=(ReadHints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadHints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadHints* internal_default_instance() {
    return reinterpret_cast<const ReadHints*>(
               &_ReadHints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ReadHints* other);
  friend void swap(ReadHints& a, ReadHints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadHints* New() const final {
    return CreateMaybeMessage<ReadHints>(NULL);
  }

  ReadHints* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadHints>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadHints& from);
  void MergeFrom(const ReadHints& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadHints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string grouping = 5;
  int grouping_size() const;
  void clear_grouping();
  static const int kGroupingFieldNumber = 5;
  const ::std::string& grouping(int index) const;
  ::std::string* mutable_grouping(int index);
  void set_grouping(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_grouping(int index, ::std::string&& value);
  #endif
  void set_grouping(int index, const char* value);
  void set_grouping(int index, const char* value, size_t size);
  ::std::string* add_grouping();
  void add_grouping(const ::std::string& value);
  #if LANG_CXX11
  void add_grouping(::std::string&& value);
  #endif
  void add_grouping(const char* value);
  void add_grouping(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& grouping() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_grouping();

  // string func = 2;
  void clear_func();
  static const int kFuncFieldNumber = 2;
  const ::std::string& func() const;
  void set_func(const ::std::string& value);
  #if LANG_CXX11
  void set_func(::std::string&& value);
  #endif
  void set_func(const char* value);
  void set_func(const char* value, size_t size);
  ::std::string* mutable_func();
  ::std::string* release_func();
  void set_allocated_func(::std::string* func);

  // int64 step_ms = 1;
  void clear_step_ms();
  static const int kStepMsFieldNumber = 1;
  ::google::protobuf::int64 step_ms() const;
  void set_step_ms(::google::protobuf::int64 value);

  // int64 start_ms = 3;
  void clear_start_ms();
  static const int kStartMsFieldNumber = 3;
  ::google::protobuf::int64 start_ms() const;
  void set_start_ms(::google::protobuf::int64 value);

  // int64 end_ms = 4;
  void clear_end_ms();
  static const int kEndMsFieldNumber = 4;
  ::google::protobuf::int64 end_ms() const;
  void set_end_ms(::google::protobuf::int64 value);

  // int64 range_ms = 7;
  void clear_range_ms();
  static const int kRangeMsFieldNumber = 7;
  ::google::protobuf::int64 range_ms() const;
  void set_range_ms(::google::protobuf::int64 value);

  // bool by = 6;
  void clear_by();
  static const int kByFieldNumber = 6;
  bool by() const;
  void set_by(bool value);

  // @@protoc_insertion_point(class_scope:prometheus.ReadHints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> grouping_;
  ::google::protobuf::internal::ArenaStringPtr func_;
  ::google::protobuf::int64 step_ms_;
  ::google::protobuf::int64 start_ms_;
  ::google::protobuf::int64 end_ms_;
  ::google::protobuf::int64 range_ms_;
  bool by_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Chunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.Chunk) */ {
 public:
  Chunk();
  virtual ~Chunk();

  Chunk(const Chunk& from);

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(Chunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Chunk* other);
  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chunk* New() const final {
    return CreateMaybeMessage<Chunk>(NULL);
  }

  Chunk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Chunk_Encoding Encoding;
  static const Encoding UNKNOWN =
    Chunk_Encoding_UNKNOWN;
  static const Encoding XOR =
    Chunk_Encoding_XOR;
  static const Encoding HISTOGRAM =
    Chunk_Encoding_HISTOGRAM;
  static const Encoding FLOAT_HISTOGRAM =
    Chunk_Encoding_FLOAT_HISTOGRAM;
  static inline bool Encoding_IsValid(int value) {
    return Chunk_Encoding_IsValid(value);
  }
  static const Encoding Encoding_MIN =
    Chunk_Encoding_Encoding_MIN;
  static const Encoding Encoding_MAX =
    Chunk_Encoding_Encoding_MAX;
  static const int Encoding_ARRAYSIZE =
    Chunk_Encoding_Encoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Encoding_descriptor() {
    return Chunk_Encoding_descriptor();
  }
  static inline const ::std::string& Encoding_Name(Encoding value) {
    return Chunk_Encoding_Name(value);
  }
  static inline bool Encoding_Parse(const ::std::string& name,
      Encoding* value) {
    return Chunk_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int64 min_time_ms = 1;
  void clear_min_time_ms();
  static const int kMinTimeMsFieldNumber = 1;
  ::google::protobuf::int64 min_time_ms() const;
  void set_min_time_ms(::google::protobuf::int64 value);

  // int64 max_time_ms = 2;
  void clear_max_time_ms();
  static const int kMaxTimeMsFieldNumber = 2;
  ::google::protobuf::int64 max_time_ms() const;
  void set_max_time_ms(::google::protobuf::int64 value);

  // .prometheus.Chunk.Encoding type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::prometheus::Chunk_Encoding type() const;
  void set_type(::prometheus::Chunk_Encoding value);

  // @@protoc_insertion_point(class_scope:prometheus.Chunk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 min_time_ms_;
  ::google::protobuf::int64 max_time_ms_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkedSeries : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prometheus.ChunkedSeries) */ {
 public:
  ChunkedSeries();
  virtual ~ChunkedSeries();

  ChunkedSeries(const ChunkedSeries& from);

  inline ChunkedSeries& operator=(const ChunkedSeries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkedSeries(ChunkedSeries&& from) noexcept
    : ChunkedSeries() {
    *this = ::std::move(from);
  }

  inline ChunkedSeries& operator=(ChunkedSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkedSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkedSeries* internal_default_instance() {
    return reinterpret_cast<const ChunkedSeries*>(
               &_ChunkedSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ChunkedSeries* other);
  friend void swap(ChunkedSeries& a, ChunkedSeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkedSeries* New() const final {
    return CreateMaybeMessage<ChunkedSeries>(NULL);
  }

  ChunkedSeries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkedSeries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkedSeries& from);
  void MergeFrom(const ChunkedSeries& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkedSeries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prometheus.Label labels = 1;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 1;
  ::prometheus::Label* mutable_labels(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::Label >*
      mutable_labels();
  const ::prometheus::Label& labels(int index) const;
  ::prometheus::Label* add_labels();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::Label >&
      labels() const;

  // repeated .prometheus.Chunk chunks = 2;
  int chunks_size() const;
  void clear_chunks();
  static const int kChunksFieldNumber = 2;
  ::prometheus::Chunk* mutable_chunks(int index);
  ::google::protobuf::RepeatedPtrField< ::prometheus::Chunk >*
      mutable_chunks();
  const ::prometheus::Chunk& chunks(int index) const;
  ::prometheus::Chunk* add_chunks();
  const ::google::protobuf::RepeatedPtrField< ::prometheus::Chunk >&
      chunks() const;

  // @@protoc_insertion_point(class_scope:prometheus.ChunkedSeries)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::Label > labels_;
  ::google::protobuf::RepeatedPtrField< ::prometheus::Chunk > chunks_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_types_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetricMetadata

// .prometheus.MetricMetadata.MetricType type = 1;
inline void MetricMetadata::clear_type() {
  type_ = 0;
}
inline ::prometheus::MetricMetadata_MetricType MetricMetadata::type() const {
  // @@protoc_insertion_point(field_get:prometheus.MetricMetadata.type)
  return static_cast< ::prometheus::MetricMetadata_MetricType >(type_);
}
inline void MetricMetadata::set_type(::prometheus::MetricMetadata_MetricType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:prometheus.MetricMetadata.type)
}

// string metric_family_name = 2;
inline void MetricMetadata::clear_metric_family_name() {
  metric_family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetricMetadata::metric_family_name() const {
  // @@protoc_insertion_point(field_get:prometheus.MetricMetadata.metric_family_name)
  return metric_family_name_.GetNoArena();
}
inline void MetricMetadata::set_metric_family_name(const ::std::string& value) {
  
  metric_family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prometheus.MetricMetadata.metric_family_name)
}
#if LANG_CXX11
inline void MetricMetadata::set_metric_family_name(::std::string&& value) {
  
  metric_family_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prometheus.MetricMetadata.metric_family_name)
}
#endif
inline void MetricMetadata::set_metric_family_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metric_family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prometheus.MetricMetadata.metric_family_name)
}
inline void MetricMetadata::set_metric_family_name(const char* value, size_t size) {
  
  metric_family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prometheus.MetricMetadata.metric_family_name)
}
inline ::std::string* MetricMetadata::mutable_metric_family_name() {
  
  // @@protoc_insertion_point(field_mutable:prometheus.MetricMetadata.metric_family_name)
  return metric_family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricMetadata::release_metric_family_name() {
  // @@protoc_insertion_point(field_release:prometheus.MetricMetadata.metric_family_name)
  
  return metric_family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricMetadata::set_allocated_metric_family_name(::std::string* metric_family_name) {
  if (metric_family_name != NULL) {
    
  } else {
    
  }
  metric_family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric_family_name);
  // @@protoc_insertion_point(field_set_allocated:prometheus.MetricMetadata.metric_family_name)
}

// string help = 4;
inline void MetricMetadata::clear_help() {
  help_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetricMetadata::help() const {
  // @@protoc_insertion_point(field_get:prometheus.MetricMetadata.help)
  return help_.GetNoArena();
}
inline void MetricMetadata::set_help(const ::std::string& value) {
  
  help_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prometheus.MetricMetadata.help)
}
#if LANG_CXX11
inline void MetricMetadata::set_help(::std::string&& value) {
  
  help_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prometheus.MetricMetadata.help)
}
#endif
inline void MetricMetadata::set_help(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  help_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prometheus.MetricMetadata.help)
}
inline void MetricMetadata::set_help(const char* value, size_t size) {
  
  help_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prometheus.MetricMetadata.help)
}
inline ::std::string* MetricMetadata::mutable_help() {
  
  // @@protoc_insertion_point(field_mutable:prometheus.MetricMetadata.help)
  return help_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricMetadata::release_help() {
  // @@protoc_insertion_point(field_release:prometheus.MetricMetadata.help)
  
  return help_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricMetadata::set_allocated_help(::std::string* help) {
  if (help != NULL) {
    
  } else {
    
  }
  help_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), help);
  // @@protoc_insertion_point(field_set_allocated:prometheus.MetricMetadata.help)
}

// string unit = 5;
inline void MetricMetadata::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetricMetadata::unit() const {
  // @@protoc_insertion_point(field_get:prometheus.MetricMetadata.unit)
  return unit_.GetNoArena();
}
inline void MetricMetadata::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prometheus.MetricMetadata.unit)
}
#if LANG_CXX11
inline void MetricMetadata::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prometheus.MetricMetadata.unit)
}
#endif
inline void MetricMetadata::set_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prometheus.MetricMetadata.unit)
}
inline void MetricMetadata::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prometheus.MetricMetadata.unit)
}
inline ::std::string* MetricMetadata::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:prometheus.MetricMetadata.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricMetadata::release_unit() {
  // @@protoc_insertion_point(field_release:prometheus.MetricMetadata.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricMetadata::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:prometheus.MetricMetadata.unit)
}

// -------------------------------------------------------------------

// Sample

// double value = 1;
inline void Sample::clear_value() {
  value_ = 0;
}
inline double Sample::value() const {
  // @@protoc_insertion_point(field_get:prometheus.Sample.value)
  return value_;
}
inline void Sample::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Sample.value)
}

// int64 timestamp = 2;
inline void Sample::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Sample::timestamp() const {
  // @@protoc_insertion_point(field_get:prometheus.Sample.timestamp)
  return timestamp_;
}
inline void Sample::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Sample.timestamp)
}

// -------------------------------------------------------------------

// Exemplar

// repeated .prometheus.Label labels = 1;
inline int Exemplar::labels_size() const {
  return labels_.size();
}
inline void Exemplar::clear_labels() {
  labels_.Clear();
}
inline ::prometheus::Label* Exemplar::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.Exemplar.labels)
  return labels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::Label >*
Exemplar::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.Exemplar.labels)
  return &labels_;
}
inline const ::prometheus::Label& Exemplar::labels(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.Exemplar.labels)
  return labels_.Get(index);
}
inline ::prometheus::Label* Exemplar::add_labels() {
  // @@protoc_insertion_point(field_add:prometheus.Exemplar.labels)
  return labels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::Label >&
Exemplar::labels() const {
  // @@protoc_insertion_point(field_list:prometheus.Exemplar.labels)
  return labels_;
}

// double value = 2;
inline void Exemplar::clear_value() {
  value_ = 0;
}
inline double Exemplar::value() const {
  // @@protoc_insertion_point(field_get:prometheus.Exemplar.value)
  return value_;
}
inline void Exemplar::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Exemplar.value)
}

// int64 timestamp = 3;
inline void Exemplar::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Exemplar::timestamp() const {
  // @@protoc_insertion_point(field_get:prometheus.Exemplar.timestamp)
  return timestamp_;
}
inline void Exemplar::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Exemplar.timestamp)
}

// -------------------------------------------------------------------

// Histogram

// uint64 count_int = 1;
inline bool Histogram::has_count_int() const {
  return count_case() == kCountInt;
}
inline void Histogram::set_has_count_int() {
  _oneof_case_[0] = kCountInt;
}
inline void Histogram::clear_count_int() {
  if (has_count_int()) {
    count_.count_int_ = GOOGLE_ULONGLONG(0);
    clear_has_count();
  }
}
inline ::google::protobuf::uint64 Histogram::count_int() const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.count_int)
  if (has_count_int()) {
    return count_.count_int_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Histogram::set_count_int(::google::protobuf::uint64 value) {
  if (!has_count_int()) {
    clear_count();
    set_has_count_int();
  }
  count_.count_int_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Histogram.count_int)
}

// double count_float = 2;
inline bool Histogram::has_count_float() const {
  return count_case() == kCountFloat;
}
inline void Histogram::set_has_count_float() {
  _oneof_case_[0] = kCountFloat;
}
inline void Histogram::clear_count_float() {
  if (has_count_float()) {
    count_.count_float_ = 0;
    clear_has_count();
  }
}
inline double Histogram::count_float() const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.count_float)
  if (has_count_float()) {
    return count_.count_float_;
  }
  return 0;
}
inline void Histogram::set_count_float(double value) {
  if (!has_count_float()) {
    clear_count();
    set_has_count_float();
  }
  count_.count_float_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Histogram.count_float)
}

// double sum = 3;
inline void Histogram::clear_sum() {
  sum_ = 0;
}
inline double Histogram::sum() const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.sum)
  return sum_;
}
inline void Histogram::set_sum(double value) {
  
  sum_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Histogram.sum)
}

// sint32 schema = 4;
inline void Histogram::clear_schema() {
  schema_ = 0;
}
inline ::google::protobuf::int32 Histogram::schema() const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.schema)
  return schema_;
}
inline void Histogram::set_schema(::google::protobuf::int32 value) {
  
  schema_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Histogram.schema)
}

// double zero_threshold = 5;
inline void Histogram::clear_zero_threshold() {
  zero_threshold_ = 0;
}
inline double Histogram::zero_threshold() const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.zero_threshold)
  return zero_threshold_;
}
inline void Histogram::set_zero_threshold(double value) {
  
  zero_threshold_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Histogram.zero_threshold)
}

// uint64 zero_count_int = 6;
inline bool Histogram::has_zero_count_int() const {
  return zero_count_case() == kZeroCountInt;
}
inline void Histogram::set_has_zero_count_int() {
  _oneof_case_[1] = kZeroCountInt;
}
inline void Histogram::clear_zero_count_int() {
  if (has_zero_count_int()) {
    zero_count_.zero_count_int_ = GOOGLE_ULONGLONG(0);
    clear_has_zero_count();
  }
}
inline ::google::protobuf::uint64 Histogram::zero_count_int() const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.zero_count_int)
  if (has_zero_count_int()) {
    return zero_count_.zero_count_int_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Histogram::set_zero_count_int(::google::protobuf::uint64 value) {
  if (!has_zero_count_int()) {
    clear_zero_count();
    set_has_zero_count_int();
  }
  zero_count_.zero_count_int_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Histogram.zero_count_int)
}

// double zero_count_float = 7;
inline bool Histogram::has_zero_count_float() const {
  return zero_count_case() == kZeroCountFloat;
}
inline void Histogram::set_has_zero_count_float() {
  _oneof_case_[1] = kZeroCountFloat;
}
inline void Histogram::clear_zero_count_float() {
  if (has_zero_count_float()) {
    zero_count_.zero_count_float_ = 0;
    clear_has_zero_count();
  }
}
inline double Histogram::zero_count_float() const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.zero_count_float)
  if (has_zero_count_float()) {
    return zero_count_.zero_count_float_;
  }
  return 0;
}
inline void Histogram::set_zero_count_float(double value) {
  if (!has_zero_count_float()) {
    clear_zero_count();
    set_has_zero_count_float();
  }
  zero_count_.zero_count_float_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Histogram.zero_count_float)
}

// repeated .prometheus.BucketSpan negative_spans = 8;
inline int Histogram::negative_spans_size() const {
  return negative_spans_.size();
}
inline void Histogram::clear_negative_spans() {
  negative_spans_.Clear();
}
inline ::prometheus::BucketSpan* Histogram::mutable_negative_spans(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.Histogram.negative_spans)
  return negative_spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::BucketSpan >*
Histogram::mutable_negative_spans() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.Histogram.negative_spans)
  return &negative_spans_;
}
inline const ::prometheus::BucketSpan& Histogram::negative_spans(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.negative_spans)
  return negative_spans_.Get(index);
}
inline ::prometheus::BucketSpan* Histogram::add_negative_spans() {
  // @@protoc_insertion_point(field_add:prometheus.Histogram.negative_spans)
  return negative_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::BucketSpan >&
Histogram::negative_spans() const {
  // @@protoc_insertion_point(field_list:prometheus.Histogram.negative_spans)
  return negative_spans_;
}

// repeated sint64 negative_deltas = 9;
inline int Histogram::negative_deltas_size() const {
  return negative_deltas_.size();
}
inline void Histogram::clear_negative_deltas() {
  negative_deltas_.Clear();
}
inline ::google::protobuf::int64 Histogram::negative_deltas(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.negative_deltas)
  return negative_deltas_.Get(index);
}
inline void Histogram::set_negative_deltas(int index, ::google::protobuf::int64 value) {
  negative_deltas_.Set(index, value);
  // @@protoc_insertion_point(field_set:prometheus.Histogram.negative_deltas)
}
inline void Histogram::add_negative_deltas(::google::protobuf::int64 value) {
  negative_deltas_.Add(value);
  // @@protoc_insertion_point(field_add:prometheus.Histogram.negative_deltas)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Histogram::negative_deltas() const {
  // @@protoc_insertion_point(field_list:prometheus.Histogram.negative_deltas)
  return negative_deltas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Histogram::mutable_negative_deltas() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.Histogram.negative_deltas)
  return &negative_deltas_;
}

// repeated double negative_counts = 10;
inline int Histogram::negative_counts_size() const {
  return negative_counts_.size();
}
inline void Histogram::clear_negative_counts() {
  negative_counts_.Clear();
}
inline double Histogram::negative_counts(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.negative_counts)
  return negative_counts_.Get(index);
}
inline void Histogram::set_negative_counts(int index, double value) {
  negative_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:prometheus.Histogram.negative_counts)
}
inline void Histogram::add_negative_counts(double value) {
  negative_counts_.Add(value);
  // @@protoc_insertion_point(field_add:prometheus.Histogram.negative_counts)
}
inline const ::google::protobuf::RepeatedField< double >&
Histogram::negative_counts() const {
  // @@protoc_insertion_point(field_list:prometheus.Histogram.negative_counts)
  return negative_counts_;
}
inline ::google::protobuf::RepeatedField< double >*
Histogram::mutable_negative_counts() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.Histogram.negative_counts)
  return &negative_counts_;
}

// repeated .prometheus.BucketSpan positive_spans = 11;
inline int Histogram::positive_spans_size() const {
  return positive_spans_.size();
}
inline void Histogram::clear_positive_spans() {
  positive_spans_.Clear();
}
inline ::prometheus::BucketSpan* Histogram::mutable_positive_spans(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.Histogram.positive_spans)
  return positive_spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::BucketSpan >*
Histogram::mutable_positive_spans() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.Histogram.positive_spans)
  return &positive_spans_;
}
inline const ::prometheus::BucketSpan& Histogram::positive_spans(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.positive_spans)
  return positive_spans_.Get(index);
}
inline ::prometheus::BucketSpan* Histogram::add_positive_spans() {
  // @@protoc_insertion_point(field_add:prometheus.Histogram.positive_spans)
  return positive_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::BucketSpan >&
Histogram::positive_spans() const {
  // @@protoc_insertion_point(field_list:prometheus.Histogram.positive_spans)
  return positive_spans_;
}

// repeated sint64 positive_deltas = 12;
inline int Histogram::positive_deltas_size() const {
  return positive_deltas_.size();
}
inline void Histogram::clear_positive_deltas() {
  positive_deltas_.Clear();
}
inline ::google::protobuf::int64 Histogram::positive_deltas(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.positive_deltas)
  return positive_deltas_.Get(index);
}
inline void Histogram::set_positive_deltas(int index, ::google::protobuf::int64 value) {
  positive_deltas_.Set(index, value);
  // @@protoc_insertion_point(field_set:prometheus.Histogram.positive_deltas)
}
inline void Histogram::add_positive_deltas(::google::protobuf::int64 value) {
  positive_deltas_.Add(value);
  // @@protoc_insertion_point(field_add:prometheus.Histogram.positive_deltas)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Histogram::positive_deltas() const {
  // @@protoc_insertion_point(field_list:prometheus.Histogram.positive_deltas)
  return positive_deltas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Histogram::mutable_positive_deltas() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.Histogram.positive_deltas)
  return &positive_deltas_;
}

// repeated double positive_counts = 13;
inline int Histogram::positive_counts_size() const {
  return positive_counts_.size();
}
inline void Histogram::clear_positive_counts() {
  positive_counts_.Clear();
}
inline double Histogram::positive_counts(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.positive_counts)
  return positive_counts_.Get(index);
}
inline void Histogram::set_positive_counts(int index, double value) {
  positive_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:prometheus.Histogram.positive_counts)
}
inline void Histogram::add_positive_counts(double value) {
  positive_counts_.Add(value);
  // @@protoc_insertion_point(field_add:prometheus.Histogram.positive_counts)
}
inline const ::google::protobuf::RepeatedField< double >&
Histogram::positive_counts() const {
  // @@protoc_insertion_point(field_list:prometheus.Histogram.positive_counts)
  return positive_counts_;
}
inline ::google::protobuf::RepeatedField< double >*
Histogram::mutable_positive_counts() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.Histogram.positive_counts)
  return &positive_counts_;
}

// .prometheus.Histogram.ResetHint reset_hint = 14;
inline void Histogram::clear_reset_hint() {
  reset_hint_ = 0;
}
inline ::prometheus::Histogram_ResetHint Histogram::reset_hint() const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.reset_hint)
  return static_cast< ::prometheus::Histogram_ResetHint >(reset_hint_);
}
inline void Histogram::set_reset_hint(::prometheus::Histogram_ResetHint value) {
  
  reset_hint_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Histogram.reset_hint)
}

// int64 timestamp = 15;
inline void Histogram::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Histogram::timestamp() const {
  // @@protoc_insertion_point(field_get:prometheus.Histogram.timestamp)
  return timestamp_;
}
inline void Histogram::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Histogram.timestamp)
}

inline bool Histogram::has_count() const {
  return count_case() != COUNT_NOT_SET;
}
inline void Histogram::clear_has_count() {
  _oneof_case_[0] = COUNT_NOT_SET;
}
inline bool Histogram::has_zero_count() const {
  return zero_count_case() != ZERO_COUNT_NOT_SET;
}
inline void Histogram::clear_has_zero_count() {
  _oneof_case_[1] = ZERO_COUNT_NOT_SET;
}
inline Histogram::CountCase Histogram::count_case() const {
  return Histogram::CountCase(_oneof_case_[0]);
}
inline Histogram::ZeroCountCase Histogram::zero_count_case() const {
  return Histogram::ZeroCountCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// BucketSpan

// sint32 offset = 1;
inline void BucketSpan::clear_offset() {
  offset_ = 0;
}
inline ::google::protobuf::int32 BucketSpan::offset() const {
  // @@protoc_insertion_point(field_get:prometheus.BucketSpan.offset)
  return offset_;
}
inline void BucketSpan::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:prometheus.BucketSpan.offset)
}

// uint32 length = 2;
inline void BucketSpan::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 BucketSpan::length() const {
  // @@protoc_insertion_point(field_get:prometheus.BucketSpan.length)
  return length_;
}
inline void BucketSpan::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:prometheus.BucketSpan.length)
}

// -------------------------------------------------------------------

// TimeSeries

// repeated .prometheus.Label labels = 1;
inline int TimeSeries::labels_size() const {
  return labels_.size();
}
inline void TimeSeries::clear_labels() {
  labels_.Clear();
}
inline ::prometheus::Label* TimeSeries::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.TimeSeries.labels)
  return labels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::Label >*
TimeSeries::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.TimeSeries.labels)
  return &labels_;
}
inline const ::prometheus::Label& TimeSeries::labels(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.TimeSeries.labels)
  return labels_.Get(index);
}
inline ::prometheus::Label* TimeSeries::add_labels() {
  // @@protoc_insertion_point(field_add:prometheus.TimeSeries.labels)
  return labels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::Label >&
TimeSeries::labels() const {
  // @@protoc_insertion_point(field_list:prometheus.TimeSeries.labels)
  return labels_;
}

// repeated .prometheus.Sample samples = 2;
inline int TimeSeries::samples_size() const {
  return samples_.size();
}
inline void TimeSeries::clear_samples() {
  samples_.Clear();
}
inline ::prometheus::Sample* TimeSeries::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.TimeSeries.samples)
  return samples_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::Sample >*
TimeSeries::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.TimeSeries.samples)
  return &samples_;
}
inline const ::prometheus::Sample& TimeSeries::samples(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.TimeSeries.samples)
  return samples_.Get(index);
}
inline ::prometheus::Sample* TimeSeries::add_samples() {
  // @@protoc_insertion_point(field_add:prometheus.TimeSeries.samples)
  return samples_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::Sample >&
TimeSeries::samples() const {
  // @@protoc_insertion_point(field_list:prometheus.TimeSeries.samples)
  return samples_;
}

// repeated .prometheus.Exemplar exemplars = 3;
inline int TimeSeries::exemplars_size() const {
  return exemplars_.size();
}
inline void TimeSeries::clear_exemplars() {
  exemplars_.Clear();
}
inline ::prometheus::Exemplar* TimeSeries::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.TimeSeries.exemplars)
  return exemplars_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::Exemplar >*
TimeSeries::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.TimeSeries.exemplars)
  return &exemplars_;
}
inline const ::prometheus::Exemplar& TimeSeries::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.TimeSeries.exemplars)
  return exemplars_.Get(index);
}
inline ::prometheus::Exemplar* TimeSeries::add_exemplars() {
  // @@protoc_insertion_point(field_add:prometheus.TimeSeries.exemplars)
  return exemplars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::Exemplar >&
TimeSeries::exemplars() const {
  // @@protoc_insertion_point(field_list:prometheus.TimeSeries.exemplars)
  return exemplars_;
}

// repeated .prometheus.Histogram histograms = 4;
inline int TimeSeries::histograms_size() const {
  return histograms_.size();
}
inline void TimeSeries::clear_histograms() {
  histograms_.Clear();
}
inline ::prometheus::Histogram* TimeSeries::mutable_histograms(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.TimeSeries.histograms)
  return histograms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::Histogram >*
TimeSeries::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.TimeSeries.histograms)
  return &histograms_;
}
inline const ::prometheus::Histogram& TimeSeries::histograms(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.TimeSeries.histograms)
  return histograms_.Get(index);
}
inline ::prometheus::Histogram* TimeSeries::add_histograms() {
  // @@protoc_insertion_point(field_add:prometheus.TimeSeries.histograms)
  return histograms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::Histogram >&
TimeSeries::histograms() const {
  // @@protoc_insertion_point(field_list:prometheus.TimeSeries.histograms)
  return histograms_;
}

// -------------------------------------------------------------------

// Label

// string name = 1;
inline void Label::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Label::name() const {
  // @@protoc_insertion_point(field_get:prometheus.Label.name)
  return name_.GetNoArena();
}
inline void Label::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prometheus.Label.name)
}
#if LANG_CXX11
inline void Label::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prometheus.Label.name)
}
#endif
inline void Label::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prometheus.Label.name)
}
inline void Label::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prometheus.Label.name)
}
inline ::std::string* Label::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:prometheus.Label.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Label::release_name() {
  // @@protoc_insertion_point(field_release:prometheus.Label.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Label::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:prometheus.Label.name)
}

// string value = 2;
inline void Label::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Label::value() const {
  // @@protoc_insertion_point(field_get:prometheus.Label.value)
  return value_.GetNoArena();
}
inline void Label::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prometheus.Label.value)
}
#if LANG_CXX11
inline void Label::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prometheus.Label.value)
}
#endif
inline void Label::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prometheus.Label.value)
}
inline void Label::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prometheus.Label.value)
}
inline ::std::string* Label::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:prometheus.Label.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Label::release_value() {
  // @@protoc_insertion_point(field_release:prometheus.Label.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Label::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:prometheus.Label.value)
}

// -------------------------------------------------------------------

// Labels

// repeated .prometheus.Label labels = 1;
inline int Labels::labels_size() const {
  return labels_.size();
}
inline void Labels::clear_labels() {
  labels_.Clear();
}
inline ::prometheus::Label* Labels::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.Labels.labels)
  return labels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::Label >*
Labels::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.Labels.labels)
  return &labels_;
}
inline const ::prometheus::Label& Labels::labels(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.Labels.labels)
  return labels_.Get(index);
}
inline ::prometheus::Label* Labels::add_labels() {
  // @@protoc_insertion_point(field_add:prometheus.Labels.labels)
  return labels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::Label >&
Labels::labels() const {
  // @@protoc_insertion_point(field_list:prometheus.Labels.labels)
  return labels_;
}

// -------------------------------------------------------------------

// LabelMatcher

// .prometheus.LabelMatcher.Type type = 1;
inline void LabelMatcher::clear_type() {
  type_ = 0;
}
inline ::prometheus::LabelMatcher_Type LabelMatcher::type() const {
  // @@protoc_insertion_point(field_get:prometheus.LabelMatcher.type)
  return static_cast< ::prometheus::LabelMatcher_Type >(type_);
}
inline void LabelMatcher::set_type(::prometheus::LabelMatcher_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:prometheus.LabelMatcher.type)
}

// string name = 2;
inline void LabelMatcher::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LabelMatcher::name() const {
  // @@protoc_insertion_point(field_get:prometheus.LabelMatcher.name)
  return name_.GetNoArena();
}
inline void LabelMatcher::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prometheus.LabelMatcher.name)
}
#if LANG_CXX11
inline void LabelMatcher::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prometheus.LabelMatcher.name)
}
#endif
inline void LabelMatcher::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prometheus.LabelMatcher.name)
}
inline void LabelMatcher::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prometheus.LabelMatcher.name)
}
inline ::std::string* LabelMatcher::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:prometheus.LabelMatcher.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelMatcher::release_name() {
  // @@protoc_insertion_point(field_release:prometheus.LabelMatcher.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelMatcher::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:prometheus.LabelMatcher.name)
}

// string value = 3;
inline void LabelMatcher::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LabelMatcher::value() const {
  // @@protoc_insertion_point(field_get:prometheus.LabelMatcher.value)
  return value_.GetNoArena();
}
inline void LabelMatcher::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prometheus.LabelMatcher.value)
}
#if LANG_CXX11
inline void LabelMatcher::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prometheus.LabelMatcher.value)
}
#endif
inline void LabelMatcher::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prometheus.LabelMatcher.value)
}
inline void LabelMatcher::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prometheus.LabelMatcher.value)
}
inline ::std::string* LabelMatcher::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:prometheus.LabelMatcher.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelMatcher::release_value() {
  // @@protoc_insertion_point(field_release:prometheus.LabelMatcher.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelMatcher::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:prometheus.LabelMatcher.value)
}

// -------------------------------------------------------------------

// ReadHints

// int64 step_ms = 1;
inline void ReadHints::clear_step_ms() {
  step_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadHints::step_ms() const {
  // @@protoc_insertion_point(field_get:prometheus.ReadHints.step_ms)
  return step_ms_;
}
inline void ReadHints::set_step_ms(::google::protobuf::int64 value) {
  
  step_ms_ = value;
  // @@protoc_insertion_point(field_set:prometheus.ReadHints.step_ms)
}

// string func = 2;
inline void ReadHints::clear_func() {
  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadHints::func() const {
  // @@protoc_insertion_point(field_get:prometheus.ReadHints.func)
  return func_.GetNoArena();
}
inline void ReadHints::set_func(const ::std::string& value) {
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prometheus.ReadHints.func)
}
#if LANG_CXX11
inline void ReadHints::set_func(::std::string&& value) {
  
  func_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prometheus.ReadHints.func)
}
#endif
inline void ReadHints::set_func(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prometheus.ReadHints.func)
}
inline void ReadHints::set_func(const char* value, size_t size) {
  
  func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prometheus.ReadHints.func)
}
inline ::std::string* ReadHints::mutable_func() {
  
  // @@protoc_insertion_point(field_mutable:prometheus.ReadHints.func)
  return func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadHints::release_func() {
  // @@protoc_insertion_point(field_release:prometheus.ReadHints.func)
  
  return func_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadHints::set_allocated_func(::std::string* func) {
  if (func != NULL) {
    
  } else {
    
  }
  func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func);
  // @@protoc_insertion_point(field_set_allocated:prometheus.ReadHints.func)
}

// int64 start_ms = 3;
inline void ReadHints::clear_start_ms() {
  start_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadHints::start_ms() const {
  // @@protoc_insertion_point(field_get:prometheus.ReadHints.start_ms)
  return start_ms_;
}
inline void ReadHints::set_start_ms(::google::protobuf::int64 value) {
  
  start_ms_ = value;
  // @@protoc_insertion_point(field_set:prometheus.ReadHints.start_ms)
}

// int64 end_ms = 4;
inline void ReadHints::clear_end_ms() {
  end_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadHints::end_ms() const {
  // @@protoc_insertion_point(field_get:prometheus.ReadHints.end_ms)
  return end_ms_;
}
inline void ReadHints::set_end_ms(::google::protobuf::int64 value) {
  
  end_ms_ = value;
  // @@protoc_insertion_point(field_set:prometheus.ReadHints.end_ms)
}

// repeated string grouping = 5;
inline int ReadHints::grouping_size() const {
  return grouping_.size();
}
inline void ReadHints::clear_grouping() {
  grouping_.Clear();
}
inline const ::std::string& ReadHints::grouping(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.ReadHints.grouping)
  return grouping_.Get(index);
}
inline ::std::string* ReadHints::mutable_grouping(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.ReadHints.grouping)
  return grouping_.Mutable(index);
}
inline void ReadHints::set_grouping(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:prometheus.ReadHints.grouping)
  grouping_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReadHints::set_grouping(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:prometheus.ReadHints.grouping)
  grouping_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReadHints::set_grouping(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  grouping_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prometheus.ReadHints.grouping)
}
inline void ReadHints::set_grouping(int index, const char* value, size_t size) {
  grouping_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prometheus.ReadHints.grouping)
}
inline ::std::string* ReadHints::add_grouping() {
  // @@protoc_insertion_point(field_add_mutable:prometheus.ReadHints.grouping)
  return grouping_.Add();
}
inline void ReadHints::add_grouping(const ::std::string& value) {
  grouping_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prometheus.ReadHints.grouping)
}
#if LANG_CXX11
inline void ReadHints::add_grouping(::std::string&& value) {
  grouping_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prometheus.ReadHints.grouping)
}
#endif
inline void ReadHints::add_grouping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  grouping_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prometheus.ReadHints.grouping)
}
inline void ReadHints::add_grouping(const char* value, size_t size) {
  grouping_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prometheus.ReadHints.grouping)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReadHints::grouping() const {
  // @@protoc_insertion_point(field_list:prometheus.ReadHints.grouping)
  return grouping_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReadHints::mutable_grouping() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.ReadHints.grouping)
  return &grouping_;
}

// bool by = 6;
inline void ReadHints::clear_by() {
  by_ = false;
}
inline bool ReadHints::by() const {
  // @@protoc_insertion_point(field_get:prometheus.ReadHints.by)
  return by_;
}
inline void ReadHints::set_by(bool value) {
  
  by_ = value;
  // @@protoc_insertion_point(field_set:prometheus.ReadHints.by)
}

// int64 range_ms = 7;
inline void ReadHints::clear_range_ms() {
  range_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadHints::range_ms() const {
  // @@protoc_insertion_point(field_get:prometheus.ReadHints.range_ms)
  return range_ms_;
}
inline void ReadHints::set_range_ms(::google::protobuf::int64 value) {
  
  range_ms_ = value;
  // @@protoc_insertion_point(field_set:prometheus.ReadHints.range_ms)
}

// -------------------------------------------------------------------

// Chunk

// int64 min_time_ms = 1;
inline void Chunk::clear_min_time_ms() {
  min_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Chunk::min_time_ms() const {
  // @@protoc_insertion_point(field_get:prometheus.Chunk.min_time_ms)
  return min_time_ms_;
}
inline void Chunk::set_min_time_ms(::google::protobuf::int64 value) {
  
  min_time_ms_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Chunk.min_time_ms)
}

// int64 max_time_ms = 2;
inline void Chunk::clear_max_time_ms() {
  max_time_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Chunk::max_time_ms() const {
  // @@protoc_insertion_point(field_get:prometheus.Chunk.max_time_ms)
  return max_time_ms_;
}
inline void Chunk::set_max_time_ms(::google::protobuf::int64 value) {
  
  max_time_ms_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Chunk.max_time_ms)
}

// .prometheus.Chunk.Encoding type = 3;
inline void Chunk::clear_type() {
  type_ = 0;
}
inline ::prometheus::Chunk_Encoding Chunk::type() const {
  // @@protoc_insertion_point(field_get:prometheus.Chunk.type)
  return static_cast< ::prometheus::Chunk_Encoding >(type_);
}
inline void Chunk::set_type(::prometheus::Chunk_Encoding value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:prometheus.Chunk.type)
}

// bytes data = 4;
inline void Chunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chunk::data() const {
  // @@protoc_insertion_point(field_get:prometheus.Chunk.data)
  return data_.GetNoArena();
}
inline void Chunk::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prometheus.Chunk.data)
}
#if LANG_CXX11
inline void Chunk::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prometheus.Chunk.data)
}
#endif
inline void Chunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prometheus.Chunk.data)
}
inline void Chunk::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prometheus.Chunk.data)
}
inline ::std::string* Chunk::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:prometheus.Chunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chunk::release_data() {
  // @@protoc_insertion_point(field_release:prometheus.Chunk.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:prometheus.Chunk.data)
}

// -------------------------------------------------------------------

// ChunkedSeries

// repeated .prometheus.Label labels = 1;
inline int ChunkedSeries::labels_size() const {
  return labels_.size();
}
inline void ChunkedSeries::clear_labels() {
  labels_.Clear();
}
inline ::prometheus::Label* ChunkedSeries::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.ChunkedSeries.labels)
  return labels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::Label >*
ChunkedSeries::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.ChunkedSeries.labels)
  return &labels_;
}
inline const ::prometheus::Label& ChunkedSeries::labels(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.ChunkedSeries.labels)
  return labels_.Get(index);
}
inline ::prometheus::Label* ChunkedSeries::add_labels() {
  // @@protoc_insertion_point(field_add:prometheus.ChunkedSeries.labels)
  return labels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::Label >&
ChunkedSeries::labels() const {
  // @@protoc_insertion_point(field_list:prometheus.ChunkedSeries.labels)
  return labels_;
}

// repeated .prometheus.Chunk chunks = 2;
inline int ChunkedSeries::chunks_size() const {
  return chunks_.size();
}
inline void ChunkedSeries::clear_chunks() {
  chunks_.Clear();
}
inline ::prometheus::Chunk* ChunkedSeries::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:prometheus.ChunkedSeries.chunks)
  return chunks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prometheus::Chunk >*
ChunkedSeries::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:prometheus.ChunkedSeries.chunks)
  return &chunks_;
}
inline const ::prometheus::Chunk& ChunkedSeries::chunks(int index) const {
  // @@protoc_insertion_point(field_get:prometheus.ChunkedSeries.chunks)
  return chunks_.Get(index);
}
inline ::prometheus::Chunk* ChunkedSeries::add_chunks() {
  // @@protoc_insertion_point(field_add:prometheus.ChunkedSeries.chunks)
  return chunks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prometheus::Chunk >&
ChunkedSeries::chunks() const {
  // @@protoc_insertion_point(field_list:prometheus.ChunkedSeries.chunks)
  return chunks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prometheus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::prometheus::MetricMetadata_MetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prometheus::MetricMetadata_MetricType>() {
  return ::prometheus::MetricMetadata_MetricType_descriptor();
}
template <> struct is_proto_enum< ::prometheus::Histogram_ResetHint> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prometheus::Histogram_ResetHint>() {
  return ::prometheus::Histogram_ResetHint_descriptor();
}
template <> struct is_proto_enum< ::prometheus::LabelMatcher_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prometheus::LabelMatcher_Type>() {
  return ::prometheus::LabelMatcher_Type_descriptor();
}
template <> struct is_proto_enum< ::prometheus::Chunk_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prometheus::Chunk_Encoding>() {
  return ::prometheus::Chunk_Encoding_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_types_2eproto
