// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_types_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BucketSpan;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Chunk;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Label;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sample;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Exemplar;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Histogram;
}  // namespace protobuf_types_2eproto
namespace prometheus {
class MetricMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetricMetadata>
      _instance;
} _MetricMetadata_default_instance_;
class SampleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sample>
      _instance;
} _Sample_default_instance_;
class ExemplarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Exemplar>
      _instance;
} _Exemplar_default_instance_;
class HistogramDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Histogram>
      _instance;
  ::google::protobuf::uint64 count_int_;
  double count_float_;
  ::google::protobuf::uint64 zero_count_int_;
  double zero_count_float_;
} _Histogram_default_instance_;
class BucketSpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BucketSpan>
      _instance;
} _BucketSpan_default_instance_;
class TimeSeriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeSeries>
      _instance;
} _TimeSeries_default_instance_;
class LabelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Label>
      _instance;
} _Label_default_instance_;
class LabelsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Labels>
      _instance;
} _Labels_default_instance_;
class LabelMatcherDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LabelMatcher>
      _instance;
} _LabelMatcher_default_instance_;
class ReadHintsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadHints>
      _instance;
} _ReadHints_default_instance_;
class ChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chunk>
      _instance;
} _Chunk_default_instance_;
class ChunkedSeriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkedSeries>
      _instance;
} _ChunkedSeries_default_instance_;
}  // namespace prometheus
namespace protobuf_types_2eproto {
static void InitDefaultsMetricMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_MetricMetadata_default_instance_;
    new (ptr) ::prometheus::MetricMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::MetricMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MetricMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMetricMetadata}, {}};

static void InitDefaultsSample() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_Sample_default_instance_;
    new (ptr) ::prometheus::Sample();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::Sample::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sample =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSample}, {}};

static void InitDefaultsExemplar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_Exemplar_default_instance_;
    new (ptr) ::prometheus::Exemplar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::Exemplar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Exemplar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExemplar}, {
      &protobuf_types_2eproto::scc_info_Label.base,}};

static void InitDefaultsHistogram() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_Histogram_default_instance_;
    new (ptr) ::prometheus::Histogram();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::Histogram::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Histogram =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHistogram}, {
      &protobuf_types_2eproto::scc_info_BucketSpan.base,}};

static void InitDefaultsBucketSpan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_BucketSpan_default_instance_;
    new (ptr) ::prometheus::BucketSpan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::BucketSpan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BucketSpan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBucketSpan}, {}};

static void InitDefaultsTimeSeries() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_TimeSeries_default_instance_;
    new (ptr) ::prometheus::TimeSeries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::TimeSeries::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TimeSeries =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTimeSeries}, {
      &protobuf_types_2eproto::scc_info_Label.base,
      &protobuf_types_2eproto::scc_info_Sample.base,
      &protobuf_types_2eproto::scc_info_Exemplar.base,
      &protobuf_types_2eproto::scc_info_Histogram.base,}};

static void InitDefaultsLabel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_Label_default_instance_;
    new (ptr) ::prometheus::Label();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::Label::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Label =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLabel}, {}};

static void InitDefaultsLabels() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_Labels_default_instance_;
    new (ptr) ::prometheus::Labels();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::Labels::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Labels =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLabels}, {
      &protobuf_types_2eproto::scc_info_Label.base,}};

static void InitDefaultsLabelMatcher() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_LabelMatcher_default_instance_;
    new (ptr) ::prometheus::LabelMatcher();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::LabelMatcher::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LabelMatcher =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLabelMatcher}, {}};

static void InitDefaultsReadHints() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_ReadHints_default_instance_;
    new (ptr) ::prometheus::ReadHints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::ReadHints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadHints =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadHints}, {}};

static void InitDefaultsChunk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_Chunk_default_instance_;
    new (ptr) ::prometheus::Chunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::Chunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Chunk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChunk}, {}};

static void InitDefaultsChunkedSeries() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::prometheus::_ChunkedSeries_default_instance_;
    new (ptr) ::prometheus::ChunkedSeries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prometheus::ChunkedSeries::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ChunkedSeries =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsChunkedSeries}, {
      &protobuf_types_2eproto::scc_info_Label.base,
      &protobuf_types_2eproto::scc_info_Chunk.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MetricMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sample.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Exemplar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Histogram.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BucketSpan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimeSeries.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Label.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Labels.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LabelMatcher.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadHints.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Chunk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkedSeries.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::MetricMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::MetricMetadata, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::MetricMetadata, metric_family_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::MetricMetadata, help_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::MetricMetadata, unit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Sample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Sample, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Sample, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Exemplar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Exemplar, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Exemplar, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Exemplar, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::prometheus::HistogramDefaultTypeInternal, count_int_),
  offsetof(::prometheus::HistogramDefaultTypeInternal, count_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, sum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, schema_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, zero_threshold_),
  offsetof(::prometheus::HistogramDefaultTypeInternal, zero_count_int_),
  offsetof(::prometheus::HistogramDefaultTypeInternal, zero_count_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, negative_spans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, negative_deltas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, negative_counts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, positive_spans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, positive_deltas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, positive_counts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, reset_hint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Histogram, zero_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::BucketSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::BucketSpan, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::BucketSpan, length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::TimeSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::TimeSeries, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::TimeSeries, samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::TimeSeries, exemplars_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::TimeSeries, histograms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Label, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Label, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Labels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Labels, labels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::LabelMatcher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::LabelMatcher, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::LabelMatcher, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::LabelMatcher, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ReadHints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ReadHints, step_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ReadHints, func_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ReadHints, start_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ReadHints, end_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ReadHints, grouping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ReadHints, by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ReadHints, range_ms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Chunk, min_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Chunk, max_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Chunk, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::Chunk, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ChunkedSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ChunkedSeries, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prometheus::ChunkedSeries, chunks_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::prometheus::MetricMetadata)},
  { 9, -1, sizeof(::prometheus::Sample)},
  { 16, -1, sizeof(::prometheus::Exemplar)},
  { 24, -1, sizeof(::prometheus::Histogram)},
  { 46, -1, sizeof(::prometheus::BucketSpan)},
  { 53, -1, sizeof(::prometheus::TimeSeries)},
  { 62, -1, sizeof(::prometheus::Label)},
  { 69, -1, sizeof(::prometheus::Labels)},
  { 75, -1, sizeof(::prometheus::LabelMatcher)},
  { 83, -1, sizeof(::prometheus::ReadHints)},
  { 95, -1, sizeof(::prometheus::Chunk)},
  { 104, -1, sizeof(::prometheus::ChunkedSeries)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_MetricMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_Sample_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_Exemplar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_Histogram_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_BucketSpan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_TimeSeries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_Label_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_Labels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_LabelMatcher_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_ReadHints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_Chunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prometheus::_ChunkedSeries_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "types.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013types.proto\022\nprometheus\"\370\001\n\016MetricMeta"
      "data\0223\n\004type\030\001 \001(\0162%.prometheus.MetricMe"
      "tadata.MetricType\022\032\n\022metric_family_name\030"
      "\002 \001(\t\022\014\n\004help\030\004 \001(\t\022\014\n\004unit\030\005 \001(\t\"y\n\nMet"
      "ricType\022\013\n\007UNKNOWN\020\000\022\013\n\007COUNTER\020\001\022\t\n\005GAU"
      "GE\020\002\022\r\n\tHISTOGRAM\020\003\022\022\n\016GAUGEHISTOGRAM\020\004\022"
      "\013\n\007SUMMARY\020\005\022\010\n\004INFO\020\006\022\014\n\010STATESET\020\007\"*\n\006"
      "Sample\022\r\n\005value\030\001 \001(\001\022\021\n\ttimestamp\030\002 \001(\003"
      "\"O\n\010Exemplar\022!\n\006labels\030\001 \003(\0132\021.prometheu"
      "s.Label\022\r\n\005value\030\002 \001(\001\022\021\n\ttimestamp\030\003 \001("
      "\003\"\373\003\n\tHistogram\022\023\n\tcount_int\030\001 \001(\004H\000\022\025\n\013"
      "count_float\030\002 \001(\001H\000\022\013\n\003sum\030\003 \001(\001\022\016\n\006sche"
      "ma\030\004 \001(\021\022\026\n\016zero_threshold\030\005 \001(\001\022\030\n\016zero"
      "_count_int\030\006 \001(\004H\001\022\032\n\020zero_count_float\030\007"
      " \001(\001H\001\022.\n\016negative_spans\030\010 \003(\0132\026.prometh"
      "eus.BucketSpan\022\027\n\017negative_deltas\030\t \003(\022\022"
      "\027\n\017negative_counts\030\n \003(\001\022.\n\016positive_spa"
      "ns\030\013 \003(\0132\026.prometheus.BucketSpan\022\027\n\017posi"
      "tive_deltas\030\014 \003(\022\022\027\n\017positive_counts\030\r \003"
      "(\001\0223\n\nreset_hint\030\016 \001(\0162\037.prometheus.Hist"
      "ogram.ResetHint\022\021\n\ttimestamp\030\017 \001(\003\"4\n\tRe"
      "setHint\022\013\n\007UNKNOWN\020\000\022\007\n\003YES\020\001\022\006\n\002NO\020\002\022\t\n"
      "\005GAUGE\020\003B\007\n\005countB\014\n\nzero_count\",\n\nBucke"
      "tSpan\022\016\n\006offset\030\001 \001(\021\022\016\n\006length\030\002 \001(\r\"\250\001"
      "\n\nTimeSeries\022!\n\006labels\030\001 \003(\0132\021.prometheu"
      "s.Label\022#\n\007samples\030\002 \003(\0132\022.prometheus.Sa"
      "mple\022\'\n\texemplars\030\003 \003(\0132\024.prometheus.Exe"
      "mplar\022)\n\nhistograms\030\004 \003(\0132\025.prometheus.H"
      "istogram\"$\n\005Label\022\014\n\004name\030\001 \001(\t\022\r\n\005value"
      "\030\002 \001(\t\"+\n\006Labels\022!\n\006labels\030\001 \003(\0132\021.prome"
      "theus.Label\"\202\001\n\014LabelMatcher\022+\n\004type\030\001 \001"
      "(\0162\035.prometheus.LabelMatcher.Type\022\014\n\004nam"
      "e\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"(\n\004Type\022\006\n\002EQ\020\000\022\007"
      "\n\003NEQ\020\001\022\006\n\002RE\020\002\022\007\n\003NRE\020\003\"|\n\tReadHints\022\017\n"
      "\007step_ms\030\001 \001(\003\022\014\n\004func\030\002 \001(\t\022\020\n\010start_ms"
      "\030\003 \001(\003\022\016\n\006end_ms\030\004 \001(\003\022\020\n\010grouping\030\005 \003(\t"
      "\022\n\n\002by\030\006 \001(\010\022\020\n\010range_ms\030\007 \001(\003\"\257\001\n\005Chunk"
      "\022\023\n\013min_time_ms\030\001 \001(\003\022\023\n\013max_time_ms\030\002 \001"
      "(\003\022(\n\004type\030\003 \001(\0162\032.prometheus.Chunk.Enco"
      "ding\022\014\n\004data\030\004 \001(\014\"D\n\010Encoding\022\013\n\007UNKNOW"
      "N\020\000\022\007\n\003XOR\020\001\022\r\n\tHISTOGRAM\020\002\022\023\n\017FLOAT_HIS"
      "TOGRAM\020\003\"U\n\rChunkedSeries\022!\n\006labels\030\001 \003("
      "\0132\021.prometheus.Label\022!\n\006chunks\030\002 \003(\0132\021.p"
      "rometheus.ChunkB\010Z\006prompbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1753);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "types.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_types_2eproto
namespace prometheus {
const ::google::protobuf::EnumDescriptor* MetricMetadata_MetricType_descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_enum_descriptors[0];
}
bool MetricMetadata_MetricType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MetricMetadata_MetricType MetricMetadata::UNKNOWN;
const MetricMetadata_MetricType MetricMetadata::COUNTER;
const MetricMetadata_MetricType MetricMetadata::GAUGE;
const MetricMetadata_MetricType MetricMetadata::HISTOGRAM;
const MetricMetadata_MetricType MetricMetadata::GAUGEHISTOGRAM;
const MetricMetadata_MetricType MetricMetadata::SUMMARY;
const MetricMetadata_MetricType MetricMetadata::INFO;
const MetricMetadata_MetricType MetricMetadata::STATESET;
const MetricMetadata_MetricType MetricMetadata::MetricType_MIN;
const MetricMetadata_MetricType MetricMetadata::MetricType_MAX;
const int MetricMetadata::MetricType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Histogram_ResetHint_descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_enum_descriptors[1];
}
bool Histogram_ResetHint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Histogram_ResetHint Histogram::UNKNOWN;
const Histogram_ResetHint Histogram::YES;
const Histogram_ResetHint Histogram::NO;
const Histogram_ResetHint Histogram::GAUGE;
const Histogram_ResetHint Histogram::ResetHint_MIN;
const Histogram_ResetHint Histogram::ResetHint_MAX;
const int Histogram::ResetHint_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LabelMatcher_Type_descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_enum_descriptors[2];
}
bool LabelMatcher_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LabelMatcher_Type LabelMatcher::EQ;
const LabelMatcher_Type LabelMatcher::NEQ;
const LabelMatcher_Type LabelMatcher::RE;
const LabelMatcher_Type LabelMatcher::NRE;
const LabelMatcher_Type LabelMatcher::Type_MIN;
const LabelMatcher_Type LabelMatcher::Type_MAX;
const int LabelMatcher::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chunk_Encoding_descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_enum_descriptors[3];
}
bool Chunk_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chunk_Encoding Chunk::UNKNOWN;
const Chunk_Encoding Chunk::XOR;
const Chunk_Encoding Chunk::HISTOGRAM;
const Chunk_Encoding Chunk::FLOAT_HISTOGRAM;
const Chunk_Encoding Chunk::Encoding_MIN;
const Chunk_Encoding Chunk::Encoding_MAX;
const int Chunk::Encoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MetricMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricMetadata::kTypeFieldNumber;
const int MetricMetadata::kMetricFamilyNameFieldNumber;
const int MetricMetadata::kHelpFieldNumber;
const int MetricMetadata::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricMetadata::MetricMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_MetricMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.MetricMetadata)
}
MetricMetadata::MetricMetadata(const MetricMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metric_family_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metric_family_name().size() > 0) {
    metric_family_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_family_name_);
  }
  help_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.help().size() > 0) {
    help_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.help_);
  }
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unit().size() > 0) {
    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:prometheus.MetricMetadata)
}

void MetricMetadata::SharedCtor() {
  metric_family_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  help_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

MetricMetadata::~MetricMetadata() {
  // @@protoc_insertion_point(destructor:prometheus.MetricMetadata)
  SharedDtor();
}

void MetricMetadata::SharedDtor() {
  metric_family_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  help_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetricMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MetricMetadata::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetricMetadata& MetricMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_MetricMetadata.base);
  return *internal_default_instance();
}


void MetricMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.MetricMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  help_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool MetricMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.MetricMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .prometheus.MetricMetadata.MetricType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::prometheus::MetricMetadata_MetricType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metric_family_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metric_family_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metric_family_name().data(), static_cast<int>(this->metric_family_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prometheus.MetricMetadata.metric_family_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string help = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_help()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->help().data(), static_cast<int>(this->help().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prometheus.MetricMetadata.help"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), static_cast<int>(this->unit().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prometheus.MetricMetadata.unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.MetricMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.MetricMetadata)
  return false;
#undef DO_
}

void MetricMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.MetricMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prometheus.MetricMetadata.MetricType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string metric_family_name = 2;
  if (this->metric_family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric_family_name().data(), static_cast<int>(this->metric_family_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.MetricMetadata.metric_family_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->metric_family_name(), output);
  }

  // string help = 4;
  if (this->help().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->help().data(), static_cast<int>(this->help().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.MetricMetadata.help");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->help(), output);
  }

  // string unit = 5;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), static_cast<int>(this->unit().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.MetricMetadata.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->unit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.MetricMetadata)
}

::google::protobuf::uint8* MetricMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.MetricMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prometheus.MetricMetadata.MetricType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string metric_family_name = 2;
  if (this->metric_family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric_family_name().data(), static_cast<int>(this->metric_family_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.MetricMetadata.metric_family_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->metric_family_name(), target);
  }

  // string help = 4;
  if (this->help().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->help().data(), static_cast<int>(this->help().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.MetricMetadata.help");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->help(), target);
  }

  // string unit = 5;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), static_cast<int>(this->unit().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.MetricMetadata.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->unit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.MetricMetadata)
  return target;
}

size_t MetricMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.MetricMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string metric_family_name = 2;
  if (this->metric_family_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metric_family_name());
  }

  // string help = 4;
  if (this->help().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->help());
  }

  // string unit = 5;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  // .prometheus.MetricMetadata.MetricType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.MetricMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.MetricMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.MetricMetadata)
    MergeFrom(*source);
  }
}

void MetricMetadata::MergeFrom(const MetricMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.MetricMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metric_family_name().size() > 0) {

    metric_family_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_family_name_);
  }
  if (from.help().size() > 0) {

    help_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.help_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MetricMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.MetricMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricMetadata::CopyFrom(const MetricMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.MetricMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricMetadata::IsInitialized() const {
  return true;
}

void MetricMetadata::Swap(MetricMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricMetadata::InternalSwap(MetricMetadata* other) {
  using std::swap;
  metric_family_name_.Swap(&other->metric_family_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  help_.Swap(&other->help_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unit_.Swap(&other->unit_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MetricMetadata::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sample::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sample::kValueFieldNumber;
const int Sample::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sample::Sample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_Sample.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.Sample)
}
Sample::Sample(const Sample& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:prometheus.Sample)
}

void Sample::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:prometheus.Sample)
  SharedDtor();
}

void Sample::SharedDtor() {
}

void Sample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sample::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sample& Sample::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_Sample.base);
  return *internal_default_instance();
}


void Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.Sample)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.Sample)
  return false;
#undef DO_
}

void Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.Sample)
}

::google::protobuf::uint8* Sample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.Sample)
  return target;
}

size_t Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.Sample)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.Sample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.Sample)
    MergeFrom(*source);
  }
}

void Sample::MergeFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Sample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample::CopyFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  return true;
}

void Sample::Swap(Sample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sample::InternalSwap(Sample* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sample::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Exemplar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Exemplar::kLabelsFieldNumber;
const int Exemplar::kValueFieldNumber;
const int Exemplar::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Exemplar::Exemplar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_Exemplar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.Exemplar)
}
Exemplar::Exemplar(const Exemplar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:prometheus.Exemplar)
}

void Exemplar::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
}

Exemplar::~Exemplar() {
  // @@protoc_insertion_point(destructor:prometheus.Exemplar)
  SharedDtor();
}

void Exemplar::SharedDtor() {
}

void Exemplar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Exemplar::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Exemplar& Exemplar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_Exemplar.base);
  return *internal_default_instance();
}


void Exemplar::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.Exemplar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool Exemplar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.Exemplar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .prometheus.Label labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.Exemplar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.Exemplar)
  return false;
#undef DO_
}

void Exemplar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.Exemplar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prometheus.Label labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->labels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->labels(static_cast<int>(i)),
      output);
  }

  // double value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.Exemplar)
}

::google::protobuf::uint8* Exemplar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.Exemplar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prometheus.Label labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->labels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->labels(static_cast<int>(i)), deterministic, target);
  }

  // double value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.Exemplar)
  return target;
}

size_t Exemplar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.Exemplar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .prometheus.Label labels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->labels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->labels(static_cast<int>(i)));
    }
  }

  // double value = 2;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Exemplar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.Exemplar)
  GOOGLE_DCHECK_NE(&from, this);
  const Exemplar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Exemplar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.Exemplar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.Exemplar)
    MergeFrom(*source);
  }
}

void Exemplar::MergeFrom(const Exemplar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.Exemplar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Exemplar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.Exemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exemplar::CopyFrom(const Exemplar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.Exemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exemplar::IsInitialized() const {
  return true;
}

void Exemplar::Swap(Exemplar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Exemplar::InternalSwap(Exemplar* other) {
  using std::swap;
  CastToBase(&labels_)->InternalSwap(CastToBase(&other->labels_));
  swap(value_, other->value_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Exemplar::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Histogram::InitAsDefaultInstance() {
  ::prometheus::_Histogram_default_instance_.count_int_ = GOOGLE_ULONGLONG(0);
  ::prometheus::_Histogram_default_instance_.count_float_ = 0;
  ::prometheus::_Histogram_default_instance_.zero_count_int_ = GOOGLE_ULONGLONG(0);
  ::prometheus::_Histogram_default_instance_.zero_count_float_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Histogram::kCountIntFieldNumber;
const int Histogram::kCountFloatFieldNumber;
const int Histogram::kSumFieldNumber;
const int Histogram::kSchemaFieldNumber;
const int Histogram::kZeroThresholdFieldNumber;
const int Histogram::kZeroCountIntFieldNumber;
const int Histogram::kZeroCountFloatFieldNumber;
const int Histogram::kNegativeSpansFieldNumber;
const int Histogram::kNegativeDeltasFieldNumber;
const int Histogram::kNegativeCountsFieldNumber;
const int Histogram::kPositiveSpansFieldNumber;
const int Histogram::kPositiveDeltasFieldNumber;
const int Histogram::kPositiveCountsFieldNumber;
const int Histogram::kResetHintFieldNumber;
const int Histogram::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Histogram::Histogram()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_Histogram.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.Histogram)
}
Histogram::Histogram(const Histogram& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      negative_spans_(from.negative_spans_),
      negative_deltas_(from.negative_deltas_),
      negative_counts_(from.negative_counts_),
      positive_spans_(from.positive_spans_),
      positive_deltas_(from.positive_deltas_),
      positive_counts_(from.positive_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sum_, &from.sum_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&sum_)) + sizeof(timestamp_));
  clear_has_count();
  switch (from.count_case()) {
    case kCountInt: {
      set_count_int(from.count_int());
      break;
    }
    case kCountFloat: {
      set_count_float(from.count_float());
      break;
    }
    case COUNT_NOT_SET: {
      break;
    }
  }
  clear_has_zero_count();
  switch (from.zero_count_case()) {
    case kZeroCountInt: {
      set_zero_count_int(from.zero_count_int());
      break;
    }
    case kZeroCountFloat: {
      set_zero_count_float(from.zero_count_float());
      break;
    }
    case ZERO_COUNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:prometheus.Histogram)
}

void Histogram::SharedCtor() {
  ::memset(&sum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&sum_)) + sizeof(timestamp_));
  clear_has_count();
  clear_has_zero_count();
}

Histogram::~Histogram() {
  // @@protoc_insertion_point(destructor:prometheus.Histogram)
  SharedDtor();
}

void Histogram::SharedDtor() {
  if (has_count()) {
    clear_count();
  }
  if (has_zero_count()) {
    clear_zero_count();
  }
}

void Histogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Histogram::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Histogram& Histogram::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_Histogram.base);
  return *internal_default_instance();
}


void Histogram::clear_count() {
// @@protoc_insertion_point(one_of_clear_start:prometheus.Histogram)
  switch (count_case()) {
    case kCountInt: {
      // No need to clear
      break;
    }
    case kCountFloat: {
      // No need to clear
      break;
    }
    case COUNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COUNT_NOT_SET;
}

void Histogram::clear_zero_count() {
// @@protoc_insertion_point(one_of_clear_start:prometheus.Histogram)
  switch (zero_count_case()) {
    case kZeroCountInt: {
      // No need to clear
      break;
    }
    case kZeroCountFloat: {
      // No need to clear
      break;
    }
    case ZERO_COUNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ZERO_COUNT_NOT_SET;
}


void Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.Histogram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  negative_spans_.Clear();
  negative_deltas_.Clear();
  negative_counts_.Clear();
  positive_spans_.Clear();
  positive_deltas_.Clear();
  positive_counts_.Clear();
  ::memset(&sum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&sum_)) + sizeof(timestamp_));
  clear_count();
  clear_zero_count();
  _internal_metadata_.Clear();
}

bool Histogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.Histogram)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 count_int = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_.count_int_)));
          set_has_count_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double count_float = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          clear_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &count_.count_float_)));
          set_has_count_float();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 schema = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &schema_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double zero_threshold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zero_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 zero_count_int = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_zero_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zero_count_.zero_count_int_)));
          set_has_zero_count_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double zero_count_float = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          clear_zero_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zero_count_.zero_count_float_)));
          set_has_zero_count_float();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prometheus.BucketSpan negative_spans = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_negative_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint64 negative_deltas = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_negative_deltas())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 74u, input, this->mutable_negative_deltas())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double negative_counts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_negative_counts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 82u, input, this->mutable_negative_counts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prometheus.BucketSpan positive_spans = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_positive_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint64 positive_deltas = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_positive_deltas())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 98u, input, this->mutable_positive_deltas())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double positive_counts = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_positive_counts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 106u, input, this->mutable_positive_counts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .prometheus.Histogram.ResetHint reset_hint = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reset_hint(static_cast< ::prometheus::Histogram_ResetHint >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.Histogram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.Histogram)
  return false;
#undef DO_
}

void Histogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.Histogram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count_int = 1;
  if (has_count_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->count_int(), output);
  }

  // double count_float = 2;
  if (has_count_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->count_float(), output);
  }

  // double sum = 3;
  if (this->sum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sum(), output);
  }

  // sint32 schema = 4;
  if (this->schema() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->schema(), output);
  }

  // double zero_threshold = 5;
  if (this->zero_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->zero_threshold(), output);
  }

  // uint64 zero_count_int = 6;
  if (has_zero_count_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->zero_count_int(), output);
  }

  // double zero_count_float = 7;
  if (has_zero_count_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->zero_count_float(), output);
  }

  // repeated .prometheus.BucketSpan negative_spans = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->negative_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->negative_spans(static_cast<int>(i)),
      output);
  }

  // repeated sint64 negative_deltas = 9;
  if (this->negative_deltas_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _negative_deltas_cached_byte_size_));
  }
  for (int i = 0, n = this->negative_deltas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->negative_deltas(i), output);
  }

  // repeated double negative_counts = 10;
  if (this->negative_counts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _negative_counts_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->negative_counts().data(), this->negative_counts_size(), output);
  }

  // repeated .prometheus.BucketSpan positive_spans = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positive_spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->positive_spans(static_cast<int>(i)),
      output);
  }

  // repeated sint64 positive_deltas = 12;
  if (this->positive_deltas_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _positive_deltas_cached_byte_size_));
  }
  for (int i = 0, n = this->positive_deltas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->positive_deltas(i), output);
  }

  // repeated double positive_counts = 13;
  if (this->positive_counts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _positive_counts_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->positive_counts().data(), this->positive_counts_size(), output);
  }

  // .prometheus.Histogram.ResetHint reset_hint = 14;
  if (this->reset_hint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->reset_hint(), output);
  }

  // int64 timestamp = 15;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.Histogram)
}

::google::protobuf::uint8* Histogram::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.Histogram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count_int = 1;
  if (has_count_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->count_int(), target);
  }

  // double count_float = 2;
  if (has_count_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->count_float(), target);
  }

  // double sum = 3;
  if (this->sum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sum(), target);
  }

  // sint32 schema = 4;
  if (this->schema() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->schema(), target);
  }

  // double zero_threshold = 5;
  if (this->zero_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->zero_threshold(), target);
  }

  // uint64 zero_count_int = 6;
  if (has_zero_count_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->zero_count_int(), target);
  }

  // double zero_count_float = 7;
  if (has_zero_count_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->zero_count_float(), target);
  }

  // repeated .prometheus.BucketSpan negative_spans = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->negative_spans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->negative_spans(static_cast<int>(i)), deterministic, target);
  }

  // repeated sint64 negative_deltas = 9;
  if (this->negative_deltas_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _negative_deltas_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->negative_deltas_, target);
  }

  // repeated double negative_counts = 10;
  if (this->negative_counts_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _negative_counts_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->negative_counts_, target);
  }

  // repeated .prometheus.BucketSpan positive_spans = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positive_spans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->positive_spans(static_cast<int>(i)), deterministic, target);
  }

  // repeated sint64 positive_deltas = 12;
  if (this->positive_deltas_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _positive_deltas_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->positive_deltas_, target);
  }

  // repeated double positive_counts = 13;
  if (this->positive_counts_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _positive_counts_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->positive_counts_, target);
  }

  // .prometheus.Histogram.ResetHint reset_hint = 14;
  if (this->reset_hint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->reset_hint(), target);
  }

  // int64 timestamp = 15;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.Histogram)
  return target;
}

size_t Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.Histogram)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .prometheus.BucketSpan negative_spans = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->negative_spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->negative_spans(static_cast<int>(i)));
    }
  }

  // repeated sint64 negative_deltas = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->negative_deltas_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _negative_deltas_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double negative_counts = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->negative_counts_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _negative_counts_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .prometheus.BucketSpan positive_spans = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->positive_spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->positive_spans(static_cast<int>(i)));
    }
  }

  // repeated sint64 positive_deltas = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->positive_deltas_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _positive_deltas_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double positive_counts = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->positive_counts_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _positive_counts_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double sum = 3;
  if (this->sum() != 0) {
    total_size += 1 + 8;
  }

  // double zero_threshold = 5;
  if (this->zero_threshold() != 0) {
    total_size += 1 + 8;
  }

  // sint32 schema = 4;
  if (this->schema() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->schema());
  }

  // .prometheus.Histogram.ResetHint reset_hint = 14;
  if (this->reset_hint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reset_hint());
  }

  // int64 timestamp = 15;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  switch (count_case()) {
    // uint64 count_int = 1;
    case kCountInt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count_int());
      break;
    }
    // double count_float = 2;
    case kCountFloat: {
      total_size += 1 + 8;
      break;
    }
    case COUNT_NOT_SET: {
      break;
    }
  }
  switch (zero_count_case()) {
    // uint64 zero_count_int = 6;
    case kZeroCountInt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zero_count_int());
      break;
    }
    // double zero_count_float = 7;
    case kZeroCountFloat: {
      total_size += 1 + 8;
      break;
    }
    case ZERO_COUNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Histogram::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  const Histogram* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Histogram>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.Histogram)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.Histogram)
    MergeFrom(*source);
  }
}

void Histogram::MergeFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  negative_spans_.MergeFrom(from.negative_spans_);
  negative_deltas_.MergeFrom(from.negative_deltas_);
  negative_counts_.MergeFrom(from.negative_counts_);
  positive_spans_.MergeFrom(from.positive_spans_);
  positive_deltas_.MergeFrom(from.positive_deltas_);
  positive_counts_.MergeFrom(from.positive_counts_);
  if (from.sum() != 0) {
    set_sum(from.sum());
  }
  if (from.zero_threshold() != 0) {
    set_zero_threshold(from.zero_threshold());
  }
  if (from.schema() != 0) {
    set_schema(from.schema());
  }
  if (from.reset_hint() != 0) {
    set_reset_hint(from.reset_hint());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  switch (from.count_case()) {
    case kCountInt: {
      set_count_int(from.count_int());
      break;
    }
    case kCountFloat: {
      set_count_float(from.count_float());
      break;
    }
    case COUNT_NOT_SET: {
      break;
    }
  }
  switch (from.zero_count_case()) {
    case kZeroCountInt: {
      set_zero_count_int(from.zero_count_int());
      break;
    }
    case kZeroCountFloat: {
      set_zero_count_float(from.zero_count_float());
      break;
    }
    case ZERO_COUNT_NOT_SET: {
      break;
    }
  }
}

void Histogram::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram::CopyFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram::IsInitialized() const {
  return true;
}

void Histogram::Swap(Histogram* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Histogram::InternalSwap(Histogram* other) {
  using std::swap;
  CastToBase(&negative_spans_)->InternalSwap(CastToBase(&other->negative_spans_));
  negative_deltas_.InternalSwap(&other->negative_deltas_);
  negative_counts_.InternalSwap(&other->negative_counts_);
  CastToBase(&positive_spans_)->InternalSwap(CastToBase(&other->positive_spans_));
  positive_deltas_.InternalSwap(&other->positive_deltas_);
  positive_counts_.InternalSwap(&other->positive_counts_);
  swap(sum_, other->sum_);
  swap(zero_threshold_, other->zero_threshold_);
  swap(schema_, other->schema_);
  swap(reset_hint_, other->reset_hint_);
  swap(timestamp_, other->timestamp_);
  swap(count_, other->count_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(zero_count_, other->zero_count_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Histogram::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BucketSpan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BucketSpan::kOffsetFieldNumber;
const int BucketSpan::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BucketSpan::BucketSpan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_BucketSpan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.BucketSpan)
}
BucketSpan::BucketSpan(const BucketSpan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:prometheus.BucketSpan)
}

void BucketSpan::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

BucketSpan::~BucketSpan() {
  // @@protoc_insertion_point(destructor:prometheus.BucketSpan)
  SharedDtor();
}

void BucketSpan::SharedDtor() {
}

void BucketSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BucketSpan::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BucketSpan& BucketSpan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_BucketSpan.base);
  return *internal_default_instance();
}


void BucketSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.BucketSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool BucketSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.BucketSpan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.BucketSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.BucketSpan)
  return false;
#undef DO_
}

void BucketSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.BucketSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 offset = 1;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->offset(), output);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.BucketSpan)
}

::google::protobuf::uint8* BucketSpan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.BucketSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 offset = 1;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->offset(), target);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.BucketSpan)
  return target;
}

size_t BucketSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.BucketSpan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sint32 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->offset());
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BucketSpan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.BucketSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const BucketSpan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BucketSpan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.BucketSpan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.BucketSpan)
    MergeFrom(*source);
  }
}

void BucketSpan::MergeFrom(const BucketSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.BucketSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void BucketSpan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.BucketSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BucketSpan::CopyFrom(const BucketSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.BucketSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketSpan::IsInitialized() const {
  return true;
}

void BucketSpan::Swap(BucketSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BucketSpan::InternalSwap(BucketSpan* other) {
  using std::swap;
  swap(offset_, other->offset_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BucketSpan::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeSeries::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSeries::kLabelsFieldNumber;
const int TimeSeries::kSamplesFieldNumber;
const int TimeSeries::kExemplarsFieldNumber;
const int TimeSeries::kHistogramsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSeries::TimeSeries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_TimeSeries.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.TimeSeries)
}
TimeSeries::TimeSeries(const TimeSeries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      labels_(from.labels_),
      samples_(from.samples_),
      exemplars_(from.exemplars_),
      histograms_(from.histograms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prometheus.TimeSeries)
}

void TimeSeries::SharedCtor() {
}

TimeSeries::~TimeSeries() {
  // @@protoc_insertion_point(destructor:prometheus.TimeSeries)
  SharedDtor();
}

void TimeSeries::SharedDtor() {
}

void TimeSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimeSeries::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeSeries& TimeSeries::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_TimeSeries.base);
  return *internal_default_instance();
}


void TimeSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.TimeSeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  samples_.Clear();
  exemplars_.Clear();
  histograms_.Clear();
  _internal_metadata_.Clear();
}

bool TimeSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.TimeSeries)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .prometheus.Label labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prometheus.Sample samples = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prometheus.Exemplar exemplars = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_exemplars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prometheus.Histogram histograms = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_histograms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.TimeSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.TimeSeries)
  return false;
#undef DO_
}

void TimeSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.TimeSeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prometheus.Label labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->labels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->labels(static_cast<int>(i)),
      output);
  }

  // repeated .prometheus.Sample samples = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->samples_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->samples(static_cast<int>(i)),
      output);
  }

  // repeated .prometheus.Exemplar exemplars = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exemplars_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->exemplars(static_cast<int>(i)),
      output);
  }

  // repeated .prometheus.Histogram histograms = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->histograms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->histograms(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.TimeSeries)
}

::google::protobuf::uint8* TimeSeries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.TimeSeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prometheus.Label labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->labels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->labels(static_cast<int>(i)), deterministic, target);
  }

  // repeated .prometheus.Sample samples = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->samples_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->samples(static_cast<int>(i)), deterministic, target);
  }

  // repeated .prometheus.Exemplar exemplars = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exemplars_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->exemplars(static_cast<int>(i)), deterministic, target);
  }

  // repeated .prometheus.Histogram histograms = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->histograms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->histograms(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.TimeSeries)
  return target;
}

size_t TimeSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.TimeSeries)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .prometheus.Label labels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->labels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->labels(static_cast<int>(i)));
    }
  }

  // repeated .prometheus.Sample samples = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->samples_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->samples(static_cast<int>(i)));
    }
  }

  // repeated .prometheus.Exemplar exemplars = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->exemplars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exemplars(static_cast<int>(i)));
    }
  }

  // repeated .prometheus.Histogram histograms = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->histograms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->histograms(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSeries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.TimeSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSeries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSeries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.TimeSeries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.TimeSeries)
    MergeFrom(*source);
  }
}

void TimeSeries::MergeFrom(const TimeSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.TimeSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  samples_.MergeFrom(from.samples_);
  exemplars_.MergeFrom(from.exemplars_);
  histograms_.MergeFrom(from.histograms_);
}

void TimeSeries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.TimeSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeries::CopyFrom(const TimeSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.TimeSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeries::IsInitialized() const {
  return true;
}

void TimeSeries::Swap(TimeSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSeries::InternalSwap(TimeSeries* other) {
  using std::swap;
  CastToBase(&labels_)->InternalSwap(CastToBase(&other->labels_));
  CastToBase(&samples_)->InternalSwap(CastToBase(&other->samples_));
  CastToBase(&exemplars_)->InternalSwap(CastToBase(&other->exemplars_));
  CastToBase(&histograms_)->InternalSwap(CastToBase(&other->histograms_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimeSeries::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Label::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Label::kNameFieldNumber;
const int Label::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Label::Label()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_Label.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.Label)
}
Label::Label(const Label& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:prometheus.Label)
}

void Label::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:prometheus.Label)
  SharedDtor();
}

void Label::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Label::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Label::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Label& Label::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_Label.base);
  return *internal_default_instance();
}


void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.Label)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.Label)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prometheus.Label.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prometheus.Label.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.Label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.Label)
  return false;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.Label)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.Label.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.Label.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.Label)
}

::google::protobuf::uint8* Label::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.Label)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.Label.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.Label.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.Label)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Label::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.Label)
  GOOGLE_DCHECK_NE(&from, this);
  const Label* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Label>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.Label)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.Label)
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.Label)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Label::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::Swap(Label* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Label::InternalSwap(Label* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Label::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Labels::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Labels::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Labels::Labels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_Labels.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.Labels)
}
Labels::Labels(const Labels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prometheus.Labels)
}

void Labels::SharedCtor() {
}

Labels::~Labels() {
  // @@protoc_insertion_point(destructor:prometheus.Labels)
  SharedDtor();
}

void Labels::SharedDtor() {
}

void Labels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Labels::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Labels& Labels::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_Labels.base);
  return *internal_default_instance();
}


void Labels::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.Labels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  _internal_metadata_.Clear();
}

bool Labels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.Labels)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .prometheus.Label labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.Labels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.Labels)
  return false;
#undef DO_
}

void Labels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.Labels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prometheus.Label labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->labels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->labels(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.Labels)
}

::google::protobuf::uint8* Labels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.Labels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prometheus.Label labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->labels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->labels(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.Labels)
  return target;
}

size_t Labels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.Labels)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .prometheus.Label labels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->labels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->labels(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Labels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.Labels)
  GOOGLE_DCHECK_NE(&from, this);
  const Labels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Labels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.Labels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.Labels)
    MergeFrom(*source);
  }
}

void Labels::MergeFrom(const Labels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.Labels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
}

void Labels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.Labels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Labels::CopyFrom(const Labels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.Labels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Labels::IsInitialized() const {
  return true;
}

void Labels::Swap(Labels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Labels::InternalSwap(Labels* other) {
  using std::swap;
  CastToBase(&labels_)->InternalSwap(CastToBase(&other->labels_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Labels::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LabelMatcher::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelMatcher::kTypeFieldNumber;
const int LabelMatcher::kNameFieldNumber;
const int LabelMatcher::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelMatcher::LabelMatcher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_LabelMatcher.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.LabelMatcher)
}
LabelMatcher::LabelMatcher(const LabelMatcher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:prometheus.LabelMatcher)
}

void LabelMatcher::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

LabelMatcher::~LabelMatcher() {
  // @@protoc_insertion_point(destructor:prometheus.LabelMatcher)
  SharedDtor();
}

void LabelMatcher::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LabelMatcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LabelMatcher::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelMatcher& LabelMatcher::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_LabelMatcher.base);
  return *internal_default_instance();
}


void LabelMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.LabelMatcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool LabelMatcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.LabelMatcher)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .prometheus.LabelMatcher.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::prometheus::LabelMatcher_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prometheus.LabelMatcher.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prometheus.LabelMatcher.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.LabelMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.LabelMatcher)
  return false;
#undef DO_
}

void LabelMatcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.LabelMatcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prometheus.LabelMatcher.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.LabelMatcher.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.LabelMatcher.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.LabelMatcher)
}

::google::protobuf::uint8* LabelMatcher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.LabelMatcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prometheus.LabelMatcher.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.LabelMatcher.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.LabelMatcher.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.LabelMatcher)
  return target;
}

size_t LabelMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.LabelMatcher)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .prometheus.LabelMatcher.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelMatcher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.LabelMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelMatcher* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelMatcher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.LabelMatcher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.LabelMatcher)
    MergeFrom(*source);
  }
}

void LabelMatcher::MergeFrom(const LabelMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.LabelMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LabelMatcher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.LabelMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelMatcher::CopyFrom(const LabelMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.LabelMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelMatcher::IsInitialized() const {
  return true;
}

void LabelMatcher::Swap(LabelMatcher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelMatcher::InternalSwap(LabelMatcher* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LabelMatcher::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadHints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadHints::kStepMsFieldNumber;
const int ReadHints::kFuncFieldNumber;
const int ReadHints::kStartMsFieldNumber;
const int ReadHints::kEndMsFieldNumber;
const int ReadHints::kGroupingFieldNumber;
const int ReadHints::kByFieldNumber;
const int ReadHints::kRangeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadHints::ReadHints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_ReadHints.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.ReadHints)
}
ReadHints::ReadHints(const ReadHints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      grouping_(from.grouping_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.func().size() > 0) {
    func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
  }
  ::memcpy(&step_ms_, &from.step_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_) -
    reinterpret_cast<char*>(&step_ms_)) + sizeof(by_));
  // @@protoc_insertion_point(copy_constructor:prometheus.ReadHints)
}

void ReadHints::SharedCtor() {
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_) -
      reinterpret_cast<char*>(&step_ms_)) + sizeof(by_));
}

ReadHints::~ReadHints() {
  // @@protoc_insertion_point(destructor:prometheus.ReadHints)
  SharedDtor();
}

void ReadHints::SharedDtor() {
  func_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadHints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadHints::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadHints& ReadHints::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_ReadHints.base);
  return *internal_default_instance();
}


void ReadHints::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.ReadHints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grouping_.Clear();
  func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_) -
      reinterpret_cast<char*>(&step_ms_)) + sizeof(by_));
  _internal_metadata_.Clear();
}

bool ReadHints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.ReadHints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string func = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->func().data(), static_cast<int>(this->func().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prometheus.ReadHints.func"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end_ms = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string grouping = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_grouping()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grouping(this->grouping_size() - 1).data(),
            static_cast<int>(this->grouping(this->grouping_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prometheus.ReadHints.grouping"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool by = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &by_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 range_ms = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.ReadHints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.ReadHints)
  return false;
#undef DO_
}

void ReadHints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.ReadHints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_ms = 1;
  if (this->step_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_ms(), output);
  }

  // string func = 2;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.ReadHints.func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->func(), output);
  }

  // int64 start_ms = 3;
  if (this->start_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_ms(), output);
  }

  // int64 end_ms = 4;
  if (this->end_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_ms(), output);
  }

  // repeated string grouping = 5;
  for (int i = 0, n = this->grouping_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grouping(i).data(), static_cast<int>(this->grouping(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.ReadHints.grouping");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->grouping(i), output);
  }

  // bool by = 6;
  if (this->by() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->by(), output);
  }

  // int64 range_ms = 7;
  if (this->range_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->range_ms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.ReadHints)
}

::google::protobuf::uint8* ReadHints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.ReadHints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_ms = 1;
  if (this->step_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_ms(), target);
  }

  // string func = 2;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.ReadHints.func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->func(), target);
  }

  // int64 start_ms = 3;
  if (this->start_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_ms(), target);
  }

  // int64 end_ms = 4;
  if (this->end_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_ms(), target);
  }

  // repeated string grouping = 5;
  for (int i = 0, n = this->grouping_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grouping(i).data(), static_cast<int>(this->grouping(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prometheus.ReadHints.grouping");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->grouping(i), target);
  }

  // bool by = 6;
  if (this->by() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->by(), target);
  }

  // int64 range_ms = 7;
  if (this->range_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->range_ms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.ReadHints)
  return target;
}

size_t ReadHints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.ReadHints)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string grouping = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->grouping_size());
  for (int i = 0, n = this->grouping_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->grouping(i));
  }

  // string func = 2;
  if (this->func().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func());
  }

  // int64 step_ms = 1;
  if (this->step_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_ms());
  }

  // int64 start_ms = 3;
  if (this->start_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_ms());
  }

  // int64 end_ms = 4;
  if (this->end_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_ms());
  }

  // int64 range_ms = 7;
  if (this->range_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->range_ms());
  }

  // bool by = 6;
  if (this->by() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadHints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.ReadHints)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadHints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadHints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.ReadHints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.ReadHints)
    MergeFrom(*source);
  }
}

void ReadHints::MergeFrom(const ReadHints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.ReadHints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grouping_.MergeFrom(from.grouping_);
  if (from.func().size() > 0) {

    func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_);
  }
  if (from.step_ms() != 0) {
    set_step_ms(from.step_ms());
  }
  if (from.start_ms() != 0) {
    set_start_ms(from.start_ms());
  }
  if (from.end_ms() != 0) {
    set_end_ms(from.end_ms());
  }
  if (from.range_ms() != 0) {
    set_range_ms(from.range_ms());
  }
  if (from.by() != 0) {
    set_by(from.by());
  }
}

void ReadHints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.ReadHints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadHints::CopyFrom(const ReadHints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.ReadHints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadHints::IsInitialized() const {
  return true;
}

void ReadHints::Swap(ReadHints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadHints::InternalSwap(ReadHints* other) {
  using std::swap;
  grouping_.InternalSwap(CastToBase(&other->grouping_));
  func_.Swap(&other->func_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(step_ms_, other->step_ms_);
  swap(start_ms_, other->start_ms_);
  swap(end_ms_, other->end_ms_);
  swap(range_ms_, other->range_ms_);
  swap(by_, other->by_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadHints::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Chunk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chunk::kMinTimeMsFieldNumber;
const int Chunk::kMaxTimeMsFieldNumber;
const int Chunk::kTypeFieldNumber;
const int Chunk::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chunk::Chunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_Chunk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&min_time_ms_, &from.min_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&min_time_ms_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:prometheus.Chunk)
}

void Chunk::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&min_time_ms_)) + sizeof(type_));
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:prometheus.Chunk)
  SharedDtor();
}

void Chunk::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Chunk::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chunk& Chunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_Chunk.base);
  return *internal_default_instance();
}


void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.Chunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&min_time_ms_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.Chunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 min_time_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .prometheus.Chunk.Encoding type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::prometheus::Chunk_Encoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.Chunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.Chunk)
  return false;
#undef DO_
}

void Chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.Chunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 min_time_ms = 1;
  if (this->min_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->min_time_ms(), output);
  }

  // int64 max_time_ms = 2;
  if (this->max_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_time_ms(), output);
  }

  // .prometheus.Chunk.Encoding type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.Chunk)
}

::google::protobuf::uint8* Chunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.Chunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 min_time_ms = 1;
  if (this->min_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->min_time_ms(), target);
  }

  // int64 max_time_ms = 2;
  if (this->max_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_time_ms(), target);
  }

  // .prometheus.Chunk.Encoding type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.Chunk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int64 min_time_ms = 1;
  if (this->min_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_time_ms());
  }

  // int64 max_time_ms = 2;
  if (this->max_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_time_ms());
  }

  // .prometheus.Chunk.Encoding type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  const Chunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.Chunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.Chunk)
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.min_time_ms() != 0) {
    set_min_time_ms(from.min_time_ms());
  }
  if (from.max_time_ms() != 0) {
    set_max_time_ms(from.max_time_ms());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Chunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::Swap(Chunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_time_ms_, other->min_time_ms_);
  swap(max_time_ms_, other->max_time_ms_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Chunk::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChunkedSeries::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkedSeries::kLabelsFieldNumber;
const int ChunkedSeries::kChunksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkedSeries::ChunkedSeries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_types_2eproto::scc_info_ChunkedSeries.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:prometheus.ChunkedSeries)
}
ChunkedSeries::ChunkedSeries(const ChunkedSeries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      labels_(from.labels_),
      chunks_(from.chunks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prometheus.ChunkedSeries)
}

void ChunkedSeries::SharedCtor() {
}

ChunkedSeries::~ChunkedSeries() {
  // @@protoc_insertion_point(destructor:prometheus.ChunkedSeries)
  SharedDtor();
}

void ChunkedSeries::SharedDtor() {
}

void ChunkedSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkedSeries::descriptor() {
  ::protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkedSeries& ChunkedSeries::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_types_2eproto::scc_info_ChunkedSeries.base);
  return *internal_default_instance();
}


void ChunkedSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:prometheus.ChunkedSeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  chunks_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkedSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prometheus.ChunkedSeries)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .prometheus.Label labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prometheus.Chunk chunks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chunks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prometheus.ChunkedSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prometheus.ChunkedSeries)
  return false;
#undef DO_
}

void ChunkedSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prometheus.ChunkedSeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prometheus.Label labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->labels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->labels(static_cast<int>(i)),
      output);
  }

  // repeated .prometheus.Chunk chunks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->chunks(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prometheus.ChunkedSeries)
}

::google::protobuf::uint8* ChunkedSeries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prometheus.ChunkedSeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prometheus.Label labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->labels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->labels(static_cast<int>(i)), deterministic, target);
  }

  // repeated .prometheus.Chunk chunks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->chunks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prometheus.ChunkedSeries)
  return target;
}

size_t ChunkedSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prometheus.ChunkedSeries)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .prometheus.Label labels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->labels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->labels(static_cast<int>(i)));
    }
  }

  // repeated .prometheus.Chunk chunks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->chunks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkedSeries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prometheus.ChunkedSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkedSeries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkedSeries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prometheus.ChunkedSeries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prometheus.ChunkedSeries)
    MergeFrom(*source);
  }
}

void ChunkedSeries::MergeFrom(const ChunkedSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prometheus.ChunkedSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  chunks_.MergeFrom(from.chunks_);
}

void ChunkedSeries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prometheus.ChunkedSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkedSeries::CopyFrom(const ChunkedSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prometheus.ChunkedSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkedSeries::IsInitialized() const {
  return true;
}

void ChunkedSeries::Swap(ChunkedSeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkedSeries::InternalSwap(ChunkedSeries* other) {
  using std::swap;
  CastToBase(&labels_)->InternalSwap(CastToBase(&other->labels_));
  CastToBase(&chunks_)->InternalSwap(CastToBase(&other->chunks_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkedSeries::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prometheus
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::MetricMetadata* Arena::CreateMaybeMessage< ::prometheus::MetricMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::MetricMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::Sample* Arena::CreateMaybeMessage< ::prometheus::Sample >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::Sample >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::Exemplar* Arena::CreateMaybeMessage< ::prometheus::Exemplar >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::Exemplar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::Histogram* Arena::CreateMaybeMessage< ::prometheus::Histogram >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::Histogram >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::BucketSpan* Arena::CreateMaybeMessage< ::prometheus::BucketSpan >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::BucketSpan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::TimeSeries* Arena::CreateMaybeMessage< ::prometheus::TimeSeries >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::TimeSeries >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::Label* Arena::CreateMaybeMessage< ::prometheus::Label >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::Label >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::Labels* Arena::CreateMaybeMessage< ::prometheus::Labels >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::Labels >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::LabelMatcher* Arena::CreateMaybeMessage< ::prometheus::LabelMatcher >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::LabelMatcher >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::ReadHints* Arena::CreateMaybeMessage< ::prometheus::ReadHints >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::ReadHints >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::Chunk* Arena::CreateMaybeMessage< ::prometheus::Chunk >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::Chunk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::prometheus::ChunkedSeries* Arena::CreateMaybeMessage< ::prometheus::ChunkedSeries >(Arena* arena) {
  return Arena::CreateInternal< ::prometheus::ChunkedSeries >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
